// Code generated by mockery. DO NOT EDIT.

package proto

import mock "github.com/stretchr/testify/mock"

// Mockwriter is an autogenerated mock type for the writer type
type Mockwriter struct {
	mock.Mock
}

type Mockwriter_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockwriter) EXPECT() *Mockwriter_Expecter {
	return &Mockwriter_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: p
func (_m *Mockwriter) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockwriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Mockwriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *Mockwriter_Expecter) Write(p interface{}) *Mockwriter_Write_Call {
	return &Mockwriter_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *Mockwriter_Write_Call) Run(run func(p []byte)) *Mockwriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Mockwriter_Write_Call) Return(n int, err error) *Mockwriter_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Mockwriter_Write_Call) RunAndReturn(run func([]byte) (int, error)) *Mockwriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteByte provides a mock function with given fields: c
func (_m *Mockwriter) WriteByte(c byte) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for WriteByte")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(byte) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockwriter_WriteByte_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteByte'
type Mockwriter_WriteByte_Call struct {
	*mock.Call
}

// WriteByte is a helper method to define mock.On call
//   - c byte
func (_e *Mockwriter_Expecter) WriteByte(c interface{}) *Mockwriter_WriteByte_Call {
	return &Mockwriter_WriteByte_Call{Call: _e.mock.On("WriteByte", c)}
}

func (_c *Mockwriter_WriteByte_Call) Run(run func(c byte)) *Mockwriter_WriteByte_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *Mockwriter_WriteByte_Call) Return(_a0 error) *Mockwriter_WriteByte_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockwriter_WriteByte_Call) RunAndReturn(run func(byte) error) *Mockwriter_WriteByte_Call {
	_c.Call.Return(run)
	return _c
}

// WriteString provides a mock function with given fields: s
func (_m *Mockwriter) WriteString(s string) (int, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockwriter_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type Mockwriter_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - s string
func (_e *Mockwriter_Expecter) WriteString(s interface{}) *Mockwriter_WriteString_Call {
	return &Mockwriter_WriteString_Call{Call: _e.mock.On("WriteString", s)}
}

func (_c *Mockwriter_WriteString_Call) Run(run func(s string)) *Mockwriter_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Mockwriter_WriteString_Call) Return(n int, err error) *Mockwriter_WriteString_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Mockwriter_WriteString_Call) RunAndReturn(run func(string) (int, error)) *Mockwriter_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockwriter creates a new instance of Mockwriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockwriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockwriter {
	mock := &Mockwriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
