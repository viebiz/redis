// Code generated by mockery. DO NOT EDIT.

package hscan

import mock "github.com/stretchr/testify/mock"

// MockScanner is an autogenerated mock type for the Scanner type
type MockScanner struct {
	mock.Mock
}

type MockScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScanner) EXPECT() *MockScanner_Expecter {
	return &MockScanner_Expecter{mock: &_m.Mock}
}

// ScanRedis provides a mock function with given fields: s
func (_m *MockScanner) ScanRedis(s string) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for ScanRedis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScanner_ScanRedis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanRedis'
type MockScanner_ScanRedis_Call struct {
	*mock.Call
}

// ScanRedis is a helper method to define mock.On call
//   - s string
func (_e *MockScanner_Expecter) ScanRedis(s interface{}) *MockScanner_ScanRedis_Call {
	return &MockScanner_ScanRedis_Call{Call: _e.mock.On("ScanRedis", s)}
}

func (_c *MockScanner_ScanRedis_Call) Run(run func(s string)) *MockScanner_ScanRedis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockScanner_ScanRedis_Call) Return(_a0 error) *MockScanner_ScanRedis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScanner_ScanRedis_Call) RunAndReturn(run func(string) error) *MockScanner_ScanRedis_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScanner creates a new instance of MockScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScanner {
	mock := &MockScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
