// Code generated by mockery. DO NOT EDIT.

package pool

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPooler is an autogenerated mock type for the Pooler type
type MockPooler struct {
	mock.Mock
}

type MockPooler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPooler) EXPECT() *MockPooler_Expecter {
	return &MockPooler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockPooler) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPooler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPooler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPooler_Expecter) Close() *MockPooler_Close_Call {
	return &MockPooler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockPooler_Close_Call) Run(run func()) *MockPooler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPooler_Close_Call) Return(_a0 error) *MockPooler_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPooler_Close_Call) RunAndReturn(run func() error) *MockPooler_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CloseConn provides a mock function with given fields: _a0
func (_m *MockPooler) CloseConn(_a0 *Conn) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CloseConn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Conn) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPooler_CloseConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConn'
type MockPooler_CloseConn_Call struct {
	*mock.Call
}

// CloseConn is a helper method to define mock.On call
//   - _a0 *Conn
func (_e *MockPooler_Expecter) CloseConn(_a0 interface{}) *MockPooler_CloseConn_Call {
	return &MockPooler_CloseConn_Call{Call: _e.mock.On("CloseConn", _a0)}
}

func (_c *MockPooler_CloseConn_Call) Run(run func(_a0 *Conn)) *MockPooler_CloseConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Conn))
	})
	return _c
}

func (_c *MockPooler_CloseConn_Call) Return(_a0 error) *MockPooler_CloseConn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPooler_CloseConn_Call) RunAndReturn(run func(*Conn) error) *MockPooler_CloseConn_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *MockPooler) Get(_a0 context.Context) (*Conn, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Conn, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Conn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPooler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPooler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockPooler_Expecter) Get(_a0 interface{}) *MockPooler_Get_Call {
	return &MockPooler_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *MockPooler_Get_Call) Run(run func(_a0 context.Context)) *MockPooler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPooler_Get_Call) Return(_a0 *Conn, _a1 error) *MockPooler_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPooler_Get_Call) RunAndReturn(run func(context.Context) (*Conn, error)) *MockPooler_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IdleLen provides a mock function with no fields
func (_m *MockPooler) IdleLen() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdleLen")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPooler_IdleLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdleLen'
type MockPooler_IdleLen_Call struct {
	*mock.Call
}

// IdleLen is a helper method to define mock.On call
func (_e *MockPooler_Expecter) IdleLen() *MockPooler_IdleLen_Call {
	return &MockPooler_IdleLen_Call{Call: _e.mock.On("IdleLen")}
}

func (_c *MockPooler_IdleLen_Call) Run(run func()) *MockPooler_IdleLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPooler_IdleLen_Call) Return(_a0 int) *MockPooler_IdleLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPooler_IdleLen_Call) RunAndReturn(run func() int) *MockPooler_IdleLen_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with no fields
func (_m *MockPooler) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPooler_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockPooler_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockPooler_Expecter) Len() *MockPooler_Len_Call {
	return &MockPooler_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockPooler_Len_Call) Run(run func()) *MockPooler_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPooler_Len_Call) Return(_a0 int) *MockPooler_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPooler_Len_Call) RunAndReturn(run func() int) *MockPooler_Len_Call {
	_c.Call.Return(run)
	return _c
}

// NewConn provides a mock function with given fields: _a0
func (_m *MockPooler) NewConn(_a0 context.Context) (*Conn, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewConn")
	}

	var r0 *Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Conn, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Conn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPooler_NewConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConn'
type MockPooler_NewConn_Call struct {
	*mock.Call
}

// NewConn is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockPooler_Expecter) NewConn(_a0 interface{}) *MockPooler_NewConn_Call {
	return &MockPooler_NewConn_Call{Call: _e.mock.On("NewConn", _a0)}
}

func (_c *MockPooler_NewConn_Call) Run(run func(_a0 context.Context)) *MockPooler_NewConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPooler_NewConn_Call) Return(_a0 *Conn, _a1 error) *MockPooler_NewConn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPooler_NewConn_Call) RunAndReturn(run func(context.Context) (*Conn, error)) *MockPooler_NewConn_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *MockPooler) Put(_a0 context.Context, _a1 *Conn) {
	_m.Called(_a0, _a1)
}

// MockPooler_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockPooler_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *Conn
func (_e *MockPooler_Expecter) Put(_a0 interface{}, _a1 interface{}) *MockPooler_Put_Call {
	return &MockPooler_Put_Call{Call: _e.mock.On("Put", _a0, _a1)}
}

func (_c *MockPooler_Put_Call) Run(run func(_a0 context.Context, _a1 *Conn)) *MockPooler_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Conn))
	})
	return _c
}

func (_c *MockPooler_Put_Call) Return() *MockPooler_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPooler_Put_Call) RunAndReturn(run func(context.Context, *Conn)) *MockPooler_Put_Call {
	_c.Run(run)
	return _c
}

// Remove provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockPooler) Remove(_a0 context.Context, _a1 *Conn, _a2 error) {
	_m.Called(_a0, _a1, _a2)
}

// MockPooler_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockPooler_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *Conn
//   - _a2 error
func (_e *MockPooler_Expecter) Remove(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockPooler_Remove_Call {
	return &MockPooler_Remove_Call{Call: _e.mock.On("Remove", _a0, _a1, _a2)}
}

func (_c *MockPooler_Remove_Call) Run(run func(_a0 context.Context, _a1 *Conn, _a2 error)) *MockPooler_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Conn), args[2].(error))
	})
	return _c
}

func (_c *MockPooler_Remove_Call) Return() *MockPooler_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPooler_Remove_Call) RunAndReturn(run func(context.Context, *Conn, error)) *MockPooler_Remove_Call {
	_c.Run(run)
	return _c
}

// Stats provides a mock function with no fields
func (_m *MockPooler) Stats() *Stats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 *Stats
	if rf, ok := ret.Get(0).(func() *Stats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Stats)
		}
	}

	return r0
}

// MockPooler_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockPooler_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
func (_e *MockPooler_Expecter) Stats() *MockPooler_Stats_Call {
	return &MockPooler_Stats_Call{Call: _e.mock.On("Stats")}
}

func (_c *MockPooler_Stats_Call) Run(run func()) *MockPooler_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPooler_Stats_Call) Return(_a0 *Stats) *MockPooler_Stats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPooler_Stats_Call) RunAndReturn(run func() *Stats) *MockPooler_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPooler creates a new instance of MockPooler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPooler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPooler {
	mock := &MockPooler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
