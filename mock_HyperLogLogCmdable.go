// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockHyperLogLogCmdable is an autogenerated mock type for the HyperLogLogCmdable type
type MockHyperLogLogCmdable struct {
	mock.Mock
}

type MockHyperLogLogCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHyperLogLogCmdable) EXPECT() *MockHyperLogLogCmdable_Expecter {
	return &MockHyperLogLogCmdable_Expecter{mock: &_m.Mock}
}

// PFAdd provides a mock function with given fields: ctx, key, els
func (_m *MockHyperLogLogCmdable) PFAdd(ctx context.Context, key string, els ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, els...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PFAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, els...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockHyperLogLogCmdable_PFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFAdd'
type MockHyperLogLogCmdable_PFAdd_Call struct {
	*mock.Call
}

// PFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - els ...interface{}
func (_e *MockHyperLogLogCmdable_Expecter) PFAdd(ctx interface{}, key interface{}, els ...interface{}) *MockHyperLogLogCmdable_PFAdd_Call {
	return &MockHyperLogLogCmdable_PFAdd_Call{Call: _e.mock.On("PFAdd",
		append([]interface{}{ctx, key}, els...)...)}
}

func (_c *MockHyperLogLogCmdable_PFAdd_Call) Run(run func(ctx context.Context, key string, els ...interface{})) *MockHyperLogLogCmdable_PFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHyperLogLogCmdable_PFAdd_Call) Return(_a0 *IntCmd) *MockHyperLogLogCmdable_PFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHyperLogLogCmdable_PFAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockHyperLogLogCmdable_PFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// PFCount provides a mock function with given fields: ctx, keys
func (_m *MockHyperLogLogCmdable) PFCount(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PFCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockHyperLogLogCmdable_PFCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFCount'
type MockHyperLogLogCmdable_PFCount_Call struct {
	*mock.Call
}

// PFCount is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockHyperLogLogCmdable_Expecter) PFCount(ctx interface{}, keys ...interface{}) *MockHyperLogLogCmdable_PFCount_Call {
	return &MockHyperLogLogCmdable_PFCount_Call{Call: _e.mock.On("PFCount",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockHyperLogLogCmdable_PFCount_Call) Run(run func(ctx context.Context, keys ...string)) *MockHyperLogLogCmdable_PFCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockHyperLogLogCmdable_PFCount_Call) Return(_a0 *IntCmd) *MockHyperLogLogCmdable_PFCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHyperLogLogCmdable_PFCount_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockHyperLogLogCmdable_PFCount_Call {
	_c.Call.Return(run)
	return _c
}

// PFMerge provides a mock function with given fields: ctx, dest, keys
func (_m *MockHyperLogLogCmdable) PFMerge(ctx context.Context, dest string, keys ...string) *StatusCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PFMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *StatusCmd); ok {
		r0 = rf(ctx, dest, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockHyperLogLogCmdable_PFMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFMerge'
type MockHyperLogLogCmdable_PFMerge_Call struct {
	*mock.Call
}

// PFMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
//   - keys ...string
func (_e *MockHyperLogLogCmdable_Expecter) PFMerge(ctx interface{}, dest interface{}, keys ...interface{}) *MockHyperLogLogCmdable_PFMerge_Call {
	return &MockHyperLogLogCmdable_PFMerge_Call{Call: _e.mock.On("PFMerge",
		append([]interface{}{ctx, dest}, keys...)...)}
}

func (_c *MockHyperLogLogCmdable_PFMerge_Call) Run(run func(ctx context.Context, dest string, keys ...string)) *MockHyperLogLogCmdable_PFMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHyperLogLogCmdable_PFMerge_Call) Return(_a0 *StatusCmd) *MockHyperLogLogCmdable_PFMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHyperLogLogCmdable_PFMerge_Call) RunAndReturn(run func(context.Context, string, ...string) *StatusCmd) *MockHyperLogLogCmdable_PFMerge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHyperLogLogCmdable creates a new instance of MockHyperLogLogCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHyperLogLogCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHyperLogLogCmdable {
	mock := &MockHyperLogLogCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
