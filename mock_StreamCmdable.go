// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStreamCmdable is an autogenerated mock type for the StreamCmdable type
type MockStreamCmdable struct {
	mock.Mock
}

type MockStreamCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStreamCmdable) EXPECT() *MockStreamCmdable_Expecter {
	return &MockStreamCmdable_Expecter{mock: &_m.Mock}
}

// XAck provides a mock function with given fields: ctx, stream, group, ids
func (_m *MockStreamCmdable) XAck(ctx context.Context, stream string, group string, ids ...string) *IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream, group)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for XAck")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, stream, group, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAck'
type MockStreamCmdable_XAck_Call struct {
	*mock.Call
}

// XAck is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - ids ...string
func (_e *MockStreamCmdable_Expecter) XAck(ctx interface{}, stream interface{}, group interface{}, ids ...interface{}) *MockStreamCmdable_XAck_Call {
	return &MockStreamCmdable_XAck_Call{Call: _e.mock.On("XAck",
		append([]interface{}{ctx, stream, group}, ids...)...)}
}

func (_c *MockStreamCmdable_XAck_Call) Run(run func(ctx context.Context, stream string, group string, ids ...string)) *MockStreamCmdable_XAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockStreamCmdable_XAck_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XAck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XAck_Call) RunAndReturn(run func(context.Context, string, string, ...string) *IntCmd) *MockStreamCmdable_XAck_Call {
	_c.Call.Return(run)
	return _c
}

// XAdd provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XAdd(ctx context.Context, a *XAddArgs) *StringCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAdd")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XAddArgs) *StringCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAdd'
type MockStreamCmdable_XAdd_Call struct {
	*mock.Call
}

// XAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XAddArgs
func (_e *MockStreamCmdable_Expecter) XAdd(ctx interface{}, a interface{}) *MockStreamCmdable_XAdd_Call {
	return &MockStreamCmdable_XAdd_Call{Call: _e.mock.On("XAdd", ctx, a)}
}

func (_c *MockStreamCmdable_XAdd_Call) Run(run func(ctx context.Context, a *XAddArgs)) *MockStreamCmdable_XAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XAddArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XAdd_Call) Return(_a0 *StringCmd) *MockStreamCmdable_XAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XAdd_Call) RunAndReturn(run func(context.Context, *XAddArgs) *StringCmd) *MockStreamCmdable_XAdd_Call {
	_c.Call.Return(run)
	return _c
}

// XAutoClaim provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XAutoClaim(ctx context.Context, a *XAutoClaimArgs) *XAutoClaimCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAutoClaim")
	}

	var r0 *XAutoClaimCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XAutoClaimArgs) *XAutoClaimCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XAutoClaimCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XAutoClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAutoClaim'
type MockStreamCmdable_XAutoClaim_Call struct {
	*mock.Call
}

// XAutoClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XAutoClaimArgs
func (_e *MockStreamCmdable_Expecter) XAutoClaim(ctx interface{}, a interface{}) *MockStreamCmdable_XAutoClaim_Call {
	return &MockStreamCmdable_XAutoClaim_Call{Call: _e.mock.On("XAutoClaim", ctx, a)}
}

func (_c *MockStreamCmdable_XAutoClaim_Call) Run(run func(ctx context.Context, a *XAutoClaimArgs)) *MockStreamCmdable_XAutoClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XAutoClaimArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XAutoClaim_Call) Return(_a0 *XAutoClaimCmd) *MockStreamCmdable_XAutoClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XAutoClaim_Call) RunAndReturn(run func(context.Context, *XAutoClaimArgs) *XAutoClaimCmd) *MockStreamCmdable_XAutoClaim_Call {
	_c.Call.Return(run)
	return _c
}

// XAutoClaimJustID provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XAutoClaimJustID(ctx context.Context, a *XAutoClaimArgs) *XAutoClaimJustIDCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAutoClaimJustID")
	}

	var r0 *XAutoClaimJustIDCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XAutoClaimArgs) *XAutoClaimJustIDCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XAutoClaimJustIDCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XAutoClaimJustID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAutoClaimJustID'
type MockStreamCmdable_XAutoClaimJustID_Call struct {
	*mock.Call
}

// XAutoClaimJustID is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XAutoClaimArgs
func (_e *MockStreamCmdable_Expecter) XAutoClaimJustID(ctx interface{}, a interface{}) *MockStreamCmdable_XAutoClaimJustID_Call {
	return &MockStreamCmdable_XAutoClaimJustID_Call{Call: _e.mock.On("XAutoClaimJustID", ctx, a)}
}

func (_c *MockStreamCmdable_XAutoClaimJustID_Call) Run(run func(ctx context.Context, a *XAutoClaimArgs)) *MockStreamCmdable_XAutoClaimJustID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XAutoClaimArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XAutoClaimJustID_Call) Return(_a0 *XAutoClaimJustIDCmd) *MockStreamCmdable_XAutoClaimJustID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XAutoClaimJustID_Call) RunAndReturn(run func(context.Context, *XAutoClaimArgs) *XAutoClaimJustIDCmd) *MockStreamCmdable_XAutoClaimJustID_Call {
	_c.Call.Return(run)
	return _c
}

// XClaim provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XClaim(ctx context.Context, a *XClaimArgs) *XMessageSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XClaim")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XClaimArgs) *XMessageSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XClaim'
type MockStreamCmdable_XClaim_Call struct {
	*mock.Call
}

// XClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XClaimArgs
func (_e *MockStreamCmdable_Expecter) XClaim(ctx interface{}, a interface{}) *MockStreamCmdable_XClaim_Call {
	return &MockStreamCmdable_XClaim_Call{Call: _e.mock.On("XClaim", ctx, a)}
}

func (_c *MockStreamCmdable_XClaim_Call) Run(run func(ctx context.Context, a *XClaimArgs)) *MockStreamCmdable_XClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XClaimArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XClaim_Call) Return(_a0 *XMessageSliceCmd) *MockStreamCmdable_XClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XClaim_Call) RunAndReturn(run func(context.Context, *XClaimArgs) *XMessageSliceCmd) *MockStreamCmdable_XClaim_Call {
	_c.Call.Return(run)
	return _c
}

// XClaimJustID provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XClaimJustID(ctx context.Context, a *XClaimArgs) *StringSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XClaimJustID")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XClaimArgs) *StringSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XClaimJustID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XClaimJustID'
type MockStreamCmdable_XClaimJustID_Call struct {
	*mock.Call
}

// XClaimJustID is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XClaimArgs
func (_e *MockStreamCmdable_Expecter) XClaimJustID(ctx interface{}, a interface{}) *MockStreamCmdable_XClaimJustID_Call {
	return &MockStreamCmdable_XClaimJustID_Call{Call: _e.mock.On("XClaimJustID", ctx, a)}
}

func (_c *MockStreamCmdable_XClaimJustID_Call) Run(run func(ctx context.Context, a *XClaimArgs)) *MockStreamCmdable_XClaimJustID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XClaimArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XClaimJustID_Call) Return(_a0 *StringSliceCmd) *MockStreamCmdable_XClaimJustID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XClaimJustID_Call) RunAndReturn(run func(context.Context, *XClaimArgs) *StringSliceCmd) *MockStreamCmdable_XClaimJustID_Call {
	_c.Call.Return(run)
	return _c
}

// XDel provides a mock function with given fields: ctx, stream, ids
func (_m *MockStreamCmdable) XDel(ctx context.Context, stream string, ids ...string) *IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for XDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, stream, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XDel'
type MockStreamCmdable_XDel_Call struct {
	*mock.Call
}

// XDel is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - ids ...string
func (_e *MockStreamCmdable_Expecter) XDel(ctx interface{}, stream interface{}, ids ...interface{}) *MockStreamCmdable_XDel_Call {
	return &MockStreamCmdable_XDel_Call{Call: _e.mock.On("XDel",
		append([]interface{}{ctx, stream}, ids...)...)}
}

func (_c *MockStreamCmdable_XDel_Call) Run(run func(ctx context.Context, stream string, ids ...string)) *MockStreamCmdable_XDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockStreamCmdable_XDel_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XDel_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockStreamCmdable_XDel_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreate provides a mock function with given fields: ctx, stream, group, start
func (_m *MockStreamCmdable) XGroupCreate(ctx context.Context, stream string, group string, start string) *StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	if len(ret) == 0 {
		panic("no return value specified for XGroupCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XGroupCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreate'
type MockStreamCmdable_XGroupCreate_Call struct {
	*mock.Call
}

// XGroupCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *MockStreamCmdable_Expecter) XGroupCreate(ctx interface{}, stream interface{}, group interface{}, start interface{}) *MockStreamCmdable_XGroupCreate_Call {
	return &MockStreamCmdable_XGroupCreate_Call{Call: _e.mock.On("XGroupCreate", ctx, stream, group, start)}
}

func (_c *MockStreamCmdable_XGroupCreate_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *MockStreamCmdable_XGroupCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XGroupCreate_Call) Return(_a0 *StatusCmd) *MockStreamCmdable_XGroupCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XGroupCreate_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockStreamCmdable_XGroupCreate_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreateConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *MockStreamCmdable) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	if len(ret) == 0 {
		panic("no return value specified for XGroupCreateConsumer")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XGroupCreateConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateConsumer'
type MockStreamCmdable_XGroupCreateConsumer_Call struct {
	*mock.Call
}

// XGroupCreateConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - consumer string
func (_e *MockStreamCmdable_Expecter) XGroupCreateConsumer(ctx interface{}, stream interface{}, group interface{}, consumer interface{}) *MockStreamCmdable_XGroupCreateConsumer_Call {
	return &MockStreamCmdable_XGroupCreateConsumer_Call{Call: _e.mock.On("XGroupCreateConsumer", ctx, stream, group, consumer)}
}

func (_c *MockStreamCmdable_XGroupCreateConsumer_Call) Run(run func(ctx context.Context, stream string, group string, consumer string)) *MockStreamCmdable_XGroupCreateConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XGroupCreateConsumer_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XGroupCreateConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XGroupCreateConsumer_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockStreamCmdable_XGroupCreateConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreateMkStream provides a mock function with given fields: ctx, stream, group, start
func (_m *MockStreamCmdable) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	if len(ret) == 0 {
		panic("no return value specified for XGroupCreateMkStream")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XGroupCreateMkStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateMkStream'
type MockStreamCmdable_XGroupCreateMkStream_Call struct {
	*mock.Call
}

// XGroupCreateMkStream is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *MockStreamCmdable_Expecter) XGroupCreateMkStream(ctx interface{}, stream interface{}, group interface{}, start interface{}) *MockStreamCmdable_XGroupCreateMkStream_Call {
	return &MockStreamCmdable_XGroupCreateMkStream_Call{Call: _e.mock.On("XGroupCreateMkStream", ctx, stream, group, start)}
}

func (_c *MockStreamCmdable_XGroupCreateMkStream_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *MockStreamCmdable_XGroupCreateMkStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XGroupCreateMkStream_Call) Return(_a0 *StatusCmd) *MockStreamCmdable_XGroupCreateMkStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XGroupCreateMkStream_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockStreamCmdable_XGroupCreateMkStream_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupDelConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *MockStreamCmdable) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	if len(ret) == 0 {
		panic("no return value specified for XGroupDelConsumer")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XGroupDelConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupDelConsumer'
type MockStreamCmdable_XGroupDelConsumer_Call struct {
	*mock.Call
}

// XGroupDelConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - consumer string
func (_e *MockStreamCmdable_Expecter) XGroupDelConsumer(ctx interface{}, stream interface{}, group interface{}, consumer interface{}) *MockStreamCmdable_XGroupDelConsumer_Call {
	return &MockStreamCmdable_XGroupDelConsumer_Call{Call: _e.mock.On("XGroupDelConsumer", ctx, stream, group, consumer)}
}

func (_c *MockStreamCmdable_XGroupDelConsumer_Call) Run(run func(ctx context.Context, stream string, group string, consumer string)) *MockStreamCmdable_XGroupDelConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XGroupDelConsumer_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XGroupDelConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XGroupDelConsumer_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockStreamCmdable_XGroupDelConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupDestroy provides a mock function with given fields: ctx, stream, group
func (_m *MockStreamCmdable) XGroupDestroy(ctx context.Context, stream string, group string) *IntCmd {
	ret := _m.Called(ctx, stream, group)

	if len(ret) == 0 {
		panic("no return value specified for XGroupDestroy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XGroupDestroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupDestroy'
type MockStreamCmdable_XGroupDestroy_Call struct {
	*mock.Call
}

// XGroupDestroy is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
func (_e *MockStreamCmdable_Expecter) XGroupDestroy(ctx interface{}, stream interface{}, group interface{}) *MockStreamCmdable_XGroupDestroy_Call {
	return &MockStreamCmdable_XGroupDestroy_Call{Call: _e.mock.On("XGroupDestroy", ctx, stream, group)}
}

func (_c *MockStreamCmdable_XGroupDestroy_Call) Run(run func(ctx context.Context, stream string, group string)) *MockStreamCmdable_XGroupDestroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XGroupDestroy_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XGroupDestroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XGroupDestroy_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockStreamCmdable_XGroupDestroy_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupSetID provides a mock function with given fields: ctx, stream, group, start
func (_m *MockStreamCmdable) XGroupSetID(ctx context.Context, stream string, group string, start string) *StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	if len(ret) == 0 {
		panic("no return value specified for XGroupSetID")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XGroupSetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupSetID'
type MockStreamCmdable_XGroupSetID_Call struct {
	*mock.Call
}

// XGroupSetID is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *MockStreamCmdable_Expecter) XGroupSetID(ctx interface{}, stream interface{}, group interface{}, start interface{}) *MockStreamCmdable_XGroupSetID_Call {
	return &MockStreamCmdable_XGroupSetID_Call{Call: _e.mock.On("XGroupSetID", ctx, stream, group, start)}
}

func (_c *MockStreamCmdable_XGroupSetID_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *MockStreamCmdable_XGroupSetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XGroupSetID_Call) Return(_a0 *StatusCmd) *MockStreamCmdable_XGroupSetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XGroupSetID_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockStreamCmdable_XGroupSetID_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoConsumers provides a mock function with given fields: ctx, key, group
func (_m *MockStreamCmdable) XInfoConsumers(ctx context.Context, key string, group string) *XInfoConsumersCmd {
	ret := _m.Called(ctx, key, group)

	if len(ret) == 0 {
		panic("no return value specified for XInfoConsumers")
	}

	var r0 *XInfoConsumersCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *XInfoConsumersCmd); ok {
		r0 = rf(ctx, key, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoConsumersCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XInfoConsumers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoConsumers'
type MockStreamCmdable_XInfoConsumers_Call struct {
	*mock.Call
}

// XInfoConsumers is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - group string
func (_e *MockStreamCmdable_Expecter) XInfoConsumers(ctx interface{}, key interface{}, group interface{}) *MockStreamCmdable_XInfoConsumers_Call {
	return &MockStreamCmdable_XInfoConsumers_Call{Call: _e.mock.On("XInfoConsumers", ctx, key, group)}
}

func (_c *MockStreamCmdable_XInfoConsumers_Call) Run(run func(ctx context.Context, key string, group string)) *MockStreamCmdable_XInfoConsumers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XInfoConsumers_Call) Return(_a0 *XInfoConsumersCmd) *MockStreamCmdable_XInfoConsumers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XInfoConsumers_Call) RunAndReturn(run func(context.Context, string, string) *XInfoConsumersCmd) *MockStreamCmdable_XInfoConsumers_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoGroups provides a mock function with given fields: ctx, key
func (_m *MockStreamCmdable) XInfoGroups(ctx context.Context, key string) *XInfoGroupsCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for XInfoGroups")
	}

	var r0 *XInfoGroupsCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *XInfoGroupsCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoGroupsCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XInfoGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoGroups'
type MockStreamCmdable_XInfoGroups_Call struct {
	*mock.Call
}

// XInfoGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStreamCmdable_Expecter) XInfoGroups(ctx interface{}, key interface{}) *MockStreamCmdable_XInfoGroups_Call {
	return &MockStreamCmdable_XInfoGroups_Call{Call: _e.mock.On("XInfoGroups", ctx, key)}
}

func (_c *MockStreamCmdable_XInfoGroups_Call) Run(run func(ctx context.Context, key string)) *MockStreamCmdable_XInfoGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XInfoGroups_Call) Return(_a0 *XInfoGroupsCmd) *MockStreamCmdable_XInfoGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XInfoGroups_Call) RunAndReturn(run func(context.Context, string) *XInfoGroupsCmd) *MockStreamCmdable_XInfoGroups_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoStream provides a mock function with given fields: ctx, key
func (_m *MockStreamCmdable) XInfoStream(ctx context.Context, key string) *XInfoStreamCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for XInfoStream")
	}

	var r0 *XInfoStreamCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *XInfoStreamCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoStreamCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XInfoStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoStream'
type MockStreamCmdable_XInfoStream_Call struct {
	*mock.Call
}

// XInfoStream is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStreamCmdable_Expecter) XInfoStream(ctx interface{}, key interface{}) *MockStreamCmdable_XInfoStream_Call {
	return &MockStreamCmdable_XInfoStream_Call{Call: _e.mock.On("XInfoStream", ctx, key)}
}

func (_c *MockStreamCmdable_XInfoStream_Call) Run(run func(ctx context.Context, key string)) *MockStreamCmdable_XInfoStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XInfoStream_Call) Return(_a0 *XInfoStreamCmd) *MockStreamCmdable_XInfoStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XInfoStream_Call) RunAndReturn(run func(context.Context, string) *XInfoStreamCmd) *MockStreamCmdable_XInfoStream_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoStreamFull provides a mock function with given fields: ctx, key, count
func (_m *MockStreamCmdable) XInfoStreamFull(ctx context.Context, key string, count int) *XInfoStreamFullCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for XInfoStreamFull")
	}

	var r0 *XInfoStreamFullCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *XInfoStreamFullCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoStreamFullCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XInfoStreamFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoStreamFull'
type MockStreamCmdable_XInfoStreamFull_Call struct {
	*mock.Call
}

// XInfoStreamFull is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockStreamCmdable_Expecter) XInfoStreamFull(ctx interface{}, key interface{}, count interface{}) *MockStreamCmdable_XInfoStreamFull_Call {
	return &MockStreamCmdable_XInfoStreamFull_Call{Call: _e.mock.On("XInfoStreamFull", ctx, key, count)}
}

func (_c *MockStreamCmdable_XInfoStreamFull_Call) Run(run func(ctx context.Context, key string, count int)) *MockStreamCmdable_XInfoStreamFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockStreamCmdable_XInfoStreamFull_Call) Return(_a0 *XInfoStreamFullCmd) *MockStreamCmdable_XInfoStreamFull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XInfoStreamFull_Call) RunAndReturn(run func(context.Context, string, int) *XInfoStreamFullCmd) *MockStreamCmdable_XInfoStreamFull_Call {
	_c.Call.Return(run)
	return _c
}

// XLen provides a mock function with given fields: ctx, stream
func (_m *MockStreamCmdable) XLen(ctx context.Context, stream string) *IntCmd {
	ret := _m.Called(ctx, stream)

	if len(ret) == 0 {
		panic("no return value specified for XLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XLen'
type MockStreamCmdable_XLen_Call struct {
	*mock.Call
}

// XLen is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
func (_e *MockStreamCmdable_Expecter) XLen(ctx interface{}, stream interface{}) *MockStreamCmdable_XLen_Call {
	return &MockStreamCmdable_XLen_Call{Call: _e.mock.On("XLen", ctx, stream)}
}

func (_c *MockStreamCmdable_XLen_Call) Run(run func(ctx context.Context, stream string)) *MockStreamCmdable_XLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XLen_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XLen_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockStreamCmdable_XLen_Call {
	_c.Call.Return(run)
	return _c
}

// XPending provides a mock function with given fields: ctx, stream, group
func (_m *MockStreamCmdable) XPending(ctx context.Context, stream string, group string) *XPendingCmd {
	ret := _m.Called(ctx, stream, group)

	if len(ret) == 0 {
		panic("no return value specified for XPending")
	}

	var r0 *XPendingCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *XPendingCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XPendingCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XPending'
type MockStreamCmdable_XPending_Call struct {
	*mock.Call
}

// XPending is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
func (_e *MockStreamCmdable_Expecter) XPending(ctx interface{}, stream interface{}, group interface{}) *MockStreamCmdable_XPending_Call {
	return &MockStreamCmdable_XPending_Call{Call: _e.mock.On("XPending", ctx, stream, group)}
}

func (_c *MockStreamCmdable_XPending_Call) Run(run func(ctx context.Context, stream string, group string)) *MockStreamCmdable_XPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XPending_Call) Return(_a0 *XPendingCmd) *MockStreamCmdable_XPending_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XPending_Call) RunAndReturn(run func(context.Context, string, string) *XPendingCmd) *MockStreamCmdable_XPending_Call {
	_c.Call.Return(run)
	return _c
}

// XPendingExt provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XPendingExt(ctx context.Context, a *XPendingExtArgs) *XPendingExtCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XPendingExt")
	}

	var r0 *XPendingExtCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XPendingExtArgs) *XPendingExtCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XPendingExtCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XPendingExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XPendingExt'
type MockStreamCmdable_XPendingExt_Call struct {
	*mock.Call
}

// XPendingExt is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XPendingExtArgs
func (_e *MockStreamCmdable_Expecter) XPendingExt(ctx interface{}, a interface{}) *MockStreamCmdable_XPendingExt_Call {
	return &MockStreamCmdable_XPendingExt_Call{Call: _e.mock.On("XPendingExt", ctx, a)}
}

func (_c *MockStreamCmdable_XPendingExt_Call) Run(run func(ctx context.Context, a *XPendingExtArgs)) *MockStreamCmdable_XPendingExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XPendingExtArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XPendingExt_Call) Return(_a0 *XPendingExtCmd) *MockStreamCmdable_XPendingExt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XPendingExt_Call) RunAndReturn(run func(context.Context, *XPendingExtArgs) *XPendingExtCmd) *MockStreamCmdable_XPendingExt_Call {
	_c.Call.Return(run)
	return _c
}

// XRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *MockStreamCmdable) XRange(ctx context.Context, stream string, start string, stop string) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for XRange")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRange'
type MockStreamCmdable_XRange_Call struct {
	*mock.Call
}

// XRange is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
func (_e *MockStreamCmdable_Expecter) XRange(ctx interface{}, stream interface{}, start interface{}, stop interface{}) *MockStreamCmdable_XRange_Call {
	return &MockStreamCmdable_XRange_Call{Call: _e.mock.On("XRange", ctx, stream, start, stop)}
}

func (_c *MockStreamCmdable_XRange_Call) Run(run func(ctx context.Context, stream string, start string, stop string)) *MockStreamCmdable_XRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XRange_Call) Return(_a0 *XMessageSliceCmd) *MockStreamCmdable_XRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XRange_Call) RunAndReturn(run func(context.Context, string, string, string) *XMessageSliceCmd) *MockStreamCmdable_XRange_Call {
	_c.Call.Return(run)
	return _c
}

// XRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *MockStreamCmdable) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	if len(ret) == 0 {
		panic("no return value specified for XRangeN")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XRangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRangeN'
type MockStreamCmdable_XRangeN_Call struct {
	*mock.Call
}

// XRangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
//   - count int64
func (_e *MockStreamCmdable_Expecter) XRangeN(ctx interface{}, stream interface{}, start interface{}, stop interface{}, count interface{}) *MockStreamCmdable_XRangeN_Call {
	return &MockStreamCmdable_XRangeN_Call{Call: _e.mock.On("XRangeN", ctx, stream, start, stop, count)}
}

func (_c *MockStreamCmdable_XRangeN_Call) Run(run func(ctx context.Context, stream string, start string, stop string, count int64)) *MockStreamCmdable_XRangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockStreamCmdable_XRangeN_Call) Return(_a0 *XMessageSliceCmd) *MockStreamCmdable_XRangeN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XRangeN_Call) RunAndReturn(run func(context.Context, string, string, string, int64) *XMessageSliceCmd) *MockStreamCmdable_XRangeN_Call {
	_c.Call.Return(run)
	return _c
}

// XRead provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XRead(ctx context.Context, a *XReadArgs) *XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XRead")
	}

	var r0 *XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XReadArgs) *XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XStreamSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRead'
type MockStreamCmdable_XRead_Call struct {
	*mock.Call
}

// XRead is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XReadArgs
func (_e *MockStreamCmdable_Expecter) XRead(ctx interface{}, a interface{}) *MockStreamCmdable_XRead_Call {
	return &MockStreamCmdable_XRead_Call{Call: _e.mock.On("XRead", ctx, a)}
}

func (_c *MockStreamCmdable_XRead_Call) Run(run func(ctx context.Context, a *XReadArgs)) *MockStreamCmdable_XRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XReadArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XRead_Call) Return(_a0 *XStreamSliceCmd) *MockStreamCmdable_XRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XRead_Call) RunAndReturn(run func(context.Context, *XReadArgs) *XStreamSliceCmd) *MockStreamCmdable_XRead_Call {
	_c.Call.Return(run)
	return _c
}

// XReadGroup provides a mock function with given fields: ctx, a
func (_m *MockStreamCmdable) XReadGroup(ctx context.Context, a *XReadGroupArgs) *XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XReadGroup")
	}

	var r0 *XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XReadGroupArgs) *XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XStreamSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XReadGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadGroup'
type MockStreamCmdable_XReadGroup_Call struct {
	*mock.Call
}

// XReadGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XReadGroupArgs
func (_e *MockStreamCmdable_Expecter) XReadGroup(ctx interface{}, a interface{}) *MockStreamCmdable_XReadGroup_Call {
	return &MockStreamCmdable_XReadGroup_Call{Call: _e.mock.On("XReadGroup", ctx, a)}
}

func (_c *MockStreamCmdable_XReadGroup_Call) Run(run func(ctx context.Context, a *XReadGroupArgs)) *MockStreamCmdable_XReadGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XReadGroupArgs))
	})
	return _c
}

func (_c *MockStreamCmdable_XReadGroup_Call) Return(_a0 *XStreamSliceCmd) *MockStreamCmdable_XReadGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XReadGroup_Call) RunAndReturn(run func(context.Context, *XReadGroupArgs) *XStreamSliceCmd) *MockStreamCmdable_XReadGroup_Call {
	_c.Call.Return(run)
	return _c
}

// XReadStreams provides a mock function with given fields: ctx, streams
func (_m *MockStreamCmdable) XReadStreams(ctx context.Context, streams ...string) *XStreamSliceCmd {
	_va := make([]interface{}, len(streams))
	for _i := range streams {
		_va[_i] = streams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for XReadStreams")
	}

	var r0 *XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *XStreamSliceCmd); ok {
		r0 = rf(ctx, streams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XStreamSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XReadStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadStreams'
type MockStreamCmdable_XReadStreams_Call struct {
	*mock.Call
}

// XReadStreams is a helper method to define mock.On call
//   - ctx context.Context
//   - streams ...string
func (_e *MockStreamCmdable_Expecter) XReadStreams(ctx interface{}, streams ...interface{}) *MockStreamCmdable_XReadStreams_Call {
	return &MockStreamCmdable_XReadStreams_Call{Call: _e.mock.On("XReadStreams",
		append([]interface{}{ctx}, streams...)...)}
}

func (_c *MockStreamCmdable_XReadStreams_Call) Run(run func(ctx context.Context, streams ...string)) *MockStreamCmdable_XReadStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockStreamCmdable_XReadStreams_Call) Return(_a0 *XStreamSliceCmd) *MockStreamCmdable_XReadStreams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XReadStreams_Call) RunAndReturn(run func(context.Context, ...string) *XStreamSliceCmd) *MockStreamCmdable_XReadStreams_Call {
	_c.Call.Return(run)
	return _c
}

// XRevRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *MockStreamCmdable) XRevRange(ctx context.Context, stream string, start string, stop string) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for XRevRange")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRevRange'
type MockStreamCmdable_XRevRange_Call struct {
	*mock.Call
}

// XRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
func (_e *MockStreamCmdable_Expecter) XRevRange(ctx interface{}, stream interface{}, start interface{}, stop interface{}) *MockStreamCmdable_XRevRange_Call {
	return &MockStreamCmdable_XRevRange_Call{Call: _e.mock.On("XRevRange", ctx, stream, start, stop)}
}

func (_c *MockStreamCmdable_XRevRange_Call) Run(run func(ctx context.Context, stream string, start string, stop string)) *MockStreamCmdable_XRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XRevRange_Call) Return(_a0 *XMessageSliceCmd) *MockStreamCmdable_XRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XRevRange_Call) RunAndReturn(run func(context.Context, string, string, string) *XMessageSliceCmd) *MockStreamCmdable_XRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// XRevRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *MockStreamCmdable) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	if len(ret) == 0 {
		panic("no return value specified for XRevRangeN")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XRevRangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRevRangeN'
type MockStreamCmdable_XRevRangeN_Call struct {
	*mock.Call
}

// XRevRangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
//   - count int64
func (_e *MockStreamCmdable_Expecter) XRevRangeN(ctx interface{}, stream interface{}, start interface{}, stop interface{}, count interface{}) *MockStreamCmdable_XRevRangeN_Call {
	return &MockStreamCmdable_XRevRangeN_Call{Call: _e.mock.On("XRevRangeN", ctx, stream, start, stop, count)}
}

func (_c *MockStreamCmdable_XRevRangeN_Call) Run(run func(ctx context.Context, stream string, start string, stop string, count int64)) *MockStreamCmdable_XRevRangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockStreamCmdable_XRevRangeN_Call) Return(_a0 *XMessageSliceCmd) *MockStreamCmdable_XRevRangeN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XRevRangeN_Call) RunAndReturn(run func(context.Context, string, string, string, int64) *XMessageSliceCmd) *MockStreamCmdable_XRevRangeN_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMaxLen provides a mock function with given fields: ctx, key, maxLen
func (_m *MockStreamCmdable) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *IntCmd {
	ret := _m.Called(ctx, key, maxLen)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMaxLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, maxLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XTrimMaxLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMaxLen'
type MockStreamCmdable_XTrimMaxLen_Call struct {
	*mock.Call
}

// XTrimMaxLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - maxLen int64
func (_e *MockStreamCmdable_Expecter) XTrimMaxLen(ctx interface{}, key interface{}, maxLen interface{}) *MockStreamCmdable_XTrimMaxLen_Call {
	return &MockStreamCmdable_XTrimMaxLen_Call{Call: _e.mock.On("XTrimMaxLen", ctx, key, maxLen)}
}

func (_c *MockStreamCmdable_XTrimMaxLen_Call) Run(run func(ctx context.Context, key string, maxLen int64)) *MockStreamCmdable_XTrimMaxLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockStreamCmdable_XTrimMaxLen_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XTrimMaxLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XTrimMaxLen_Call) RunAndReturn(run func(context.Context, string, int64) *IntCmd) *MockStreamCmdable_XTrimMaxLen_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMaxLenApprox provides a mock function with given fields: ctx, key, maxLen, limit
func (_m *MockStreamCmdable) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *IntCmd {
	ret := _m.Called(ctx, key, maxLen, limit)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMaxLenApprox")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *IntCmd); ok {
		r0 = rf(ctx, key, maxLen, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XTrimMaxLenApprox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMaxLenApprox'
type MockStreamCmdable_XTrimMaxLenApprox_Call struct {
	*mock.Call
}

// XTrimMaxLenApprox is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - maxLen int64
//   - limit int64
func (_e *MockStreamCmdable_Expecter) XTrimMaxLenApprox(ctx interface{}, key interface{}, maxLen interface{}, limit interface{}) *MockStreamCmdable_XTrimMaxLenApprox_Call {
	return &MockStreamCmdable_XTrimMaxLenApprox_Call{Call: _e.mock.On("XTrimMaxLenApprox", ctx, key, maxLen, limit)}
}

func (_c *MockStreamCmdable_XTrimMaxLenApprox_Call) Run(run func(ctx context.Context, key string, maxLen int64, limit int64)) *MockStreamCmdable_XTrimMaxLenApprox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockStreamCmdable_XTrimMaxLenApprox_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XTrimMaxLenApprox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XTrimMaxLenApprox_Call) RunAndReturn(run func(context.Context, string, int64, int64) *IntCmd) *MockStreamCmdable_XTrimMaxLenApprox_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMinID provides a mock function with given fields: ctx, key, minID
func (_m *MockStreamCmdable) XTrimMinID(ctx context.Context, key string, minID string) *IntCmd {
	ret := _m.Called(ctx, key, minID)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMinID")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, minID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XTrimMinID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMinID'
type MockStreamCmdable_XTrimMinID_Call struct {
	*mock.Call
}

// XTrimMinID is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - minID string
func (_e *MockStreamCmdable_Expecter) XTrimMinID(ctx interface{}, key interface{}, minID interface{}) *MockStreamCmdable_XTrimMinID_Call {
	return &MockStreamCmdable_XTrimMinID_Call{Call: _e.mock.On("XTrimMinID", ctx, key, minID)}
}

func (_c *MockStreamCmdable_XTrimMinID_Call) Run(run func(ctx context.Context, key string, minID string)) *MockStreamCmdable_XTrimMinID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStreamCmdable_XTrimMinID_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XTrimMinID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XTrimMinID_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockStreamCmdable_XTrimMinID_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMinIDApprox provides a mock function with given fields: ctx, key, minID, limit
func (_m *MockStreamCmdable) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *IntCmd {
	ret := _m.Called(ctx, key, minID, limit)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMinIDApprox")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, minID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockStreamCmdable_XTrimMinIDApprox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMinIDApprox'
type MockStreamCmdable_XTrimMinIDApprox_Call struct {
	*mock.Call
}

// XTrimMinIDApprox is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - minID string
//   - limit int64
func (_e *MockStreamCmdable_Expecter) XTrimMinIDApprox(ctx interface{}, key interface{}, minID interface{}, limit interface{}) *MockStreamCmdable_XTrimMinIDApprox_Call {
	return &MockStreamCmdable_XTrimMinIDApprox_Call{Call: _e.mock.On("XTrimMinIDApprox", ctx, key, minID, limit)}
}

func (_c *MockStreamCmdable_XTrimMinIDApprox_Call) Run(run func(ctx context.Context, key string, minID string, limit int64)) *MockStreamCmdable_XTrimMinIDApprox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockStreamCmdable_XTrimMinIDApprox_Call) Return(_a0 *IntCmd) *MockStreamCmdable_XTrimMinIDApprox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamCmdable_XTrimMinIDApprox_Call) RunAndReturn(run func(context.Context, string, string, int64) *IntCmd) *MockStreamCmdable_XTrimMinIDApprox_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStreamCmdable creates a new instance of MockStreamCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamCmdable {
	mock := &MockStreamCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
