// Code generated by mockery. DO NOT EDIT.

package redis

import (
	mock "github.com/stretchr/testify/mock"
	proto "github.com/viebiz/redis/pkg/proto"

	time "time"
)

// MockCmder is an autogenerated mock type for the Cmder type
type MockCmder struct {
	mock.Mock
}

type MockCmder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCmder) EXPECT() *MockCmder_Expecter {
	return &MockCmder_Expecter{mock: &_m.Mock}
}

// Args provides a mock function with no fields
func (_m *MockCmder) Args() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Args")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockCmder_Args_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Args'
type MockCmder_Args_Call struct {
	*mock.Call
}

// Args is a helper method to define mock.On call
func (_e *MockCmder_Expecter) Args() *MockCmder_Args_Call {
	return &MockCmder_Args_Call{Call: _e.mock.On("Args")}
}

func (_c *MockCmder_Args_Call) Run(run func()) *MockCmder_Args_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_Args_Call) Return(_a0 []interface{}) *MockCmder_Args_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_Args_Call) RunAndReturn(run func() []interface{}) *MockCmder_Args_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *MockCmder) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmder_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockCmder_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockCmder_Expecter) Err() *MockCmder_Err_Call {
	return &MockCmder_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockCmder_Err_Call) Run(run func()) *MockCmder_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_Err_Call) Return(_a0 error) *MockCmder_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_Err_Call) RunAndReturn(run func() error) *MockCmder_Err_Call {
	_c.Call.Return(run)
	return _c
}

// FullName provides a mock function with no fields
func (_m *MockCmder) FullName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FullName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCmder_FullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullName'
type MockCmder_FullName_Call struct {
	*mock.Call
}

// FullName is a helper method to define mock.On call
func (_e *MockCmder_Expecter) FullName() *MockCmder_FullName_Call {
	return &MockCmder_FullName_Call{Call: _e.mock.On("FullName")}
}

func (_c *MockCmder_FullName_Call) Run(run func()) *MockCmder_FullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_FullName_Call) Return(_a0 string) *MockCmder_FullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_FullName_Call) RunAndReturn(run func() string) *MockCmder_FullName_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockCmder) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCmder_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCmder_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCmder_Expecter) Name() *MockCmder_Name_Call {
	return &MockCmder_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCmder_Name_Call) Run(run func()) *MockCmder_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_Name_Call) Return(_a0 string) *MockCmder_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_Name_Call) RunAndReturn(run func() string) *MockCmder_Name_Call {
	_c.Call.Return(run)
	return _c
}

// SetErr provides a mock function with given fields: _a0
func (_m *MockCmder) SetErr(_a0 error) {
	_m.Called(_a0)
}

// MockCmder_SetErr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErr'
type MockCmder_SetErr_Call struct {
	*mock.Call
}

// SetErr is a helper method to define mock.On call
//   - _a0 error
func (_e *MockCmder_Expecter) SetErr(_a0 interface{}) *MockCmder_SetErr_Call {
	return &MockCmder_SetErr_Call{Call: _e.mock.On("SetErr", _a0)}
}

func (_c *MockCmder_SetErr_Call) Run(run func(_a0 error)) *MockCmder_SetErr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockCmder_SetErr_Call) Return() *MockCmder_SetErr_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCmder_SetErr_Call) RunAndReturn(run func(error)) *MockCmder_SetErr_Call {
	_c.Run(run)
	return _c
}

// SetFirstKeyPos provides a mock function with given fields: _a0
func (_m *MockCmder) SetFirstKeyPos(_a0 int8) {
	_m.Called(_a0)
}

// MockCmder_SetFirstKeyPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFirstKeyPos'
type MockCmder_SetFirstKeyPos_Call struct {
	*mock.Call
}

// SetFirstKeyPos is a helper method to define mock.On call
//   - _a0 int8
func (_e *MockCmder_Expecter) SetFirstKeyPos(_a0 interface{}) *MockCmder_SetFirstKeyPos_Call {
	return &MockCmder_SetFirstKeyPos_Call{Call: _e.mock.On("SetFirstKeyPos", _a0)}
}

func (_c *MockCmder_SetFirstKeyPos_Call) Run(run func(_a0 int8)) *MockCmder_SetFirstKeyPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int8))
	})
	return _c
}

func (_c *MockCmder_SetFirstKeyPos_Call) Return() *MockCmder_SetFirstKeyPos_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCmder_SetFirstKeyPos_Call) RunAndReturn(run func(int8)) *MockCmder_SetFirstKeyPos_Call {
	_c.Run(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockCmder) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCmder_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockCmder_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockCmder_Expecter) String() *MockCmder_String_Call {
	return &MockCmder_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockCmder_String_Call) Run(run func()) *MockCmder_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_String_Call) Return(_a0 string) *MockCmder_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_String_Call) RunAndReturn(run func() string) *MockCmder_String_Call {
	_c.Call.Return(run)
	return _c
}

// firstKeyPos provides a mock function with no fields
func (_m *MockCmder) firstKeyPos() int8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for firstKeyPos")
	}

	var r0 int8
	if rf, ok := ret.Get(0).(func() int8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int8)
	}

	return r0
}

// MockCmder_firstKeyPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'firstKeyPos'
type MockCmder_firstKeyPos_Call struct {
	*mock.Call
}

// firstKeyPos is a helper method to define mock.On call
func (_e *MockCmder_Expecter) firstKeyPos() *MockCmder_firstKeyPos_Call {
	return &MockCmder_firstKeyPos_Call{Call: _e.mock.On("firstKeyPos")}
}

func (_c *MockCmder_firstKeyPos_Call) Run(run func()) *MockCmder_firstKeyPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_firstKeyPos_Call) Return(_a0 int8) *MockCmder_firstKeyPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_firstKeyPos_Call) RunAndReturn(run func() int8) *MockCmder_firstKeyPos_Call {
	_c.Call.Return(run)
	return _c
}

// readRawReply provides a mock function with given fields: rd
func (_m *MockCmder) readRawReply(rd *proto.Reader) error {
	ret := _m.Called(rd)

	if len(ret) == 0 {
		panic("no return value specified for readRawReply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Reader) error); ok {
		r0 = rf(rd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmder_readRawReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readRawReply'
type MockCmder_readRawReply_Call struct {
	*mock.Call
}

// readRawReply is a helper method to define mock.On call
//   - rd *proto.Reader
func (_e *MockCmder_Expecter) readRawReply(rd interface{}) *MockCmder_readRawReply_Call {
	return &MockCmder_readRawReply_Call{Call: _e.mock.On("readRawReply", rd)}
}

func (_c *MockCmder_readRawReply_Call) Run(run func(rd *proto.Reader)) *MockCmder_readRawReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.Reader))
	})
	return _c
}

func (_c *MockCmder_readRawReply_Call) Return(_a0 error) *MockCmder_readRawReply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_readRawReply_Call) RunAndReturn(run func(*proto.Reader) error) *MockCmder_readRawReply_Call {
	_c.Call.Return(run)
	return _c
}

// readReply provides a mock function with given fields: rd
func (_m *MockCmder) readReply(rd *proto.Reader) error {
	ret := _m.Called(rd)

	if len(ret) == 0 {
		panic("no return value specified for readReply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Reader) error); ok {
		r0 = rf(rd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmder_readReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readReply'
type MockCmder_readReply_Call struct {
	*mock.Call
}

// readReply is a helper method to define mock.On call
//   - rd *proto.Reader
func (_e *MockCmder_Expecter) readReply(rd interface{}) *MockCmder_readReply_Call {
	return &MockCmder_readReply_Call{Call: _e.mock.On("readReply", rd)}
}

func (_c *MockCmder_readReply_Call) Run(run func(rd *proto.Reader)) *MockCmder_readReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.Reader))
	})
	return _c
}

func (_c *MockCmder_readReply_Call) Return(_a0 error) *MockCmder_readReply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_readReply_Call) RunAndReturn(run func(*proto.Reader) error) *MockCmder_readReply_Call {
	_c.Call.Return(run)
	return _c
}

// readTimeout provides a mock function with no fields
func (_m *MockCmder) readTimeout() *time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for readTimeout")
	}

	var r0 *time.Duration
	if rf, ok := ret.Get(0).(func() *time.Duration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Duration)
		}
	}

	return r0
}

// MockCmder_readTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readTimeout'
type MockCmder_readTimeout_Call struct {
	*mock.Call
}

// readTimeout is a helper method to define mock.On call
func (_e *MockCmder_Expecter) readTimeout() *MockCmder_readTimeout_Call {
	return &MockCmder_readTimeout_Call{Call: _e.mock.On("readTimeout")}
}

func (_c *MockCmder_readTimeout_Call) Run(run func()) *MockCmder_readTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCmder_readTimeout_Call) Return(_a0 *time.Duration) *MockCmder_readTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_readTimeout_Call) RunAndReturn(run func() *time.Duration) *MockCmder_readTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// stringArg provides a mock function with given fields: _a0
func (_m *MockCmder) stringArg(_a0 int) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for stringArg")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCmder_stringArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'stringArg'
type MockCmder_stringArg_Call struct {
	*mock.Call
}

// stringArg is a helper method to define mock.On call
//   - _a0 int
func (_e *MockCmder_Expecter) stringArg(_a0 interface{}) *MockCmder_stringArg_Call {
	return &MockCmder_stringArg_Call{Call: _e.mock.On("stringArg", _a0)}
}

func (_c *MockCmder_stringArg_Call) Run(run func(_a0 int)) *MockCmder_stringArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCmder_stringArg_Call) Return(_a0 string) *MockCmder_stringArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmder_stringArg_Call) RunAndReturn(run func(int) string) *MockCmder_stringArg_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCmder creates a new instance of MockCmder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCmder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCmder {
	mock := &MockCmder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
