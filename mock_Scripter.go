// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockScripter is an autogenerated mock type for the Scripter type
type MockScripter struct {
	mock.Mock
}

type MockScripter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScripter) EXPECT() *MockScripter_Expecter {
	return &MockScripter_Expecter{mock: &_m.Mock}
}

// Eval provides a mock function with given fields: ctx, script, keys, args
func (_m *MockScripter) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockScripter_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type MockScripter_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
//   - keys []string
//   - args ...interface{}
func (_e *MockScripter_Expecter) Eval(ctx interface{}, script interface{}, keys interface{}, args ...interface{}) *MockScripter_Eval_Call {
	return &MockScripter_Eval_Call{Call: _e.mock.On("Eval",
		append([]interface{}{ctx, script, keys}, args...)...)}
}

func (_c *MockScripter_Eval_Call) Run(run func(ctx context.Context, script string, keys []string, args ...interface{})) *MockScripter_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockScripter_Eval_Call) Return(_a0 *Cmd) *MockScripter_Eval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScripter_Eval_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockScripter_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// EvalRO provides a mock function with given fields: ctx, script, keys, args
func (_m *MockScripter) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalRO")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockScripter_EvalRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalRO'
type MockScripter_EvalRO_Call struct {
	*mock.Call
}

// EvalRO is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
//   - keys []string
//   - args ...interface{}
func (_e *MockScripter_Expecter) EvalRO(ctx interface{}, script interface{}, keys interface{}, args ...interface{}) *MockScripter_EvalRO_Call {
	return &MockScripter_EvalRO_Call{Call: _e.mock.On("EvalRO",
		append([]interface{}{ctx, script, keys}, args...)...)}
}

func (_c *MockScripter_EvalRO_Call) Run(run func(ctx context.Context, script string, keys []string, args ...interface{})) *MockScripter_EvalRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockScripter_EvalRO_Call) Return(_a0 *Cmd) *MockScripter_EvalRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScripter_EvalRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockScripter_EvalRO_Call {
	_c.Call.Return(run)
	return _c
}

// EvalSha provides a mock function with given fields: ctx, sha1, keys, args
func (_m *MockScripter) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalSha")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockScripter_EvalSha_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalSha'
type MockScripter_EvalSha_Call struct {
	*mock.Call
}

// EvalSha is a helper method to define mock.On call
//   - ctx context.Context
//   - sha1 string
//   - keys []string
//   - args ...interface{}
func (_e *MockScripter_Expecter) EvalSha(ctx interface{}, sha1 interface{}, keys interface{}, args ...interface{}) *MockScripter_EvalSha_Call {
	return &MockScripter_EvalSha_Call{Call: _e.mock.On("EvalSha",
		append([]interface{}{ctx, sha1, keys}, args...)...)}
}

func (_c *MockScripter_EvalSha_Call) Run(run func(ctx context.Context, sha1 string, keys []string, args ...interface{})) *MockScripter_EvalSha_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockScripter_EvalSha_Call) Return(_a0 *Cmd) *MockScripter_EvalSha_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScripter_EvalSha_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockScripter_EvalSha_Call {
	_c.Call.Return(run)
	return _c
}

// EvalShaRO provides a mock function with given fields: ctx, sha1, keys, args
func (_m *MockScripter) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalShaRO")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockScripter_EvalShaRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalShaRO'
type MockScripter_EvalShaRO_Call struct {
	*mock.Call
}

// EvalShaRO is a helper method to define mock.On call
//   - ctx context.Context
//   - sha1 string
//   - keys []string
//   - args ...interface{}
func (_e *MockScripter_Expecter) EvalShaRO(ctx interface{}, sha1 interface{}, keys interface{}, args ...interface{}) *MockScripter_EvalShaRO_Call {
	return &MockScripter_EvalShaRO_Call{Call: _e.mock.On("EvalShaRO",
		append([]interface{}{ctx, sha1, keys}, args...)...)}
}

func (_c *MockScripter_EvalShaRO_Call) Run(run func(ctx context.Context, sha1 string, keys []string, args ...interface{})) *MockScripter_EvalShaRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockScripter_EvalShaRO_Call) Return(_a0 *Cmd) *MockScripter_EvalShaRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScripter_EvalShaRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockScripter_EvalShaRO_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptExists provides a mock function with given fields: ctx, hashes
func (_m *MockScripter) ScriptExists(ctx context.Context, hashes ...string) *BoolSliceCmd {
	_va := make([]interface{}, len(hashes))
	for _i := range hashes {
		_va[_i] = hashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScriptExists")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *BoolSliceCmd); ok {
		r0 = rf(ctx, hashes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockScripter_ScriptExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptExists'
type MockScripter_ScriptExists_Call struct {
	*mock.Call
}

// ScriptExists is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes ...string
func (_e *MockScripter_Expecter) ScriptExists(ctx interface{}, hashes ...interface{}) *MockScripter_ScriptExists_Call {
	return &MockScripter_ScriptExists_Call{Call: _e.mock.On("ScriptExists",
		append([]interface{}{ctx}, hashes...)...)}
}

func (_c *MockScripter_ScriptExists_Call) Run(run func(ctx context.Context, hashes ...string)) *MockScripter_ScriptExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockScripter_ScriptExists_Call) Return(_a0 *BoolSliceCmd) *MockScripter_ScriptExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScripter_ScriptExists_Call) RunAndReturn(run func(context.Context, ...string) *BoolSliceCmd) *MockScripter_ScriptExists_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptLoad provides a mock function with given fields: ctx, script
func (_m *MockScripter) ScriptLoad(ctx context.Context, script string) *StringCmd {
	ret := _m.Called(ctx, script)

	if len(ret) == 0 {
		panic("no return value specified for ScriptLoad")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, script)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockScripter_ScriptLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptLoad'
type MockScripter_ScriptLoad_Call struct {
	*mock.Call
}

// ScriptLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
func (_e *MockScripter_Expecter) ScriptLoad(ctx interface{}, script interface{}) *MockScripter_ScriptLoad_Call {
	return &MockScripter_ScriptLoad_Call{Call: _e.mock.On("ScriptLoad", ctx, script)}
}

func (_c *MockScripter_ScriptLoad_Call) Run(run func(ctx context.Context, script string)) *MockScripter_ScriptLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockScripter_ScriptLoad_Call) Return(_a0 *StringCmd) *MockScripter_ScriptLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScripter_ScriptLoad_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockScripter_ScriptLoad_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScripter creates a new instance of MockScripter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScripter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScripter {
	mock := &MockScripter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
