// Code generated by mockery. DO NOT EDIT.

package redis

import mock "github.com/stretchr/testify/mock"

// MocktimeoutError is an autogenerated mock type for the timeoutError type
type MocktimeoutError struct {
	mock.Mock
}

type MocktimeoutError_Expecter struct {
	mock *mock.Mock
}

func (_m *MocktimeoutError) EXPECT() *MocktimeoutError_Expecter {
	return &MocktimeoutError_Expecter{mock: &_m.Mock}
}

// Timeout provides a mock function with no fields
func (_m *MocktimeoutError) Timeout() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MocktimeoutError_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type MocktimeoutError_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
func (_e *MocktimeoutError_Expecter) Timeout() *MocktimeoutError_Timeout_Call {
	return &MocktimeoutError_Timeout_Call{Call: _e.mock.On("Timeout")}
}

func (_c *MocktimeoutError_Timeout_Call) Run(run func()) *MocktimeoutError_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocktimeoutError_Timeout_Call) Return(_a0 bool) *MocktimeoutError_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocktimeoutError_Timeout_Call) RunAndReturn(run func() bool) *MocktimeoutError_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocktimeoutError creates a new instance of MocktimeoutError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktimeoutError(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocktimeoutError {
	mock := &MocktimeoutError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
