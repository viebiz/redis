// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClusterCmdable is an autogenerated mock type for the ClusterCmdable type
type MockClusterCmdable struct {
	mock.Mock
}

type MockClusterCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterCmdable) EXPECT() *MockClusterCmdable_Expecter {
	return &MockClusterCmdable_Expecter{mock: &_m.Mock}
}

// ClusterAddSlots provides a mock function with given fields: ctx, slots
func (_m *MockClusterCmdable) ClusterAddSlots(ctx context.Context, slots ...int) *StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterAddSlots")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterAddSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterAddSlots'
type MockClusterCmdable_ClusterAddSlots_Call struct {
	*mock.Call
}

// ClusterAddSlots is a helper method to define mock.On call
//   - ctx context.Context
//   - slots ...int
func (_e *MockClusterCmdable_Expecter) ClusterAddSlots(ctx interface{}, slots ...interface{}) *MockClusterCmdable_ClusterAddSlots_Call {
	return &MockClusterCmdable_ClusterAddSlots_Call{Call: _e.mock.On("ClusterAddSlots",
		append([]interface{}{ctx}, slots...)...)}
}

func (_c *MockClusterCmdable_ClusterAddSlots_Call) Run(run func(ctx context.Context, slots ...int)) *MockClusterCmdable_ClusterAddSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterAddSlots_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterAddSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterAddSlots_Call) RunAndReturn(run func(context.Context, ...int) *StatusCmd) *MockClusterCmdable_ClusterAddSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterAddSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *MockClusterCmdable) ClusterAddSlotsRange(ctx context.Context, min int, max int) *StatusCmd {
	ret := _m.Called(ctx, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ClusterAddSlotsRange")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterAddSlotsRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterAddSlotsRange'
type MockClusterCmdable_ClusterAddSlotsRange_Call struct {
	*mock.Call
}

// ClusterAddSlotsRange is a helper method to define mock.On call
//   - ctx context.Context
//   - min int
//   - max int
func (_e *MockClusterCmdable_Expecter) ClusterAddSlotsRange(ctx interface{}, min interface{}, max interface{}) *MockClusterCmdable_ClusterAddSlotsRange_Call {
	return &MockClusterCmdable_ClusterAddSlotsRange_Call{Call: _e.mock.On("ClusterAddSlotsRange", ctx, min, max)}
}

func (_c *MockClusterCmdable_ClusterAddSlotsRange_Call) Run(run func(ctx context.Context, min int, max int)) *MockClusterCmdable_ClusterAddSlotsRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterAddSlotsRange_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterAddSlotsRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterAddSlotsRange_Call) RunAndReturn(run func(context.Context, int, int) *StatusCmd) *MockClusterCmdable_ClusterAddSlotsRange_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterCountFailureReports provides a mock function with given fields: ctx, nodeID
func (_m *MockClusterCmdable) ClusterCountFailureReports(ctx context.Context, nodeID string) *IntCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterCountFailureReports")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterCountFailureReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterCountFailureReports'
type MockClusterCmdable_ClusterCountFailureReports_Call struct {
	*mock.Call
}

// ClusterCountFailureReports is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockClusterCmdable_Expecter) ClusterCountFailureReports(ctx interface{}, nodeID interface{}) *MockClusterCmdable_ClusterCountFailureReports_Call {
	return &MockClusterCmdable_ClusterCountFailureReports_Call{Call: _e.mock.On("ClusterCountFailureReports", ctx, nodeID)}
}

func (_c *MockClusterCmdable_ClusterCountFailureReports_Call) Run(run func(ctx context.Context, nodeID string)) *MockClusterCmdable_ClusterCountFailureReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterCountFailureReports_Call) Return(_a0 *IntCmd) *MockClusterCmdable_ClusterCountFailureReports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterCountFailureReports_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockClusterCmdable_ClusterCountFailureReports_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterCountKeysInSlot provides a mock function with given fields: ctx, slot
func (_m *MockClusterCmdable) ClusterCountKeysInSlot(ctx context.Context, slot int) *IntCmd {
	ret := _m.Called(ctx, slot)

	if len(ret) == 0 {
		panic("no return value specified for ClusterCountKeysInSlot")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int) *IntCmd); ok {
		r0 = rf(ctx, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterCountKeysInSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterCountKeysInSlot'
type MockClusterCmdable_ClusterCountKeysInSlot_Call struct {
	*mock.Call
}

// ClusterCountKeysInSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
func (_e *MockClusterCmdable_Expecter) ClusterCountKeysInSlot(ctx interface{}, slot interface{}) *MockClusterCmdable_ClusterCountKeysInSlot_Call {
	return &MockClusterCmdable_ClusterCountKeysInSlot_Call{Call: _e.mock.On("ClusterCountKeysInSlot", ctx, slot)}
}

func (_c *MockClusterCmdable_ClusterCountKeysInSlot_Call) Run(run func(ctx context.Context, slot int)) *MockClusterCmdable_ClusterCountKeysInSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterCountKeysInSlot_Call) Return(_a0 *IntCmd) *MockClusterCmdable_ClusterCountKeysInSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterCountKeysInSlot_Call) RunAndReturn(run func(context.Context, int) *IntCmd) *MockClusterCmdable_ClusterCountKeysInSlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterDelSlots provides a mock function with given fields: ctx, slots
func (_m *MockClusterCmdable) ClusterDelSlots(ctx context.Context, slots ...int) *StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterDelSlots")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterDelSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelSlots'
type MockClusterCmdable_ClusterDelSlots_Call struct {
	*mock.Call
}

// ClusterDelSlots is a helper method to define mock.On call
//   - ctx context.Context
//   - slots ...int
func (_e *MockClusterCmdable_Expecter) ClusterDelSlots(ctx interface{}, slots ...interface{}) *MockClusterCmdable_ClusterDelSlots_Call {
	return &MockClusterCmdable_ClusterDelSlots_Call{Call: _e.mock.On("ClusterDelSlots",
		append([]interface{}{ctx}, slots...)...)}
}

func (_c *MockClusterCmdable_ClusterDelSlots_Call) Run(run func(ctx context.Context, slots ...int)) *MockClusterCmdable_ClusterDelSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterDelSlots_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterDelSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterDelSlots_Call) RunAndReturn(run func(context.Context, ...int) *StatusCmd) *MockClusterCmdable_ClusterDelSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterDelSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *MockClusterCmdable) ClusterDelSlotsRange(ctx context.Context, min int, max int) *StatusCmd {
	ret := _m.Called(ctx, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ClusterDelSlotsRange")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterDelSlotsRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelSlotsRange'
type MockClusterCmdable_ClusterDelSlotsRange_Call struct {
	*mock.Call
}

// ClusterDelSlotsRange is a helper method to define mock.On call
//   - ctx context.Context
//   - min int
//   - max int
func (_e *MockClusterCmdable_Expecter) ClusterDelSlotsRange(ctx interface{}, min interface{}, max interface{}) *MockClusterCmdable_ClusterDelSlotsRange_Call {
	return &MockClusterCmdable_ClusterDelSlotsRange_Call{Call: _e.mock.On("ClusterDelSlotsRange", ctx, min, max)}
}

func (_c *MockClusterCmdable_ClusterDelSlotsRange_Call) Run(run func(ctx context.Context, min int, max int)) *MockClusterCmdable_ClusterDelSlotsRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterDelSlotsRange_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterDelSlotsRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterDelSlotsRange_Call) RunAndReturn(run func(context.Context, int, int) *StatusCmd) *MockClusterCmdable_ClusterDelSlotsRange_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterFailover provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterFailover(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterFailover")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterFailover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterFailover'
type MockClusterCmdable_ClusterFailover_Call struct {
	*mock.Call
}

// ClusterFailover is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterFailover(ctx interface{}) *MockClusterCmdable_ClusterFailover_Call {
	return &MockClusterCmdable_ClusterFailover_Call{Call: _e.mock.On("ClusterFailover", ctx)}
}

func (_c *MockClusterCmdable_ClusterFailover_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterFailover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterFailover_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterFailover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterFailover_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockClusterCmdable_ClusterFailover_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterForget provides a mock function with given fields: ctx, nodeID
func (_m *MockClusterCmdable) ClusterForget(ctx context.Context, nodeID string) *StatusCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterForget")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterForget'
type MockClusterCmdable_ClusterForget_Call struct {
	*mock.Call
}

// ClusterForget is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockClusterCmdable_Expecter) ClusterForget(ctx interface{}, nodeID interface{}) *MockClusterCmdable_ClusterForget_Call {
	return &MockClusterCmdable_ClusterForget_Call{Call: _e.mock.On("ClusterForget", ctx, nodeID)}
}

func (_c *MockClusterCmdable_ClusterForget_Call) Run(run func(ctx context.Context, nodeID string)) *MockClusterCmdable_ClusterForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterForget_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterForget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterForget_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockClusterCmdable_ClusterForget_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterGetKeysInSlot provides a mock function with given fields: ctx, slot, count
func (_m *MockClusterCmdable) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *StringSliceCmd {
	ret := _m.Called(ctx, slot, count)

	if len(ret) == 0 {
		panic("no return value specified for ClusterGetKeysInSlot")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *StringSliceCmd); ok {
		r0 = rf(ctx, slot, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterGetKeysInSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterGetKeysInSlot'
type MockClusterCmdable_ClusterGetKeysInSlot_Call struct {
	*mock.Call
}

// ClusterGetKeysInSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
//   - count int
func (_e *MockClusterCmdable_Expecter) ClusterGetKeysInSlot(ctx interface{}, slot interface{}, count interface{}) *MockClusterCmdable_ClusterGetKeysInSlot_Call {
	return &MockClusterCmdable_ClusterGetKeysInSlot_Call{Call: _e.mock.On("ClusterGetKeysInSlot", ctx, slot, count)}
}

func (_c *MockClusterCmdable_ClusterGetKeysInSlot_Call) Run(run func(ctx context.Context, slot int, count int)) *MockClusterCmdable_ClusterGetKeysInSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterGetKeysInSlot_Call) Return(_a0 *StringSliceCmd) *MockClusterCmdable_ClusterGetKeysInSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterGetKeysInSlot_Call) RunAndReturn(run func(context.Context, int, int) *StringSliceCmd) *MockClusterCmdable_ClusterGetKeysInSlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterInfo provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterInfo(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterInfo")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterInfo'
type MockClusterCmdable_ClusterInfo_Call struct {
	*mock.Call
}

// ClusterInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterInfo(ctx interface{}) *MockClusterCmdable_ClusterInfo_Call {
	return &MockClusterCmdable_ClusterInfo_Call{Call: _e.mock.On("ClusterInfo", ctx)}
}

func (_c *MockClusterCmdable_ClusterInfo_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterInfo_Call) Return(_a0 *StringCmd) *MockClusterCmdable_ClusterInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterInfo_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockClusterCmdable_ClusterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterKeySlot provides a mock function with given fields: ctx, key
func (_m *MockClusterCmdable) ClusterKeySlot(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ClusterKeySlot")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterKeySlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterKeySlot'
type MockClusterCmdable_ClusterKeySlot_Call struct {
	*mock.Call
}

// ClusterKeySlot is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockClusterCmdable_Expecter) ClusterKeySlot(ctx interface{}, key interface{}) *MockClusterCmdable_ClusterKeySlot_Call {
	return &MockClusterCmdable_ClusterKeySlot_Call{Call: _e.mock.On("ClusterKeySlot", ctx, key)}
}

func (_c *MockClusterCmdable_ClusterKeySlot_Call) Run(run func(ctx context.Context, key string)) *MockClusterCmdable_ClusterKeySlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterKeySlot_Call) Return(_a0 *IntCmd) *MockClusterCmdable_ClusterKeySlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterKeySlot_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockClusterCmdable_ClusterKeySlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterLinks provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterLinks(ctx context.Context) *ClusterLinksCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterLinks")
	}

	var r0 *ClusterLinksCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClusterLinksCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterLinksCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterLinks'
type MockClusterCmdable_ClusterLinks_Call struct {
	*mock.Call
}

// ClusterLinks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterLinks(ctx interface{}) *MockClusterCmdable_ClusterLinks_Call {
	return &MockClusterCmdable_ClusterLinks_Call{Call: _e.mock.On("ClusterLinks", ctx)}
}

func (_c *MockClusterCmdable_ClusterLinks_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterLinks_Call) Return(_a0 *ClusterLinksCmd) *MockClusterCmdable_ClusterLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterLinks_Call) RunAndReturn(run func(context.Context) *ClusterLinksCmd) *MockClusterCmdable_ClusterLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMeet provides a mock function with given fields: ctx, host, port
func (_m *MockClusterCmdable) ClusterMeet(ctx context.Context, host string, port string) *StatusCmd {
	ret := _m.Called(ctx, host, port)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMeet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterMeet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMeet'
type MockClusterCmdable_ClusterMeet_Call struct {
	*mock.Call
}

// ClusterMeet is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
func (_e *MockClusterCmdable_Expecter) ClusterMeet(ctx interface{}, host interface{}, port interface{}) *MockClusterCmdable_ClusterMeet_Call {
	return &MockClusterCmdable_ClusterMeet_Call{Call: _e.mock.On("ClusterMeet", ctx, host, port)}
}

func (_c *MockClusterCmdable_ClusterMeet_Call) Run(run func(ctx context.Context, host string, port string)) *MockClusterCmdable_ClusterMeet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterMeet_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterMeet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterMeet_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockClusterCmdable_ClusterMeet_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMyID provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterMyID(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMyID")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterMyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMyID'
type MockClusterCmdable_ClusterMyID_Call struct {
	*mock.Call
}

// ClusterMyID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterMyID(ctx interface{}) *MockClusterCmdable_ClusterMyID_Call {
	return &MockClusterCmdable_ClusterMyID_Call{Call: _e.mock.On("ClusterMyID", ctx)}
}

func (_c *MockClusterCmdable_ClusterMyID_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterMyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterMyID_Call) Return(_a0 *StringCmd) *MockClusterCmdable_ClusterMyID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterMyID_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockClusterCmdable_ClusterMyID_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMyShardID provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterMyShardID(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMyShardID")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterMyShardID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMyShardID'
type MockClusterCmdable_ClusterMyShardID_Call struct {
	*mock.Call
}

// ClusterMyShardID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterMyShardID(ctx interface{}) *MockClusterCmdable_ClusterMyShardID_Call {
	return &MockClusterCmdable_ClusterMyShardID_Call{Call: _e.mock.On("ClusterMyShardID", ctx)}
}

func (_c *MockClusterCmdable_ClusterMyShardID_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterMyShardID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterMyShardID_Call) Return(_a0 *StringCmd) *MockClusterCmdable_ClusterMyShardID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterMyShardID_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockClusterCmdable_ClusterMyShardID_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterNodes provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterNodes(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterNodes")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterNodes'
type MockClusterCmdable_ClusterNodes_Call struct {
	*mock.Call
}

// ClusterNodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterNodes(ctx interface{}) *MockClusterCmdable_ClusterNodes_Call {
	return &MockClusterCmdable_ClusterNodes_Call{Call: _e.mock.On("ClusterNodes", ctx)}
}

func (_c *MockClusterCmdable_ClusterNodes_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterNodes_Call) Return(_a0 *StringCmd) *MockClusterCmdable_ClusterNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterNodes_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockClusterCmdable_ClusterNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterReplicate provides a mock function with given fields: ctx, nodeID
func (_m *MockClusterCmdable) ClusterReplicate(ctx context.Context, nodeID string) *StatusCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterReplicate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterReplicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterReplicate'
type MockClusterCmdable_ClusterReplicate_Call struct {
	*mock.Call
}

// ClusterReplicate is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockClusterCmdable_Expecter) ClusterReplicate(ctx interface{}, nodeID interface{}) *MockClusterCmdable_ClusterReplicate_Call {
	return &MockClusterCmdable_ClusterReplicate_Call{Call: _e.mock.On("ClusterReplicate", ctx, nodeID)}
}

func (_c *MockClusterCmdable_ClusterReplicate_Call) Run(run func(ctx context.Context, nodeID string)) *MockClusterCmdable_ClusterReplicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterReplicate_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterReplicate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterReplicate_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockClusterCmdable_ClusterReplicate_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterResetHard provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterResetHard(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterResetHard")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterResetHard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterResetHard'
type MockClusterCmdable_ClusterResetHard_Call struct {
	*mock.Call
}

// ClusterResetHard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterResetHard(ctx interface{}) *MockClusterCmdable_ClusterResetHard_Call {
	return &MockClusterCmdable_ClusterResetHard_Call{Call: _e.mock.On("ClusterResetHard", ctx)}
}

func (_c *MockClusterCmdable_ClusterResetHard_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterResetHard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterResetHard_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterResetHard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterResetHard_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockClusterCmdable_ClusterResetHard_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterResetSoft provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterResetSoft(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterResetSoft")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterResetSoft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterResetSoft'
type MockClusterCmdable_ClusterResetSoft_Call struct {
	*mock.Call
}

// ClusterResetSoft is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterResetSoft(ctx interface{}) *MockClusterCmdable_ClusterResetSoft_Call {
	return &MockClusterCmdable_ClusterResetSoft_Call{Call: _e.mock.On("ClusterResetSoft", ctx)}
}

func (_c *MockClusterCmdable_ClusterResetSoft_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterResetSoft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterResetSoft_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterResetSoft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterResetSoft_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockClusterCmdable_ClusterResetSoft_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSaveConfig provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterSaveConfig(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterSaveConfig")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterSaveConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSaveConfig'
type MockClusterCmdable_ClusterSaveConfig_Call struct {
	*mock.Call
}

// ClusterSaveConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterSaveConfig(ctx interface{}) *MockClusterCmdable_ClusterSaveConfig_Call {
	return &MockClusterCmdable_ClusterSaveConfig_Call{Call: _e.mock.On("ClusterSaveConfig", ctx)}
}

func (_c *MockClusterCmdable_ClusterSaveConfig_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterSaveConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterSaveConfig_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ClusterSaveConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterSaveConfig_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockClusterCmdable_ClusterSaveConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterShards provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterShards(ctx context.Context) *ClusterShardsCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterShards")
	}

	var r0 *ClusterShardsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClusterShardsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterShardsCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterShards'
type MockClusterCmdable_ClusterShards_Call struct {
	*mock.Call
}

// ClusterShards is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterShards(ctx interface{}) *MockClusterCmdable_ClusterShards_Call {
	return &MockClusterCmdable_ClusterShards_Call{Call: _e.mock.On("ClusterShards", ctx)}
}

func (_c *MockClusterCmdable_ClusterShards_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterShards_Call) Return(_a0 *ClusterShardsCmd) *MockClusterCmdable_ClusterShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterShards_Call) RunAndReturn(run func(context.Context) *ClusterShardsCmd) *MockClusterCmdable_ClusterShards_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSlaves provides a mock function with given fields: ctx, nodeID
func (_m *MockClusterCmdable) ClusterSlaves(ctx context.Context, nodeID string) *StringSliceCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterSlaves")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterSlaves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSlaves'
type MockClusterCmdable_ClusterSlaves_Call struct {
	*mock.Call
}

// ClusterSlaves is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockClusterCmdable_Expecter) ClusterSlaves(ctx interface{}, nodeID interface{}) *MockClusterCmdable_ClusterSlaves_Call {
	return &MockClusterCmdable_ClusterSlaves_Call{Call: _e.mock.On("ClusterSlaves", ctx, nodeID)}
}

func (_c *MockClusterCmdable_ClusterSlaves_Call) Run(run func(ctx context.Context, nodeID string)) *MockClusterCmdable_ClusterSlaves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterSlaves_Call) Return(_a0 *StringSliceCmd) *MockClusterCmdable_ClusterSlaves_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterSlaves_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockClusterCmdable_ClusterSlaves_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSlots provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ClusterSlots(ctx context.Context) *ClusterSlotsCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterSlots")
	}

	var r0 *ClusterSlotsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClusterSlotsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterSlotsCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ClusterSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSlots'
type MockClusterCmdable_ClusterSlots_Call struct {
	*mock.Call
}

// ClusterSlots is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ClusterSlots(ctx interface{}) *MockClusterCmdable_ClusterSlots_Call {
	return &MockClusterCmdable_ClusterSlots_Call{Call: _e.mock.On("ClusterSlots", ctx)}
}

func (_c *MockClusterCmdable_ClusterSlots_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ClusterSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ClusterSlots_Call) Return(_a0 *ClusterSlotsCmd) *MockClusterCmdable_ClusterSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ClusterSlots_Call) RunAndReturn(run func(context.Context) *ClusterSlotsCmd) *MockClusterCmdable_ClusterSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ReadOnly provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ReadOnly(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadOnly")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOnly'
type MockClusterCmdable_ReadOnly_Call struct {
	*mock.Call
}

// ReadOnly is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ReadOnly(ctx interface{}) *MockClusterCmdable_ReadOnly_Call {
	return &MockClusterCmdable_ReadOnly_Call{Call: _e.mock.On("ReadOnly", ctx)}
}

func (_c *MockClusterCmdable_ReadOnly_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ReadOnly_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ReadOnly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ReadOnly_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockClusterCmdable_ReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWrite provides a mock function with given fields: ctx
func (_m *MockClusterCmdable) ReadWrite(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadWrite")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockClusterCmdable_ReadWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWrite'
type MockClusterCmdable_ReadWrite_Call struct {
	*mock.Call
}

// ReadWrite is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterCmdable_Expecter) ReadWrite(ctx interface{}) *MockClusterCmdable_ReadWrite_Call {
	return &MockClusterCmdable_ReadWrite_Call{Call: _e.mock.On("ReadWrite", ctx)}
}

func (_c *MockClusterCmdable_ReadWrite_Call) Run(run func(ctx context.Context)) *MockClusterCmdable_ReadWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterCmdable_ReadWrite_Call) Return(_a0 *StatusCmd) *MockClusterCmdable_ReadWrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterCmdable_ReadWrite_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockClusterCmdable_ReadWrite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterCmdable creates a new instance of MockClusterCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterCmdable {
	mock := &MockClusterCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
