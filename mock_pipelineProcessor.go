// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pool "github.com/viebiz/redis/pkg/pool"
)

// MockpipelineProcessor is an autogenerated mock type for the pipelineProcessor type
type MockpipelineProcessor struct {
	mock.Mock
}

type MockpipelineProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpipelineProcessor) EXPECT() *MockpipelineProcessor_Expecter {
	return &MockpipelineProcessor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockpipelineProcessor) Execute(_a0 context.Context, _a1 *pool.Conn, _a2 []Cmder) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pool.Conn, []Cmder) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pool.Conn, []Cmder) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pool.Conn, []Cmder) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockpipelineProcessor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockpipelineProcessor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pool.Conn
//   - _a2 []Cmder
func (_e *MockpipelineProcessor_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockpipelineProcessor_Execute_Call {
	return &MockpipelineProcessor_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *MockpipelineProcessor_Execute_Call) Run(run func(_a0 context.Context, _a1 *pool.Conn, _a2 []Cmder)) *MockpipelineProcessor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pool.Conn), args[2].([]Cmder))
	})
	return _c
}

func (_c *MockpipelineProcessor_Execute_Call) Return(_a0 bool, _a1 error) *MockpipelineProcessor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockpipelineProcessor_Execute_Call) RunAndReturn(run func(context.Context, *pool.Conn, []Cmder) (bool, error)) *MockpipelineProcessor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockpipelineProcessor creates a new instance of MockpipelineProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpipelineProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpipelineProcessor {
	mock := &MockpipelineProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
