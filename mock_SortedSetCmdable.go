// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockSortedSetCmdable is an autogenerated mock type for the SortedSetCmdable type
type MockSortedSetCmdable struct {
	mock.Mock
}

type MockSortedSetCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSortedSetCmdable) EXPECT() *MockSortedSetCmdable_Expecter {
	return &MockSortedSetCmdable_Expecter{mock: &_m.Mock}
}

// BZMPop provides a mock function with given fields: ctx, timeout, order, count, keys
func (_m *MockSortedSetCmdable) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *ZSliceWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout, order, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BZMPop")
	}

	var r0 *ZSliceWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, int64, ...string) *ZSliceWithKeyCmd); ok {
		r0 = rf(ctx, timeout, order, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceWithKeyCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_BZMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZMPop'
type MockSortedSetCmdable_BZMPop_Call struct {
	*mock.Call
}

// BZMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - order string
//   - count int64
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) BZMPop(ctx interface{}, timeout interface{}, order interface{}, count interface{}, keys ...interface{}) *MockSortedSetCmdable_BZMPop_Call {
	return &MockSortedSetCmdable_BZMPop_Call{Call: _e.mock.On("BZMPop",
		append([]interface{}{ctx, timeout, order, count}, keys...)...)}
}

func (_c *MockSortedSetCmdable_BZMPop_Call) Run(run func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string)) *MockSortedSetCmdable_BZMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_BZMPop_Call) Return(_a0 *ZSliceWithKeyCmd) *MockSortedSetCmdable_BZMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_BZMPop_Call) RunAndReturn(run func(context.Context, time.Duration, string, int64, ...string) *ZSliceWithKeyCmd) *MockSortedSetCmdable_BZMPop_Call {
	_c.Call.Return(run)
	return _c
}

// BZPopMax provides a mock function with given fields: ctx, timeout, keys
func (_m *MockSortedSetCmdable) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BZPopMax")
	}

	var r0 *ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZWithKeyCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_BZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMax'
type MockSortedSetCmdable_BZPopMax_Call struct {
	*mock.Call
}

// BZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) BZPopMax(ctx interface{}, timeout interface{}, keys ...interface{}) *MockSortedSetCmdable_BZPopMax_Call {
	return &MockSortedSetCmdable_BZPopMax_Call{Call: _e.mock.On("BZPopMax",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *MockSortedSetCmdable_BZPopMax_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *MockSortedSetCmdable_BZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_BZPopMax_Call) Return(_a0 *ZWithKeyCmd) *MockSortedSetCmdable_BZPopMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_BZPopMax_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *ZWithKeyCmd) *MockSortedSetCmdable_BZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// BZPopMin provides a mock function with given fields: ctx, timeout, keys
func (_m *MockSortedSetCmdable) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BZPopMin")
	}

	var r0 *ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZWithKeyCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_BZPopMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMin'
type MockSortedSetCmdable_BZPopMin_Call struct {
	*mock.Call
}

// BZPopMin is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) BZPopMin(ctx interface{}, timeout interface{}, keys ...interface{}) *MockSortedSetCmdable_BZPopMin_Call {
	return &MockSortedSetCmdable_BZPopMin_Call{Call: _e.mock.On("BZPopMin",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *MockSortedSetCmdable_BZPopMin_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *MockSortedSetCmdable_BZPopMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_BZPopMin_Call) Return(_a0 *ZWithKeyCmd) *MockSortedSetCmdable_BZPopMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_BZPopMin_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *ZWithKeyCmd) *MockSortedSetCmdable_BZPopMin_Call {
	_c.Call.Return(run)
	return _c
}

// ZAdd provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZAdd(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAdd'
type MockSortedSetCmdable_ZAdd_Call struct {
	*mock.Call
}

// ZAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockSortedSetCmdable_Expecter) ZAdd(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZAdd_Call {
	return &MockSortedSetCmdable_ZAdd_Call{Call: _e.mock.On("ZAdd",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZAdd_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockSortedSetCmdable_ZAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAdd_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAdd_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockSortedSetCmdable_ZAdd_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddArgs provides a mock function with given fields: ctx, key, args
func (_m *MockSortedSetCmdable) ZAddArgs(ctx context.Context, key string, args ZAddArgs) *IntCmd {
	ret := _m.Called(ctx, key, args)

	if len(ret) == 0 {
		panic("no return value specified for ZAddArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ZAddArgs) *IntCmd); ok {
		r0 = rf(ctx, key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAddArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddArgs'
type MockSortedSetCmdable_ZAddArgs_Call struct {
	*mock.Call
}

// ZAddArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args ZAddArgs
func (_e *MockSortedSetCmdable_Expecter) ZAddArgs(ctx interface{}, key interface{}, args interface{}) *MockSortedSetCmdable_ZAddArgs_Call {
	return &MockSortedSetCmdable_ZAddArgs_Call{Call: _e.mock.On("ZAddArgs", ctx, key, args)}
}

func (_c *MockSortedSetCmdable_ZAddArgs_Call) Run(run func(ctx context.Context, key string, args ZAddArgs)) *MockSortedSetCmdable_ZAddArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ZAddArgs))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAddArgs_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZAddArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAddArgs_Call) RunAndReturn(run func(context.Context, string, ZAddArgs) *IntCmd) *MockSortedSetCmdable_ZAddArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddArgsIncr provides a mock function with given fields: ctx, key, args
func (_m *MockSortedSetCmdable) ZAddArgsIncr(ctx context.Context, key string, args ZAddArgs) *FloatCmd {
	ret := _m.Called(ctx, key, args)

	if len(ret) == 0 {
		panic("no return value specified for ZAddArgsIncr")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ZAddArgs) *FloatCmd); ok {
		r0 = rf(ctx, key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAddArgsIncr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddArgsIncr'
type MockSortedSetCmdable_ZAddArgsIncr_Call struct {
	*mock.Call
}

// ZAddArgsIncr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args ZAddArgs
func (_e *MockSortedSetCmdable_Expecter) ZAddArgsIncr(ctx interface{}, key interface{}, args interface{}) *MockSortedSetCmdable_ZAddArgsIncr_Call {
	return &MockSortedSetCmdable_ZAddArgsIncr_Call{Call: _e.mock.On("ZAddArgsIncr", ctx, key, args)}
}

func (_c *MockSortedSetCmdable_ZAddArgsIncr_Call) Run(run func(ctx context.Context, key string, args ZAddArgs)) *MockSortedSetCmdable_ZAddArgsIncr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ZAddArgs))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAddArgsIncr_Call) Return(_a0 *FloatCmd) *MockSortedSetCmdable_ZAddArgsIncr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAddArgsIncr_Call) RunAndReturn(run func(context.Context, string, ZAddArgs) *FloatCmd) *MockSortedSetCmdable_ZAddArgsIncr_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddGT provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZAddGT(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddGT")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAddGT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddGT'
type MockSortedSetCmdable_ZAddGT_Call struct {
	*mock.Call
}

// ZAddGT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockSortedSetCmdable_Expecter) ZAddGT(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZAddGT_Call {
	return &MockSortedSetCmdable_ZAddGT_Call{Call: _e.mock.On("ZAddGT",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZAddGT_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockSortedSetCmdable_ZAddGT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAddGT_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZAddGT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAddGT_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockSortedSetCmdable_ZAddGT_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddLT provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZAddLT(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddLT")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAddLT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddLT'
type MockSortedSetCmdable_ZAddLT_Call struct {
	*mock.Call
}

// ZAddLT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockSortedSetCmdable_Expecter) ZAddLT(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZAddLT_Call {
	return &MockSortedSetCmdable_ZAddLT_Call{Call: _e.mock.On("ZAddLT",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZAddLT_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockSortedSetCmdable_ZAddLT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAddLT_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZAddLT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAddLT_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockSortedSetCmdable_ZAddLT_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddNX provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZAddNX(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddNX")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAddNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddNX'
type MockSortedSetCmdable_ZAddNX_Call struct {
	*mock.Call
}

// ZAddNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockSortedSetCmdable_Expecter) ZAddNX(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZAddNX_Call {
	return &MockSortedSetCmdable_ZAddNX_Call{Call: _e.mock.On("ZAddNX",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZAddNX_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockSortedSetCmdable_ZAddNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAddNX_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZAddNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAddNX_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockSortedSetCmdable_ZAddNX_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddXX provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZAddXX(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddXX")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZAddXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddXX'
type MockSortedSetCmdable_ZAddXX_Call struct {
	*mock.Call
}

// ZAddXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockSortedSetCmdable_Expecter) ZAddXX(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZAddXX_Call {
	return &MockSortedSetCmdable_ZAddXX_Call{Call: _e.mock.On("ZAddXX",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZAddXX_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockSortedSetCmdable_ZAddXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZAddXX_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZAddXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZAddXX_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockSortedSetCmdable_ZAddXX_Call {
	_c.Call.Return(run)
	return _c
}

// ZCard provides a mock function with given fields: ctx, key
func (_m *MockSortedSetCmdable) ZCard(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ZCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCard'
type MockSortedSetCmdable_ZCard_Call struct {
	*mock.Call
}

// ZCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockSortedSetCmdable_Expecter) ZCard(ctx interface{}, key interface{}) *MockSortedSetCmdable_ZCard_Call {
	return &MockSortedSetCmdable_ZCard_Call{Call: _e.mock.On("ZCard", ctx, key)}
}

func (_c *MockSortedSetCmdable_ZCard_Call) Run(run func(ctx context.Context, key string)) *MockSortedSetCmdable_ZCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZCard_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZCard_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockSortedSetCmdable_ZCard_Call {
	_c.Call.Return(run)
	return _c
}

// ZCount provides a mock function with given fields: ctx, key, min, max
func (_m *MockSortedSetCmdable) ZCount(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCount'
type MockSortedSetCmdable_ZCount_Call struct {
	*mock.Call
}

// ZCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockSortedSetCmdable_Expecter) ZCount(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockSortedSetCmdable_ZCount_Call {
	return &MockSortedSetCmdable_ZCount_Call{Call: _e.mock.On("ZCount", ctx, key, min, max)}
}

func (_c *MockSortedSetCmdable_ZCount_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockSortedSetCmdable_ZCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZCount_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZCount_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockSortedSetCmdable_ZCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiff provides a mock function with given fields: ctx, keys
func (_m *MockSortedSetCmdable) ZDiff(ctx context.Context, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZDiff")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiff'
type MockSortedSetCmdable_ZDiff_Call struct {
	*mock.Call
}

// ZDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) ZDiff(ctx interface{}, keys ...interface{}) *MockSortedSetCmdable_ZDiff_Call {
	return &MockSortedSetCmdable_ZDiff_Call{Call: _e.mock.On("ZDiff",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockSortedSetCmdable_ZDiff_Call) Run(run func(ctx context.Context, keys ...string)) *MockSortedSetCmdable_ZDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZDiff_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZDiff_Call) RunAndReturn(run func(context.Context, ...string) *StringSliceCmd) *MockSortedSetCmdable_ZDiff_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *MockSortedSetCmdable) ZDiffStore(ctx context.Context, destination string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZDiffStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZDiffStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiffStore'
type MockSortedSetCmdable_ZDiffStore_Call struct {
	*mock.Call
}

// ZDiffStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) ZDiffStore(ctx interface{}, destination interface{}, keys ...interface{}) *MockSortedSetCmdable_ZDiffStore_Call {
	return &MockSortedSetCmdable_ZDiffStore_Call{Call: _e.mock.On("ZDiffStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *MockSortedSetCmdable_ZDiffStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *MockSortedSetCmdable_ZDiffStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZDiffStore_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZDiffStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZDiffStore_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockSortedSetCmdable_ZDiffStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiffWithScores provides a mock function with given fields: ctx, keys
func (_m *MockSortedSetCmdable) ZDiffWithScores(ctx context.Context, keys ...string) *ZSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZDiffWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *ZSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZDiffWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiffWithScores'
type MockSortedSetCmdable_ZDiffWithScores_Call struct {
	*mock.Call
}

// ZDiffWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) ZDiffWithScores(ctx interface{}, keys ...interface{}) *MockSortedSetCmdable_ZDiffWithScores_Call {
	return &MockSortedSetCmdable_ZDiffWithScores_Call{Call: _e.mock.On("ZDiffWithScores",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockSortedSetCmdable_ZDiffWithScores_Call) Run(run func(ctx context.Context, keys ...string)) *MockSortedSetCmdable_ZDiffWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZDiffWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZDiffWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZDiffWithScores_Call) RunAndReturn(run func(context.Context, ...string) *ZSliceCmd) *MockSortedSetCmdable_ZDiffWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZIncrBy provides a mock function with given fields: ctx, key, increment, member
func (_m *MockSortedSetCmdable) ZIncrBy(ctx context.Context, key string, increment float64, member string) *FloatCmd {
	ret := _m.Called(ctx, key, increment, member)

	if len(ret) == 0 {
		panic("no return value specified for ZIncrBy")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string) *FloatCmd); ok {
		r0 = rf(ctx, key, increment, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZIncrBy'
type MockSortedSetCmdable_ZIncrBy_Call struct {
	*mock.Call
}

// ZIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - increment float64
//   - member string
func (_e *MockSortedSetCmdable_Expecter) ZIncrBy(ctx interface{}, key interface{}, increment interface{}, member interface{}) *MockSortedSetCmdable_ZIncrBy_Call {
	return &MockSortedSetCmdable_ZIncrBy_Call{Call: _e.mock.On("ZIncrBy", ctx, key, increment, member)}
}

func (_c *MockSortedSetCmdable_ZIncrBy_Call) Run(run func(ctx context.Context, key string, increment float64, member string)) *MockSortedSetCmdable_ZIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZIncrBy_Call) Return(_a0 *FloatCmd) *MockSortedSetCmdable_ZIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZIncrBy_Call) RunAndReturn(run func(context.Context, string, float64, string) *FloatCmd) *MockSortedSetCmdable_ZIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// ZInter provides a mock function with given fields: ctx, store
func (_m *MockSortedSetCmdable) ZInter(ctx context.Context, store *ZStore) *StringSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZInter")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *ZStore) *StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZInter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInter'
type MockSortedSetCmdable_ZInter_Call struct {
	*mock.Call
}

// ZInter is a helper method to define mock.On call
//   - ctx context.Context
//   - store *ZStore
func (_e *MockSortedSetCmdable_Expecter) ZInter(ctx interface{}, store interface{}) *MockSortedSetCmdable_ZInter_Call {
	return &MockSortedSetCmdable_ZInter_Call{Call: _e.mock.On("ZInter", ctx, store)}
}

func (_c *MockSortedSetCmdable_ZInter_Call) Run(run func(ctx context.Context, store *ZStore)) *MockSortedSetCmdable_ZInter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ZStore))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZInter_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZInter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZInter_Call) RunAndReturn(run func(context.Context, *ZStore) *StringSliceCmd) *MockSortedSetCmdable_ZInter_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterCard provides a mock function with given fields: ctx, limit, keys
func (_m *MockSortedSetCmdable) ZInterCard(ctx context.Context, limit int64, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZInterCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) *IntCmd); ok {
		r0 = rf(ctx, limit, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZInterCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterCard'
type MockSortedSetCmdable_ZInterCard_Call struct {
	*mock.Call
}

// ZInterCard is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) ZInterCard(ctx interface{}, limit interface{}, keys ...interface{}) *MockSortedSetCmdable_ZInterCard_Call {
	return &MockSortedSetCmdable_ZInterCard_Call{Call: _e.mock.On("ZInterCard",
		append([]interface{}{ctx, limit}, keys...)...)}
}

func (_c *MockSortedSetCmdable_ZInterCard_Call) Run(run func(ctx context.Context, limit int64, keys ...string)) *MockSortedSetCmdable_ZInterCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZInterCard_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZInterCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZInterCard_Call) RunAndReturn(run func(context.Context, int64, ...string) *IntCmd) *MockSortedSetCmdable_ZInterCard_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterStore provides a mock function with given fields: ctx, destination, store
func (_m *MockSortedSetCmdable) ZInterStore(ctx context.Context, destination string, store *ZStore) *IntCmd {
	ret := _m.Called(ctx, destination, store)

	if len(ret) == 0 {
		panic("no return value specified for ZInterStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZStore) *IntCmd); ok {
		r0 = rf(ctx, destination, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZInterStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterStore'
type MockSortedSetCmdable_ZInterStore_Call struct {
	*mock.Call
}

// ZInterStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - store *ZStore
func (_e *MockSortedSetCmdable_Expecter) ZInterStore(ctx interface{}, destination interface{}, store interface{}) *MockSortedSetCmdable_ZInterStore_Call {
	return &MockSortedSetCmdable_ZInterStore_Call{Call: _e.mock.On("ZInterStore", ctx, destination, store)}
}

func (_c *MockSortedSetCmdable_ZInterStore_Call) Run(run func(ctx context.Context, destination string, store *ZStore)) *MockSortedSetCmdable_ZInterStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZStore))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZInterStore_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZInterStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZInterStore_Call) RunAndReturn(run func(context.Context, string, *ZStore) *IntCmd) *MockSortedSetCmdable_ZInterStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterWithScores provides a mock function with given fields: ctx, store
func (_m *MockSortedSetCmdable) ZInterWithScores(ctx context.Context, store *ZStore) *ZSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZInterWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *ZStore) *ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZInterWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterWithScores'
type MockSortedSetCmdable_ZInterWithScores_Call struct {
	*mock.Call
}

// ZInterWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - store *ZStore
func (_e *MockSortedSetCmdable_Expecter) ZInterWithScores(ctx interface{}, store interface{}) *MockSortedSetCmdable_ZInterWithScores_Call {
	return &MockSortedSetCmdable_ZInterWithScores_Call{Call: _e.mock.On("ZInterWithScores", ctx, store)}
}

func (_c *MockSortedSetCmdable_ZInterWithScores_Call) Run(run func(ctx context.Context, store *ZStore)) *MockSortedSetCmdable_ZInterWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ZStore))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZInterWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZInterWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZInterWithScores_Call) RunAndReturn(run func(context.Context, *ZStore) *ZSliceCmd) *MockSortedSetCmdable_ZInterWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZLexCount provides a mock function with given fields: ctx, key, min, max
func (_m *MockSortedSetCmdable) ZLexCount(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZLexCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZLexCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZLexCount'
type MockSortedSetCmdable_ZLexCount_Call struct {
	*mock.Call
}

// ZLexCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockSortedSetCmdable_Expecter) ZLexCount(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockSortedSetCmdable_ZLexCount_Call {
	return &MockSortedSetCmdable_ZLexCount_Call{Call: _e.mock.On("ZLexCount", ctx, key, min, max)}
}

func (_c *MockSortedSetCmdable_ZLexCount_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockSortedSetCmdable_ZLexCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZLexCount_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZLexCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZLexCount_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockSortedSetCmdable_ZLexCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZMPop provides a mock function with given fields: ctx, order, count, keys
func (_m *MockSortedSetCmdable) ZMPop(ctx context.Context, order string, count int64, keys ...string) *ZSliceWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, order, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZMPop")
	}

	var r0 *ZSliceWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...string) *ZSliceWithKeyCmd); ok {
		r0 = rf(ctx, order, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceWithKeyCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZMPop'
type MockSortedSetCmdable_ZMPop_Call struct {
	*mock.Call
}

// ZMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - order string
//   - count int64
//   - keys ...string
func (_e *MockSortedSetCmdable_Expecter) ZMPop(ctx interface{}, order interface{}, count interface{}, keys ...interface{}) *MockSortedSetCmdable_ZMPop_Call {
	return &MockSortedSetCmdable_ZMPop_Call{Call: _e.mock.On("ZMPop",
		append([]interface{}{ctx, order, count}, keys...)...)}
}

func (_c *MockSortedSetCmdable_ZMPop_Call) Run(run func(ctx context.Context, order string, count int64, keys ...string)) *MockSortedSetCmdable_ZMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZMPop_Call) Return(_a0 *ZSliceWithKeyCmd) *MockSortedSetCmdable_ZMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZMPop_Call) RunAndReturn(run func(context.Context, string, int64, ...string) *ZSliceWithKeyCmd) *MockSortedSetCmdable_ZMPop_Call {
	_c.Call.Return(run)
	return _c
}

// ZMScore provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZMScore(ctx context.Context, key string, members ...string) *FloatSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZMScore")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZMScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZMScore'
type MockSortedSetCmdable_ZMScore_Call struct {
	*mock.Call
}

// ZMScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *MockSortedSetCmdable_Expecter) ZMScore(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZMScore_Call {
	return &MockSortedSetCmdable_ZMScore_Call{Call: _e.mock.On("ZMScore",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZMScore_Call) Run(run func(ctx context.Context, key string, members ...string)) *MockSortedSetCmdable_ZMScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZMScore_Call) Return(_a0 *FloatSliceCmd) *MockSortedSetCmdable_ZMScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZMScore_Call) RunAndReturn(run func(context.Context, string, ...string) *FloatSliceCmd) *MockSortedSetCmdable_ZMScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZPopMax provides a mock function with given fields: ctx, key, count
func (_m *MockSortedSetCmdable) ZPopMax(ctx context.Context, key string, count ...int64) *ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZPopMax")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZPopMax'
type MockSortedSetCmdable_ZPopMax_Call struct {
	*mock.Call
}

// ZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count ...int64
func (_e *MockSortedSetCmdable_Expecter) ZPopMax(ctx interface{}, key interface{}, count ...interface{}) *MockSortedSetCmdable_ZPopMax_Call {
	return &MockSortedSetCmdable_ZPopMax_Call{Call: _e.mock.On("ZPopMax",
		append([]interface{}{ctx, key}, count...)...)}
}

func (_c *MockSortedSetCmdable_ZPopMax_Call) Run(run func(ctx context.Context, key string, count ...int64)) *MockSortedSetCmdable_ZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZPopMax_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZPopMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZPopMax_Call) RunAndReturn(run func(context.Context, string, ...int64) *ZSliceCmd) *MockSortedSetCmdable_ZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// ZPopMin provides a mock function with given fields: ctx, key, count
func (_m *MockSortedSetCmdable) ZPopMin(ctx context.Context, key string, count ...int64) *ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZPopMin")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZPopMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZPopMin'
type MockSortedSetCmdable_ZPopMin_Call struct {
	*mock.Call
}

// ZPopMin is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count ...int64
func (_e *MockSortedSetCmdable_Expecter) ZPopMin(ctx interface{}, key interface{}, count ...interface{}) *MockSortedSetCmdable_ZPopMin_Call {
	return &MockSortedSetCmdable_ZPopMin_Call{Call: _e.mock.On("ZPopMin",
		append([]interface{}{ctx, key}, count...)...)}
}

func (_c *MockSortedSetCmdable_ZPopMin_Call) Run(run func(ctx context.Context, key string, count ...int64)) *MockSortedSetCmdable_ZPopMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZPopMin_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZPopMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZPopMin_Call) RunAndReturn(run func(context.Context, string, ...int64) *ZSliceCmd) *MockSortedSetCmdable_ZPopMin_Call {
	_c.Call.Return(run)
	return _c
}

// ZRandMember provides a mock function with given fields: ctx, key, count
func (_m *MockSortedSetCmdable) ZRandMember(ctx context.Context, key string, count int) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for ZRandMember")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRandMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRandMember'
type MockSortedSetCmdable_ZRandMember_Call struct {
	*mock.Call
}

// ZRandMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockSortedSetCmdable_Expecter) ZRandMember(ctx interface{}, key interface{}, count interface{}) *MockSortedSetCmdable_ZRandMember_Call {
	return &MockSortedSetCmdable_ZRandMember_Call{Call: _e.mock.On("ZRandMember", ctx, key, count)}
}

func (_c *MockSortedSetCmdable_ZRandMember_Call) Run(run func(ctx context.Context, key string, count int)) *MockSortedSetCmdable_ZRandMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRandMember_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRandMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRandMember_Call) RunAndReturn(run func(context.Context, string, int) *StringSliceCmd) *MockSortedSetCmdable_ZRandMember_Call {
	_c.Call.Return(run)
	return _c
}

// ZRandMemberWithScores provides a mock function with given fields: ctx, key, count
func (_m *MockSortedSetCmdable) ZRandMemberWithScores(ctx context.Context, key string, count int) *ZSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for ZRandMemberWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *ZSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRandMemberWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRandMemberWithScores'
type MockSortedSetCmdable_ZRandMemberWithScores_Call struct {
	*mock.Call
}

// ZRandMemberWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockSortedSetCmdable_Expecter) ZRandMemberWithScores(ctx interface{}, key interface{}, count interface{}) *MockSortedSetCmdable_ZRandMemberWithScores_Call {
	return &MockSortedSetCmdable_ZRandMemberWithScores_Call{Call: _e.mock.On("ZRandMemberWithScores", ctx, key, count)}
}

func (_c *MockSortedSetCmdable_ZRandMemberWithScores_Call) Run(run func(ctx context.Context, key string, count int)) *MockSortedSetCmdable_ZRandMemberWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRandMemberWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZRandMemberWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRandMemberWithScores_Call) RunAndReturn(run func(context.Context, string, int) *ZSliceCmd) *MockSortedSetCmdable_ZRandMemberWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRange provides a mock function with given fields: ctx, key, start, stop
func (_m *MockSortedSetCmdable) ZRange(ctx context.Context, key string, start int64, stop int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRange")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRange'
type MockSortedSetCmdable_ZRange_Call struct {
	*mock.Call
}

// ZRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockSortedSetCmdable_Expecter) ZRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockSortedSetCmdable_ZRange_Call {
	return &MockSortedSetCmdable_ZRange_Call{Call: _e.mock.On("ZRange", ctx, key, start, stop)}
}

func (_c *MockSortedSetCmdable_ZRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockSortedSetCmdable_ZRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRange_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StringSliceCmd) *MockSortedSetCmdable_ZRange_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeArgs provides a mock function with given fields: ctx, z
func (_m *MockSortedSetCmdable) ZRangeArgs(ctx context.Context, z ZRangeArgs) *StringSliceCmd {
	ret := _m.Called(ctx, z)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeArgs")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZRangeArgs) *StringSliceCmd); ok {
		r0 = rf(ctx, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeArgs'
type MockSortedSetCmdable_ZRangeArgs_Call struct {
	*mock.Call
}

// ZRangeArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - z ZRangeArgs
func (_e *MockSortedSetCmdable_Expecter) ZRangeArgs(ctx interface{}, z interface{}) *MockSortedSetCmdable_ZRangeArgs_Call {
	return &MockSortedSetCmdable_ZRangeArgs_Call{Call: _e.mock.On("ZRangeArgs", ctx, z)}
}

func (_c *MockSortedSetCmdable_ZRangeArgs_Call) Run(run func(ctx context.Context, z ZRangeArgs)) *MockSortedSetCmdable_ZRangeArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZRangeArgs))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeArgs_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRangeArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeArgs_Call) RunAndReturn(run func(context.Context, ZRangeArgs) *StringSliceCmd) *MockSortedSetCmdable_ZRangeArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeArgsWithScores provides a mock function with given fields: ctx, z
func (_m *MockSortedSetCmdable) ZRangeArgsWithScores(ctx context.Context, z ZRangeArgs) *ZSliceCmd {
	ret := _m.Called(ctx, z)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeArgsWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZRangeArgs) *ZSliceCmd); ok {
		r0 = rf(ctx, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeArgsWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeArgsWithScores'
type MockSortedSetCmdable_ZRangeArgsWithScores_Call struct {
	*mock.Call
}

// ZRangeArgsWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - z ZRangeArgs
func (_e *MockSortedSetCmdable_Expecter) ZRangeArgsWithScores(ctx interface{}, z interface{}) *MockSortedSetCmdable_ZRangeArgsWithScores_Call {
	return &MockSortedSetCmdable_ZRangeArgsWithScores_Call{Call: _e.mock.On("ZRangeArgsWithScores", ctx, z)}
}

func (_c *MockSortedSetCmdable_ZRangeArgsWithScores_Call) Run(run func(ctx context.Context, z ZRangeArgs)) *MockSortedSetCmdable_ZRangeArgsWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZRangeArgs))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeArgsWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZRangeArgsWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeArgsWithScores_Call) RunAndReturn(run func(context.Context, ZRangeArgs) *ZSliceCmd) *MockSortedSetCmdable_ZRangeArgsWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *MockSortedSetCmdable) ZRangeByLex(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeByLex")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByLex'
type MockSortedSetCmdable_ZRangeByLex_Call struct {
	*mock.Call
}

// ZRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockSortedSetCmdable_Expecter) ZRangeByLex(ctx interface{}, key interface{}, opt interface{}) *MockSortedSetCmdable_ZRangeByLex_Call {
	return &MockSortedSetCmdable_ZRangeByLex_Call{Call: _e.mock.On("ZRangeByLex", ctx, key, opt)}
}

func (_c *MockSortedSetCmdable_ZRangeByLex_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockSortedSetCmdable_ZRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeByLex_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeByLex_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockSortedSetCmdable_ZRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *MockSortedSetCmdable) ZRangeByScore(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeByScore")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByScore'
type MockSortedSetCmdable_ZRangeByScore_Call struct {
	*mock.Call
}

// ZRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockSortedSetCmdable_Expecter) ZRangeByScore(ctx interface{}, key interface{}, opt interface{}) *MockSortedSetCmdable_ZRangeByScore_Call {
	return &MockSortedSetCmdable_ZRangeByScore_Call{Call: _e.mock.On("ZRangeByScore", ctx, key, opt)}
}

func (_c *MockSortedSetCmdable_ZRangeByScore_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockSortedSetCmdable_ZRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeByScore_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeByScore_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockSortedSetCmdable_ZRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *MockSortedSetCmdable) ZRangeByScoreWithScores(ctx context.Context, key string, opt *ZRangeBy) *ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeByScoreWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeByScoreWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByScoreWithScores'
type MockSortedSetCmdable_ZRangeByScoreWithScores_Call struct {
	*mock.Call
}

// ZRangeByScoreWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockSortedSetCmdable_Expecter) ZRangeByScoreWithScores(ctx interface{}, key interface{}, opt interface{}) *MockSortedSetCmdable_ZRangeByScoreWithScores_Call {
	return &MockSortedSetCmdable_ZRangeByScoreWithScores_Call{Call: _e.mock.On("ZRangeByScoreWithScores", ctx, key, opt)}
}

func (_c *MockSortedSetCmdable_ZRangeByScoreWithScores_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockSortedSetCmdable_ZRangeByScoreWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeByScoreWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZRangeByScoreWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeByScoreWithScores_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *ZSliceCmd) *MockSortedSetCmdable_ZRangeByScoreWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeStore provides a mock function with given fields: ctx, dst, z
func (_m *MockSortedSetCmdable) ZRangeStore(ctx context.Context, dst string, z ZRangeArgs) *IntCmd {
	ret := _m.Called(ctx, dst, z)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ZRangeArgs) *IntCmd); ok {
		r0 = rf(ctx, dst, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeStore'
type MockSortedSetCmdable_ZRangeStore_Call struct {
	*mock.Call
}

// ZRangeStore is a helper method to define mock.On call
//   - ctx context.Context
//   - dst string
//   - z ZRangeArgs
func (_e *MockSortedSetCmdable_Expecter) ZRangeStore(ctx interface{}, dst interface{}, z interface{}) *MockSortedSetCmdable_ZRangeStore_Call {
	return &MockSortedSetCmdable_ZRangeStore_Call{Call: _e.mock.On("ZRangeStore", ctx, dst, z)}
}

func (_c *MockSortedSetCmdable_ZRangeStore_Call) Run(run func(ctx context.Context, dst string, z ZRangeArgs)) *MockSortedSetCmdable_ZRangeStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ZRangeArgs))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeStore_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRangeStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeStore_Call) RunAndReturn(run func(context.Context, string, ZRangeArgs) *IntCmd) *MockSortedSetCmdable_ZRangeStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *MockSortedSetCmdable) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeWithScores'
type MockSortedSetCmdable_ZRangeWithScores_Call struct {
	*mock.Call
}

// ZRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockSortedSetCmdable_Expecter) ZRangeWithScores(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockSortedSetCmdable_ZRangeWithScores_Call {
	return &MockSortedSetCmdable_ZRangeWithScores_Call{Call: _e.mock.On("ZRangeWithScores", ctx, key, start, stop)}
}

func (_c *MockSortedSetCmdable_ZRangeWithScores_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockSortedSetCmdable_ZRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZRangeWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64, int64) *ZSliceCmd) *MockSortedSetCmdable_ZRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRank provides a mock function with given fields: ctx, key, member
func (_m *MockSortedSetCmdable) ZRank(ctx context.Context, key string, member string) *IntCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRank")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRank'
type MockSortedSetCmdable_ZRank_Call struct {
	*mock.Call
}

// ZRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockSortedSetCmdable_Expecter) ZRank(ctx interface{}, key interface{}, member interface{}) *MockSortedSetCmdable_ZRank_Call {
	return &MockSortedSetCmdable_ZRank_Call{Call: _e.mock.On("ZRank", ctx, key, member)}
}

func (_c *MockSortedSetCmdable_ZRank_Call) Run(run func(ctx context.Context, key string, member string)) *MockSortedSetCmdable_ZRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRank_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRank_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockSortedSetCmdable_ZRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRankWithScore provides a mock function with given fields: ctx, key, member
func (_m *MockSortedSetCmdable) ZRankWithScore(ctx context.Context, key string, member string) *RankWithScoreCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRankWithScore")
	}

	var r0 *RankWithScoreCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *RankWithScoreCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RankWithScoreCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRankWithScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRankWithScore'
type MockSortedSetCmdable_ZRankWithScore_Call struct {
	*mock.Call
}

// ZRankWithScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockSortedSetCmdable_Expecter) ZRankWithScore(ctx interface{}, key interface{}, member interface{}) *MockSortedSetCmdable_ZRankWithScore_Call {
	return &MockSortedSetCmdable_ZRankWithScore_Call{Call: _e.mock.On("ZRankWithScore", ctx, key, member)}
}

func (_c *MockSortedSetCmdable_ZRankWithScore_Call) Run(run func(ctx context.Context, key string, member string)) *MockSortedSetCmdable_ZRankWithScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRankWithScore_Call) Return(_a0 *RankWithScoreCmd) *MockSortedSetCmdable_ZRankWithScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRankWithScore_Call) RunAndReturn(run func(context.Context, string, string) *RankWithScoreCmd) *MockSortedSetCmdable_ZRankWithScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRem provides a mock function with given fields: ctx, key, members
func (_m *MockSortedSetCmdable) ZRem(ctx context.Context, key string, members ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZRem")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRem'
type MockSortedSetCmdable_ZRem_Call struct {
	*mock.Call
}

// ZRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *MockSortedSetCmdable_Expecter) ZRem(ctx interface{}, key interface{}, members ...interface{}) *MockSortedSetCmdable_ZRem_Call {
	return &MockSortedSetCmdable_ZRem_Call{Call: _e.mock.On("ZRem",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockSortedSetCmdable_ZRem_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *MockSortedSetCmdable_ZRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRem_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRem_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockSortedSetCmdable_ZRem_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByLex provides a mock function with given fields: ctx, key, min, max
func (_m *MockSortedSetCmdable) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZRemRangeByLex")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRemRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByLex'
type MockSortedSetCmdable_ZRemRangeByLex_Call struct {
	*mock.Call
}

// ZRemRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockSortedSetCmdable_Expecter) ZRemRangeByLex(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockSortedSetCmdable_ZRemRangeByLex_Call {
	return &MockSortedSetCmdable_ZRemRangeByLex_Call{Call: _e.mock.On("ZRemRangeByLex", ctx, key, min, max)}
}

func (_c *MockSortedSetCmdable_ZRemRangeByLex_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockSortedSetCmdable_ZRemRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRemRangeByLex_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRemRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRemRangeByLex_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockSortedSetCmdable_ZRemRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByRank provides a mock function with given fields: ctx, key, start, stop
func (_m *MockSortedSetCmdable) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *IntCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRemRangeByRank")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *IntCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRemRangeByRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByRank'
type MockSortedSetCmdable_ZRemRangeByRank_Call struct {
	*mock.Call
}

// ZRemRangeByRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockSortedSetCmdable_Expecter) ZRemRangeByRank(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockSortedSetCmdable_ZRemRangeByRank_Call {
	return &MockSortedSetCmdable_ZRemRangeByRank_Call{Call: _e.mock.On("ZRemRangeByRank", ctx, key, start, stop)}
}

func (_c *MockSortedSetCmdable_ZRemRangeByRank_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockSortedSetCmdable_ZRemRangeByRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRemRangeByRank_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRemRangeByRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRemRangeByRank_Call) RunAndReturn(run func(context.Context, string, int64, int64) *IntCmd) *MockSortedSetCmdable_ZRemRangeByRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByScore provides a mock function with given fields: ctx, key, min, max
func (_m *MockSortedSetCmdable) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZRemRangeByScore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRemRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByScore'
type MockSortedSetCmdable_ZRemRangeByScore_Call struct {
	*mock.Call
}

// ZRemRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockSortedSetCmdable_Expecter) ZRemRangeByScore(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockSortedSetCmdable_ZRemRangeByScore_Call {
	return &MockSortedSetCmdable_ZRemRangeByScore_Call{Call: _e.mock.On("ZRemRangeByScore", ctx, key, min, max)}
}

func (_c *MockSortedSetCmdable_ZRemRangeByScore_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockSortedSetCmdable_ZRemRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRemRangeByScore_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRemRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRemRangeByScore_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockSortedSetCmdable_ZRemRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRange provides a mock function with given fields: ctx, key, start, stop
func (_m *MockSortedSetCmdable) ZRevRange(ctx context.Context, key string, start int64, stop int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRange")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRange'
type MockSortedSetCmdable_ZRevRange_Call struct {
	*mock.Call
}

// ZRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockSortedSetCmdable_Expecter) ZRevRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockSortedSetCmdable_ZRevRange_Call {
	return &MockSortedSetCmdable_ZRevRange_Call{Call: _e.mock.On("ZRevRange", ctx, key, start, stop)}
}

func (_c *MockSortedSetCmdable_ZRevRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockSortedSetCmdable_ZRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRange_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StringSliceCmd) *MockSortedSetCmdable_ZRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *MockSortedSetCmdable) ZRevRangeByLex(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeByLex")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByLex'
type MockSortedSetCmdable_ZRevRangeByLex_Call struct {
	*mock.Call
}

// ZRevRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockSortedSetCmdable_Expecter) ZRevRangeByLex(ctx interface{}, key interface{}, opt interface{}) *MockSortedSetCmdable_ZRevRangeByLex_Call {
	return &MockSortedSetCmdable_ZRevRangeByLex_Call{Call: _e.mock.On("ZRevRangeByLex", ctx, key, opt)}
}

func (_c *MockSortedSetCmdable_ZRevRangeByLex_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockSortedSetCmdable_ZRevRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeByLex_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRevRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeByLex_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockSortedSetCmdable_ZRevRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *MockSortedSetCmdable) ZRevRangeByScore(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeByScore")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByScore'
type MockSortedSetCmdable_ZRevRangeByScore_Call struct {
	*mock.Call
}

// ZRevRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockSortedSetCmdable_Expecter) ZRevRangeByScore(ctx interface{}, key interface{}, opt interface{}) *MockSortedSetCmdable_ZRevRangeByScore_Call {
	return &MockSortedSetCmdable_ZRevRangeByScore_Call{Call: _e.mock.On("ZRevRangeByScore", ctx, key, opt)}
}

func (_c *MockSortedSetCmdable_ZRevRangeByScore_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockSortedSetCmdable_ZRevRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeByScore_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZRevRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeByScore_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockSortedSetCmdable_ZRevRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *MockSortedSetCmdable) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *ZRangeBy) *ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeByScoreWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByScoreWithScores'
type MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call struct {
	*mock.Call
}

// ZRevRangeByScoreWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockSortedSetCmdable_Expecter) ZRevRangeByScoreWithScores(ctx interface{}, key interface{}, opt interface{}) *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call {
	return &MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call{Call: _e.mock.On("ZRevRangeByScoreWithScores", ctx, key, opt)}
}

func (_c *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *ZSliceCmd) *MockSortedSetCmdable_ZRevRangeByScoreWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *MockSortedSetCmdable) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeWithScores'
type MockSortedSetCmdable_ZRevRangeWithScores_Call struct {
	*mock.Call
}

// ZRevRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockSortedSetCmdable_Expecter) ZRevRangeWithScores(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockSortedSetCmdable_ZRevRangeWithScores_Call {
	return &MockSortedSetCmdable_ZRevRangeWithScores_Call{Call: _e.mock.On("ZRevRangeWithScores", ctx, key, start, stop)}
}

func (_c *MockSortedSetCmdable_ZRevRangeWithScores_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockSortedSetCmdable_ZRevRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZRevRangeWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64, int64) *ZSliceCmd) *MockSortedSetCmdable_ZRevRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRank provides a mock function with given fields: ctx, key, member
func (_m *MockSortedSetCmdable) ZRevRank(ctx context.Context, key string, member string) *IntCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRank")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRank'
type MockSortedSetCmdable_ZRevRank_Call struct {
	*mock.Call
}

// ZRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockSortedSetCmdable_Expecter) ZRevRank(ctx interface{}, key interface{}, member interface{}) *MockSortedSetCmdable_ZRevRank_Call {
	return &MockSortedSetCmdable_ZRevRank_Call{Call: _e.mock.On("ZRevRank", ctx, key, member)}
}

func (_c *MockSortedSetCmdable_ZRevRank_Call) Run(run func(ctx context.Context, key string, member string)) *MockSortedSetCmdable_ZRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRank_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRank_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockSortedSetCmdable_ZRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRankWithScore provides a mock function with given fields: ctx, key, member
func (_m *MockSortedSetCmdable) ZRevRankWithScore(ctx context.Context, key string, member string) *RankWithScoreCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRankWithScore")
	}

	var r0 *RankWithScoreCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *RankWithScoreCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RankWithScoreCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZRevRankWithScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRankWithScore'
type MockSortedSetCmdable_ZRevRankWithScore_Call struct {
	*mock.Call
}

// ZRevRankWithScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockSortedSetCmdable_Expecter) ZRevRankWithScore(ctx interface{}, key interface{}, member interface{}) *MockSortedSetCmdable_ZRevRankWithScore_Call {
	return &MockSortedSetCmdable_ZRevRankWithScore_Call{Call: _e.mock.On("ZRevRankWithScore", ctx, key, member)}
}

func (_c *MockSortedSetCmdable_ZRevRankWithScore_Call) Run(run func(ctx context.Context, key string, member string)) *MockSortedSetCmdable_ZRevRankWithScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRankWithScore_Call) Return(_a0 *RankWithScoreCmd) *MockSortedSetCmdable_ZRevRankWithScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZRevRankWithScore_Call) RunAndReturn(run func(context.Context, string, string) *RankWithScoreCmd) *MockSortedSetCmdable_ZRevRankWithScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *MockSortedSetCmdable) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for ZScan")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZScan'
type MockSortedSetCmdable_ZScan_Call struct {
	*mock.Call
}

// ZScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *MockSortedSetCmdable_Expecter) ZScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *MockSortedSetCmdable_ZScan_Call {
	return &MockSortedSetCmdable_ZScan_Call{Call: _e.mock.On("ZScan", ctx, key, cursor, match, count)}
}

func (_c *MockSortedSetCmdable_ZScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *MockSortedSetCmdable_ZScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZScan_Call) Return(_a0 *ScanCmd) *MockSortedSetCmdable_ZScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *ScanCmd) *MockSortedSetCmdable_ZScan_Call {
	_c.Call.Return(run)
	return _c
}

// ZScore provides a mock function with given fields: ctx, key, member
func (_m *MockSortedSetCmdable) ZScore(ctx context.Context, key string, member string) *FloatCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZScore")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZScore'
type MockSortedSetCmdable_ZScore_Call struct {
	*mock.Call
}

// ZScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockSortedSetCmdable_Expecter) ZScore(ctx interface{}, key interface{}, member interface{}) *MockSortedSetCmdable_ZScore_Call {
	return &MockSortedSetCmdable_ZScore_Call{Call: _e.mock.On("ZScore", ctx, key, member)}
}

func (_c *MockSortedSetCmdable_ZScore_Call) Run(run func(ctx context.Context, key string, member string)) *MockSortedSetCmdable_ZScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZScore_Call) Return(_a0 *FloatCmd) *MockSortedSetCmdable_ZScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZScore_Call) RunAndReturn(run func(context.Context, string, string) *FloatCmd) *MockSortedSetCmdable_ZScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnion provides a mock function with given fields: ctx, store
func (_m *MockSortedSetCmdable) ZUnion(ctx context.Context, store ZStore) *StringSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZUnion")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZStore) *StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZUnion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnion'
type MockSortedSetCmdable_ZUnion_Call struct {
	*mock.Call
}

// ZUnion is a helper method to define mock.On call
//   - ctx context.Context
//   - store ZStore
func (_e *MockSortedSetCmdable_Expecter) ZUnion(ctx interface{}, store interface{}) *MockSortedSetCmdable_ZUnion_Call {
	return &MockSortedSetCmdable_ZUnion_Call{Call: _e.mock.On("ZUnion", ctx, store)}
}

func (_c *MockSortedSetCmdable_ZUnion_Call) Run(run func(ctx context.Context, store ZStore)) *MockSortedSetCmdable_ZUnion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZStore))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZUnion_Call) Return(_a0 *StringSliceCmd) *MockSortedSetCmdable_ZUnion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZUnion_Call) RunAndReturn(run func(context.Context, ZStore) *StringSliceCmd) *MockSortedSetCmdable_ZUnion_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnionStore provides a mock function with given fields: ctx, dest, store
func (_m *MockSortedSetCmdable) ZUnionStore(ctx context.Context, dest string, store *ZStore) *IntCmd {
	ret := _m.Called(ctx, dest, store)

	if len(ret) == 0 {
		panic("no return value specified for ZUnionStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZStore) *IntCmd); ok {
		r0 = rf(ctx, dest, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZUnionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnionStore'
type MockSortedSetCmdable_ZUnionStore_Call struct {
	*mock.Call
}

// ZUnionStore is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
//   - store *ZStore
func (_e *MockSortedSetCmdable_Expecter) ZUnionStore(ctx interface{}, dest interface{}, store interface{}) *MockSortedSetCmdable_ZUnionStore_Call {
	return &MockSortedSetCmdable_ZUnionStore_Call{Call: _e.mock.On("ZUnionStore", ctx, dest, store)}
}

func (_c *MockSortedSetCmdable_ZUnionStore_Call) Run(run func(ctx context.Context, dest string, store *ZStore)) *MockSortedSetCmdable_ZUnionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZStore))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZUnionStore_Call) Return(_a0 *IntCmd) *MockSortedSetCmdable_ZUnionStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZUnionStore_Call) RunAndReturn(run func(context.Context, string, *ZStore) *IntCmd) *MockSortedSetCmdable_ZUnionStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnionWithScores provides a mock function with given fields: ctx, store
func (_m *MockSortedSetCmdable) ZUnionWithScores(ctx context.Context, store ZStore) *ZSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZUnionWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZStore) *ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockSortedSetCmdable_ZUnionWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnionWithScores'
type MockSortedSetCmdable_ZUnionWithScores_Call struct {
	*mock.Call
}

// ZUnionWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - store ZStore
func (_e *MockSortedSetCmdable_Expecter) ZUnionWithScores(ctx interface{}, store interface{}) *MockSortedSetCmdable_ZUnionWithScores_Call {
	return &MockSortedSetCmdable_ZUnionWithScores_Call{Call: _e.mock.On("ZUnionWithScores", ctx, store)}
}

func (_c *MockSortedSetCmdable_ZUnionWithScores_Call) Run(run func(ctx context.Context, store ZStore)) *MockSortedSetCmdable_ZUnionWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZStore))
	})
	return _c
}

func (_c *MockSortedSetCmdable_ZUnionWithScores_Call) Return(_a0 *ZSliceCmd) *MockSortedSetCmdable_ZUnionWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSortedSetCmdable_ZUnionWithScores_Call) RunAndReturn(run func(context.Context, ZStore) *ZSliceCmd) *MockSortedSetCmdable_ZUnionWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSortedSetCmdable creates a new instance of MockSortedSetCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSortedSetCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSortedSetCmdable {
	mock := &MockSortedSetCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
