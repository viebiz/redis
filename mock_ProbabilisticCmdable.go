// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProbabilisticCmdable is an autogenerated mock type for the ProbabilisticCmdable type
type MockProbabilisticCmdable struct {
	mock.Mock
}

type MockProbabilisticCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProbabilisticCmdable) EXPECT() *MockProbabilisticCmdable_Expecter {
	return &MockProbabilisticCmdable_Expecter{mock: &_m.Mock}
}

// BFAdd provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) BFAdd(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for BFAdd")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFAdd'
type MockProbabilisticCmdable_BFAdd_Call struct {
	*mock.Call
}

// BFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) BFAdd(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_BFAdd_Call {
	return &MockProbabilisticCmdable_BFAdd_Call{Call: _e.mock.On("BFAdd", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_BFAdd_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_BFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFAdd_Call) Return(_a0 *BoolCmd) *MockProbabilisticCmdable_BFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFAdd_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockProbabilisticCmdable_BFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BFCard provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFCard(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFCard'
type MockProbabilisticCmdable_BFCard_Call struct {
	*mock.Call
}

// BFCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFCard(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFCard_Call {
	return &MockProbabilisticCmdable_BFCard_Call{Call: _e.mock.On("BFCard", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFCard_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFCard_Call) Return(_a0 *IntCmd) *MockProbabilisticCmdable_BFCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFCard_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockProbabilisticCmdable_BFCard_Call {
	_c.Call.Return(run)
	return _c
}

// BFExists provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) BFExists(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for BFExists")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFExists'
type MockProbabilisticCmdable_BFExists_Call struct {
	*mock.Call
}

// BFExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) BFExists(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_BFExists_Call {
	return &MockProbabilisticCmdable_BFExists_Call{Call: _e.mock.On("BFExists", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_BFExists_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_BFExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFExists_Call) Return(_a0 *BoolCmd) *MockProbabilisticCmdable_BFExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFExists_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockProbabilisticCmdable_BFExists_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfo provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFInfo(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfo")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfo'
type MockProbabilisticCmdable_BFInfo_Call struct {
	*mock.Call
}

// BFInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFInfo(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFInfo_Call {
	return &MockProbabilisticCmdable_BFInfo_Call{Call: _e.mock.On("BFInfo", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFInfo_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfo_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfo_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfo_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoArg provides a mock function with given fields: ctx, key, option
func (_m *MockProbabilisticCmdable) BFInfoArg(ctx context.Context, key string, option string) *BFInfoCmd {
	ret := _m.Called(ctx, key, option)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoArg")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfoArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoArg'
type MockProbabilisticCmdable_BFInfoArg_Call struct {
	*mock.Call
}

// BFInfoArg is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - option string
func (_e *MockProbabilisticCmdable_Expecter) BFInfoArg(ctx interface{}, key interface{}, option interface{}) *MockProbabilisticCmdable_BFInfoArg_Call {
	return &MockProbabilisticCmdable_BFInfoArg_Call{Call: _e.mock.On("BFInfoArg", ctx, key, option)}
}

func (_c *MockProbabilisticCmdable_BFInfoArg_Call) Run(run func(ctx context.Context, key string, option string)) *MockProbabilisticCmdable_BFInfoArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoArg_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfoArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoArg_Call) RunAndReturn(run func(context.Context, string, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfoArg_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoCapacity provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFInfoCapacity(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoCapacity")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfoCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoCapacity'
type MockProbabilisticCmdable_BFInfoCapacity_Call struct {
	*mock.Call
}

// BFInfoCapacity is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFInfoCapacity(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFInfoCapacity_Call {
	return &MockProbabilisticCmdable_BFInfoCapacity_Call{Call: _e.mock.On("BFInfoCapacity", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFInfoCapacity_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFInfoCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoCapacity_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfoCapacity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoCapacity_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfoCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoExpansion provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFInfoExpansion(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoExpansion")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfoExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoExpansion'
type MockProbabilisticCmdable_BFInfoExpansion_Call struct {
	*mock.Call
}

// BFInfoExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFInfoExpansion(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFInfoExpansion_Call {
	return &MockProbabilisticCmdable_BFInfoExpansion_Call{Call: _e.mock.On("BFInfoExpansion", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFInfoExpansion_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFInfoExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoExpansion_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfoExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoExpansion_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfoExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoFilters provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFInfoFilters(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoFilters")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfoFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoFilters'
type MockProbabilisticCmdable_BFInfoFilters_Call struct {
	*mock.Call
}

// BFInfoFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFInfoFilters(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFInfoFilters_Call {
	return &MockProbabilisticCmdable_BFInfoFilters_Call{Call: _e.mock.On("BFInfoFilters", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFInfoFilters_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFInfoFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoFilters_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfoFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoFilters_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfoFilters_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoItems provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFInfoItems(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoItems")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfoItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoItems'
type MockProbabilisticCmdable_BFInfoItems_Call struct {
	*mock.Call
}

// BFInfoItems is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFInfoItems(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFInfoItems_Call {
	return &MockProbabilisticCmdable_BFInfoItems_Call{Call: _e.mock.On("BFInfoItems", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFInfoItems_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFInfoItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoItems_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfoItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoItems_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfoItems_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoSize provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) BFInfoSize(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoSize")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInfoSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoSize'
type MockProbabilisticCmdable_BFInfoSize_Call struct {
	*mock.Call
}

// BFInfoSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) BFInfoSize(ctx interface{}, key interface{}) *MockProbabilisticCmdable_BFInfoSize_Call {
	return &MockProbabilisticCmdable_BFInfoSize_Call{Call: _e.mock.On("BFInfoSize", ctx, key)}
}

func (_c *MockProbabilisticCmdable_BFInfoSize_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_BFInfoSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoSize_Call) Return(_a0 *BFInfoCmd) *MockProbabilisticCmdable_BFInfoSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInfoSize_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockProbabilisticCmdable_BFInfoSize_Call {
	_c.Call.Return(run)
	return _c
}

// BFInsert provides a mock function with given fields: ctx, key, options, elements
func (_m *MockProbabilisticCmdable) BFInsert(ctx context.Context, key string, options *BFInsertOptions, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BFInsert")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *BFInsertOptions, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInsert'
type MockProbabilisticCmdable_BFInsert_Call struct {
	*mock.Call
}

// BFInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *BFInsertOptions
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) BFInsert(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *MockProbabilisticCmdable_BFInsert_Call {
	return &MockProbabilisticCmdable_BFInsert_Call{Call: _e.mock.On("BFInsert",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_BFInsert_Call) Run(run func(ctx context.Context, key string, options *BFInsertOptions, elements ...interface{})) *MockProbabilisticCmdable_BFInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*BFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFInsert_Call) Return(_a0 *BoolSliceCmd) *MockProbabilisticCmdable_BFInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFInsert_Call) RunAndReturn(run func(context.Context, string, *BFInsertOptions, ...interface{}) *BoolSliceCmd) *MockProbabilisticCmdable_BFInsert_Call {
	_c.Call.Return(run)
	return _c
}

// BFLoadChunk provides a mock function with given fields: ctx, key, iterator, data
func (_m *MockProbabilisticCmdable) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, iterator, data)

	if len(ret) == 0 {
		panic("no return value specified for BFLoadChunk")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, iterator, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFLoadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFLoadChunk'
type MockProbabilisticCmdable_BFLoadChunk_Call struct {
	*mock.Call
}

// BFLoadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
//   - data interface{}
func (_e *MockProbabilisticCmdable_Expecter) BFLoadChunk(ctx interface{}, key interface{}, iterator interface{}, data interface{}) *MockProbabilisticCmdable_BFLoadChunk_Call {
	return &MockProbabilisticCmdable_BFLoadChunk_Call{Call: _e.mock.On("BFLoadChunk", ctx, key, iterator, data)}
}

func (_c *MockProbabilisticCmdable_BFLoadChunk_Call) Run(run func(ctx context.Context, key string, iterator int64, data interface{})) *MockProbabilisticCmdable_BFLoadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFLoadChunk_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_BFLoadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFLoadChunk_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *StatusCmd) *MockProbabilisticCmdable_BFLoadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// BFMAdd provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) BFMAdd(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BFMAdd")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFMAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFMAdd'
type MockProbabilisticCmdable_BFMAdd_Call struct {
	*mock.Call
}

// BFMAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) BFMAdd(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_BFMAdd_Call {
	return &MockProbabilisticCmdable_BFMAdd_Call{Call: _e.mock.On("BFMAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_BFMAdd_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_BFMAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFMAdd_Call) Return(_a0 *BoolSliceCmd) *MockProbabilisticCmdable_BFMAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFMAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockProbabilisticCmdable_BFMAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BFMExists provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) BFMExists(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BFMExists")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFMExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFMExists'
type MockProbabilisticCmdable_BFMExists_Call struct {
	*mock.Call
}

// BFMExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) BFMExists(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_BFMExists_Call {
	return &MockProbabilisticCmdable_BFMExists_Call{Call: _e.mock.On("BFMExists",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_BFMExists_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_BFMExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFMExists_Call) Return(_a0 *BoolSliceCmd) *MockProbabilisticCmdable_BFMExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFMExists_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockProbabilisticCmdable_BFMExists_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserve provides a mock function with given fields: ctx, key, errorRate, capacity
func (_m *MockProbabilisticCmdable) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity)

	if len(ret) == 0 {
		panic("no return value specified for BFReserve")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserve'
type MockProbabilisticCmdable_BFReserve_Call struct {
	*mock.Call
}

// BFReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
func (_e *MockProbabilisticCmdable_Expecter) BFReserve(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}) *MockProbabilisticCmdable_BFReserve_Call {
	return &MockProbabilisticCmdable_BFReserve_Call{Call: _e.mock.On("BFReserve", ctx, key, errorRate, capacity)}
}

func (_c *MockProbabilisticCmdable_BFReserve_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64)) *MockProbabilisticCmdable_BFReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserve_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_BFReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserve_Call) RunAndReturn(run func(context.Context, string, float64, int64) *StatusCmd) *MockProbabilisticCmdable_BFReserve_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveExpansion provides a mock function with given fields: ctx, key, errorRate, capacity, expansion
func (_m *MockProbabilisticCmdable) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity, expansion)

	if len(ret) == 0 {
		panic("no return value specified for BFReserveExpansion")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity, expansion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFReserveExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveExpansion'
type MockProbabilisticCmdable_BFReserveExpansion_Call struct {
	*mock.Call
}

// BFReserveExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
//   - expansion int64
func (_e *MockProbabilisticCmdable_Expecter) BFReserveExpansion(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}, expansion interface{}) *MockProbabilisticCmdable_BFReserveExpansion_Call {
	return &MockProbabilisticCmdable_BFReserveExpansion_Call{Call: _e.mock.On("BFReserveExpansion", ctx, key, errorRate, capacity, expansion)}
}

func (_c *MockProbabilisticCmdable_BFReserveExpansion_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64)) *MockProbabilisticCmdable_BFReserveExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserveExpansion_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_BFReserveExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserveExpansion_Call) RunAndReturn(run func(context.Context, string, float64, int64, int64) *StatusCmd) *MockProbabilisticCmdable_BFReserveExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveNonScaling provides a mock function with given fields: ctx, key, errorRate, capacity
func (_m *MockProbabilisticCmdable) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity)

	if len(ret) == 0 {
		panic("no return value specified for BFReserveNonScaling")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFReserveNonScaling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveNonScaling'
type MockProbabilisticCmdable_BFReserveNonScaling_Call struct {
	*mock.Call
}

// BFReserveNonScaling is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
func (_e *MockProbabilisticCmdable_Expecter) BFReserveNonScaling(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}) *MockProbabilisticCmdable_BFReserveNonScaling_Call {
	return &MockProbabilisticCmdable_BFReserveNonScaling_Call{Call: _e.mock.On("BFReserveNonScaling", ctx, key, errorRate, capacity)}
}

func (_c *MockProbabilisticCmdable_BFReserveNonScaling_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64)) *MockProbabilisticCmdable_BFReserveNonScaling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserveNonScaling_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_BFReserveNonScaling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserveNonScaling_Call) RunAndReturn(run func(context.Context, string, float64, int64) *StatusCmd) *MockProbabilisticCmdable_BFReserveNonScaling_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockProbabilisticCmdable) BFReserveWithArgs(ctx context.Context, key string, options *BFReserveOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for BFReserveWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *BFReserveOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFReserveWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveWithArgs'
type MockProbabilisticCmdable_BFReserveWithArgs_Call struct {
	*mock.Call
}

// BFReserveWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *BFReserveOptions
func (_e *MockProbabilisticCmdable_Expecter) BFReserveWithArgs(ctx interface{}, key interface{}, options interface{}) *MockProbabilisticCmdable_BFReserveWithArgs_Call {
	return &MockProbabilisticCmdable_BFReserveWithArgs_Call{Call: _e.mock.On("BFReserveWithArgs", ctx, key, options)}
}

func (_c *MockProbabilisticCmdable_BFReserveWithArgs_Call) Run(run func(ctx context.Context, key string, options *BFReserveOptions)) *MockProbabilisticCmdable_BFReserveWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*BFReserveOptions))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserveWithArgs_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_BFReserveWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFReserveWithArgs_Call) RunAndReturn(run func(context.Context, string, *BFReserveOptions) *StatusCmd) *MockProbabilisticCmdable_BFReserveWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// BFScanDump provides a mock function with given fields: ctx, key, iterator
func (_m *MockProbabilisticCmdable) BFScanDump(ctx context.Context, key string, iterator int64) *ScanDumpCmd {
	ret := _m.Called(ctx, key, iterator)

	if len(ret) == 0 {
		panic("no return value specified for BFScanDump")
	}

	var r0 *ScanDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *ScanDumpCmd); ok {
		r0 = rf(ctx, key, iterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanDumpCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_BFScanDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFScanDump'
type MockProbabilisticCmdable_BFScanDump_Call struct {
	*mock.Call
}

// BFScanDump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
func (_e *MockProbabilisticCmdable_Expecter) BFScanDump(ctx interface{}, key interface{}, iterator interface{}) *MockProbabilisticCmdable_BFScanDump_Call {
	return &MockProbabilisticCmdable_BFScanDump_Call{Call: _e.mock.On("BFScanDump", ctx, key, iterator)}
}

func (_c *MockProbabilisticCmdable_BFScanDump_Call) Run(run func(ctx context.Context, key string, iterator int64)) *MockProbabilisticCmdable_BFScanDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_BFScanDump_Call) Return(_a0 *ScanDumpCmd) *MockProbabilisticCmdable_BFScanDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_BFScanDump_Call) RunAndReturn(run func(context.Context, string, int64) *ScanDumpCmd) *MockProbabilisticCmdable_BFScanDump_Call {
	_c.Call.Return(run)
	return _c
}

// CFAdd provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) CFAdd(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFAdd")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFAdd'
type MockProbabilisticCmdable_CFAdd_Call struct {
	*mock.Call
}

// CFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFAdd(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_CFAdd_Call {
	return &MockProbabilisticCmdable_CFAdd_Call{Call: _e.mock.On("CFAdd", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_CFAdd_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_CFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFAdd_Call) Return(_a0 *BoolCmd) *MockProbabilisticCmdable_CFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFAdd_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockProbabilisticCmdable_CFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// CFAddNX provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) CFAddNX(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFAddNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFAddNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFAddNX'
type MockProbabilisticCmdable_CFAddNX_Call struct {
	*mock.Call
}

// CFAddNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFAddNX(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_CFAddNX_Call {
	return &MockProbabilisticCmdable_CFAddNX_Call{Call: _e.mock.On("CFAddNX", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_CFAddNX_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_CFAddNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFAddNX_Call) Return(_a0 *BoolCmd) *MockProbabilisticCmdable_CFAddNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFAddNX_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockProbabilisticCmdable_CFAddNX_Call {
	_c.Call.Return(run)
	return _c
}

// CFCount provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) CFCount(ctx context.Context, key string, element interface{}) *IntCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFCount'
type MockProbabilisticCmdable_CFCount_Call struct {
	*mock.Call
}

// CFCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFCount(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_CFCount_Call {
	return &MockProbabilisticCmdable_CFCount_Call{Call: _e.mock.On("CFCount", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_CFCount_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_CFCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFCount_Call) Return(_a0 *IntCmd) *MockProbabilisticCmdable_CFCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFCount_Call) RunAndReturn(run func(context.Context, string, interface{}) *IntCmd) *MockProbabilisticCmdable_CFCount_Call {
	_c.Call.Return(run)
	return _c
}

// CFDel provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) CFDel(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFDel")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFDel'
type MockProbabilisticCmdable_CFDel_Call struct {
	*mock.Call
}

// CFDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFDel(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_CFDel_Call {
	return &MockProbabilisticCmdable_CFDel_Call{Call: _e.mock.On("CFDel", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_CFDel_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_CFDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFDel_Call) Return(_a0 *BoolCmd) *MockProbabilisticCmdable_CFDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFDel_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockProbabilisticCmdable_CFDel_Call {
	_c.Call.Return(run)
	return _c
}

// CFExists provides a mock function with given fields: ctx, key, element
func (_m *MockProbabilisticCmdable) CFExists(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFExists")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFExists'
type MockProbabilisticCmdable_CFExists_Call struct {
	*mock.Call
}

// CFExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFExists(ctx interface{}, key interface{}, element interface{}) *MockProbabilisticCmdable_CFExists_Call {
	return &MockProbabilisticCmdable_CFExists_Call{Call: _e.mock.On("CFExists", ctx, key, element)}
}

func (_c *MockProbabilisticCmdable_CFExists_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockProbabilisticCmdable_CFExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFExists_Call) Return(_a0 *BoolCmd) *MockProbabilisticCmdable_CFExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFExists_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockProbabilisticCmdable_CFExists_Call {
	_c.Call.Return(run)
	return _c
}

// CFInfo provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) CFInfo(ctx context.Context, key string) *CFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for CFInfo")
	}

	var r0 *CFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *CFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CFInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInfo'
type MockProbabilisticCmdable_CFInfo_Call struct {
	*mock.Call
}

// CFInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) CFInfo(ctx interface{}, key interface{}) *MockProbabilisticCmdable_CFInfo_Call {
	return &MockProbabilisticCmdable_CFInfo_Call{Call: _e.mock.On("CFInfo", ctx, key)}
}

func (_c *MockProbabilisticCmdable_CFInfo_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_CFInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFInfo_Call) Return(_a0 *CFInfoCmd) *MockProbabilisticCmdable_CFInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFInfo_Call) RunAndReturn(run func(context.Context, string) *CFInfoCmd) *MockProbabilisticCmdable_CFInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CFInsert provides a mock function with given fields: ctx, key, options, elements
func (_m *MockProbabilisticCmdable) CFInsert(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CFInsert")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *CFInsertOptions, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInsert'
type MockProbabilisticCmdable_CFInsert_Call struct {
	*mock.Call
}

// CFInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *CFInsertOptions
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFInsert(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *MockProbabilisticCmdable_CFInsert_Call {
	return &MockProbabilisticCmdable_CFInsert_Call{Call: _e.mock.On("CFInsert",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_CFInsert_Call) Run(run func(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{})) *MockProbabilisticCmdable_CFInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*CFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFInsert_Call) Return(_a0 *BoolSliceCmd) *MockProbabilisticCmdable_CFInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFInsert_Call) RunAndReturn(run func(context.Context, string, *CFInsertOptions, ...interface{}) *BoolSliceCmd) *MockProbabilisticCmdable_CFInsert_Call {
	_c.Call.Return(run)
	return _c
}

// CFInsertNX provides a mock function with given fields: ctx, key, options, elements
func (_m *MockProbabilisticCmdable) CFInsertNX(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CFInsertNX")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *CFInsertOptions, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFInsertNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInsertNX'
type MockProbabilisticCmdable_CFInsertNX_Call struct {
	*mock.Call
}

// CFInsertNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *CFInsertOptions
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFInsertNX(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *MockProbabilisticCmdable_CFInsertNX_Call {
	return &MockProbabilisticCmdable_CFInsertNX_Call{Call: _e.mock.On("CFInsertNX",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_CFInsertNX_Call) Run(run func(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{})) *MockProbabilisticCmdable_CFInsertNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*CFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFInsertNX_Call) Return(_a0 *IntSliceCmd) *MockProbabilisticCmdable_CFInsertNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFInsertNX_Call) RunAndReturn(run func(context.Context, string, *CFInsertOptions, ...interface{}) *IntSliceCmd) *MockProbabilisticCmdable_CFInsertNX_Call {
	_c.Call.Return(run)
	return _c
}

// CFLoadChunk provides a mock function with given fields: ctx, key, iterator, data
func (_m *MockProbabilisticCmdable) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, iterator, data)

	if len(ret) == 0 {
		panic("no return value specified for CFLoadChunk")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, iterator, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFLoadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFLoadChunk'
type MockProbabilisticCmdable_CFLoadChunk_Call struct {
	*mock.Call
}

// CFLoadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
//   - data interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFLoadChunk(ctx interface{}, key interface{}, iterator interface{}, data interface{}) *MockProbabilisticCmdable_CFLoadChunk_Call {
	return &MockProbabilisticCmdable_CFLoadChunk_Call{Call: _e.mock.On("CFLoadChunk", ctx, key, iterator, data)}
}

func (_c *MockProbabilisticCmdable_CFLoadChunk_Call) Run(run func(ctx context.Context, key string, iterator int64, data interface{})) *MockProbabilisticCmdable_CFLoadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFLoadChunk_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CFLoadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFLoadChunk_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *StatusCmd) *MockProbabilisticCmdable_CFLoadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// CFMExists provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) CFMExists(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CFMExists")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFMExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFMExists'
type MockProbabilisticCmdable_CFMExists_Call struct {
	*mock.Call
}

// CFMExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) CFMExists(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_CFMExists_Call {
	return &MockProbabilisticCmdable_CFMExists_Call{Call: _e.mock.On("CFMExists",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_CFMExists_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_CFMExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFMExists_Call) Return(_a0 *BoolSliceCmd) *MockProbabilisticCmdable_CFMExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFMExists_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockProbabilisticCmdable_CFMExists_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserve provides a mock function with given fields: ctx, key, capacity
func (_m *MockProbabilisticCmdable) CFReserve(ctx context.Context, key string, capacity int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity)

	if len(ret) == 0 {
		panic("no return value specified for CFReserve")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserve'
type MockProbabilisticCmdable_CFReserve_Call struct {
	*mock.Call
}

// CFReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
func (_e *MockProbabilisticCmdable_Expecter) CFReserve(ctx interface{}, key interface{}, capacity interface{}) *MockProbabilisticCmdable_CFReserve_Call {
	return &MockProbabilisticCmdable_CFReserve_Call{Call: _e.mock.On("CFReserve", ctx, key, capacity)}
}

func (_c *MockProbabilisticCmdable_CFReserve_Call) Run(run func(ctx context.Context, key string, capacity int64)) *MockProbabilisticCmdable_CFReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserve_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CFReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserve_Call) RunAndReturn(run func(context.Context, string, int64) *StatusCmd) *MockProbabilisticCmdable_CFReserve_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveBucketSize provides a mock function with given fields: ctx, key, capacity, bucketsize
func (_m *MockProbabilisticCmdable) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity, bucketsize)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveBucketSize")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity, bucketsize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFReserveBucketSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveBucketSize'
type MockProbabilisticCmdable_CFReserveBucketSize_Call struct {
	*mock.Call
}

// CFReserveBucketSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - bucketsize int64
func (_e *MockProbabilisticCmdable_Expecter) CFReserveBucketSize(ctx interface{}, key interface{}, capacity interface{}, bucketsize interface{}) *MockProbabilisticCmdable_CFReserveBucketSize_Call {
	return &MockProbabilisticCmdable_CFReserveBucketSize_Call{Call: _e.mock.On("CFReserveBucketSize", ctx, key, capacity, bucketsize)}
}

func (_c *MockProbabilisticCmdable_CFReserveBucketSize_Call) Run(run func(ctx context.Context, key string, capacity int64, bucketsize int64)) *MockProbabilisticCmdable_CFReserveBucketSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveBucketSize_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CFReserveBucketSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveBucketSize_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockProbabilisticCmdable_CFReserveBucketSize_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveExpansion provides a mock function with given fields: ctx, key, capacity, expansion
func (_m *MockProbabilisticCmdable) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity, expansion)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveExpansion")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity, expansion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFReserveExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveExpansion'
type MockProbabilisticCmdable_CFReserveExpansion_Call struct {
	*mock.Call
}

// CFReserveExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - expansion int64
func (_e *MockProbabilisticCmdable_Expecter) CFReserveExpansion(ctx interface{}, key interface{}, capacity interface{}, expansion interface{}) *MockProbabilisticCmdable_CFReserveExpansion_Call {
	return &MockProbabilisticCmdable_CFReserveExpansion_Call{Call: _e.mock.On("CFReserveExpansion", ctx, key, capacity, expansion)}
}

func (_c *MockProbabilisticCmdable_CFReserveExpansion_Call) Run(run func(ctx context.Context, key string, capacity int64, expansion int64)) *MockProbabilisticCmdable_CFReserveExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveExpansion_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CFReserveExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveExpansion_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockProbabilisticCmdable_CFReserveExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveMaxIterations provides a mock function with given fields: ctx, key, capacity, maxiterations
func (_m *MockProbabilisticCmdable) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity, maxiterations)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveMaxIterations")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity, maxiterations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFReserveMaxIterations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveMaxIterations'
type MockProbabilisticCmdable_CFReserveMaxIterations_Call struct {
	*mock.Call
}

// CFReserveMaxIterations is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - maxiterations int64
func (_e *MockProbabilisticCmdable_Expecter) CFReserveMaxIterations(ctx interface{}, key interface{}, capacity interface{}, maxiterations interface{}) *MockProbabilisticCmdable_CFReserveMaxIterations_Call {
	return &MockProbabilisticCmdable_CFReserveMaxIterations_Call{Call: _e.mock.On("CFReserveMaxIterations", ctx, key, capacity, maxiterations)}
}

func (_c *MockProbabilisticCmdable_CFReserveMaxIterations_Call) Run(run func(ctx context.Context, key string, capacity int64, maxiterations int64)) *MockProbabilisticCmdable_CFReserveMaxIterations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveMaxIterations_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CFReserveMaxIterations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveMaxIterations_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockProbabilisticCmdable_CFReserveMaxIterations_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockProbabilisticCmdable) CFReserveWithArgs(ctx context.Context, key string, options *CFReserveOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *CFReserveOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFReserveWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveWithArgs'
type MockProbabilisticCmdable_CFReserveWithArgs_Call struct {
	*mock.Call
}

// CFReserveWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *CFReserveOptions
func (_e *MockProbabilisticCmdable_Expecter) CFReserveWithArgs(ctx interface{}, key interface{}, options interface{}) *MockProbabilisticCmdable_CFReserveWithArgs_Call {
	return &MockProbabilisticCmdable_CFReserveWithArgs_Call{Call: _e.mock.On("CFReserveWithArgs", ctx, key, options)}
}

func (_c *MockProbabilisticCmdable_CFReserveWithArgs_Call) Run(run func(ctx context.Context, key string, options *CFReserveOptions)) *MockProbabilisticCmdable_CFReserveWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*CFReserveOptions))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveWithArgs_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CFReserveWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFReserveWithArgs_Call) RunAndReturn(run func(context.Context, string, *CFReserveOptions) *StatusCmd) *MockProbabilisticCmdable_CFReserveWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// CFScanDump provides a mock function with given fields: ctx, key, iterator
func (_m *MockProbabilisticCmdable) CFScanDump(ctx context.Context, key string, iterator int64) *ScanDumpCmd {
	ret := _m.Called(ctx, key, iterator)

	if len(ret) == 0 {
		panic("no return value specified for CFScanDump")
	}

	var r0 *ScanDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *ScanDumpCmd); ok {
		r0 = rf(ctx, key, iterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanDumpCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CFScanDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFScanDump'
type MockProbabilisticCmdable_CFScanDump_Call struct {
	*mock.Call
}

// CFScanDump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
func (_e *MockProbabilisticCmdable_Expecter) CFScanDump(ctx interface{}, key interface{}, iterator interface{}) *MockProbabilisticCmdable_CFScanDump_Call {
	return &MockProbabilisticCmdable_CFScanDump_Call{Call: _e.mock.On("CFScanDump", ctx, key, iterator)}
}

func (_c *MockProbabilisticCmdable_CFScanDump_Call) Run(run func(ctx context.Context, key string, iterator int64)) *MockProbabilisticCmdable_CFScanDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CFScanDump_Call) Return(_a0 *ScanDumpCmd) *MockProbabilisticCmdable_CFScanDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CFScanDump_Call) RunAndReturn(run func(context.Context, string, int64) *ScanDumpCmd) *MockProbabilisticCmdable_CFScanDump_Call {
	_c.Call.Return(run)
	return _c
}

// CMSIncrBy provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CMSIncrBy")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSIncrBy'
type MockProbabilisticCmdable_CMSIncrBy_Call struct {
	*mock.Call
}

// CMSIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) CMSIncrBy(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_CMSIncrBy_Call {
	return &MockProbabilisticCmdable_CMSIncrBy_Call{Call: _e.mock.On("CMSIncrBy",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_CMSIncrBy_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_CMSIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSIncrBy_Call) Return(_a0 *IntSliceCmd) *MockProbabilisticCmdable_CMSIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSIncrBy_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockProbabilisticCmdable_CMSIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInfo provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) CMSInfo(ctx context.Context, key string) *CMSInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for CMSInfo")
	}

	var r0 *CMSInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *CMSInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CMSInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInfo'
type MockProbabilisticCmdable_CMSInfo_Call struct {
	*mock.Call
}

// CMSInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) CMSInfo(ctx interface{}, key interface{}) *MockProbabilisticCmdable_CMSInfo_Call {
	return &MockProbabilisticCmdable_CMSInfo_Call{Call: _e.mock.On("CMSInfo", ctx, key)}
}

func (_c *MockProbabilisticCmdable_CMSInfo_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_CMSInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSInfo_Call) Return(_a0 *CMSInfoCmd) *MockProbabilisticCmdable_CMSInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSInfo_Call) RunAndReturn(run func(context.Context, string) *CMSInfoCmd) *MockProbabilisticCmdable_CMSInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInitByDim provides a mock function with given fields: ctx, key, width, height
func (_m *MockProbabilisticCmdable) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *StatusCmd {
	ret := _m.Called(ctx, key, width, height)

	if len(ret) == 0 {
		panic("no return value specified for CMSInitByDim")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, width, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSInitByDim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInitByDim'
type MockProbabilisticCmdable_CMSInitByDim_Call struct {
	*mock.Call
}

// CMSInitByDim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - width int64
//   - height int64
func (_e *MockProbabilisticCmdable_Expecter) CMSInitByDim(ctx interface{}, key interface{}, width interface{}, height interface{}) *MockProbabilisticCmdable_CMSInitByDim_Call {
	return &MockProbabilisticCmdable_CMSInitByDim_Call{Call: _e.mock.On("CMSInitByDim", ctx, key, width, height)}
}

func (_c *MockProbabilisticCmdable_CMSInitByDim_Call) Run(run func(ctx context.Context, key string, width int64, height int64)) *MockProbabilisticCmdable_CMSInitByDim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSInitByDim_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CMSInitByDim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSInitByDim_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockProbabilisticCmdable_CMSInitByDim_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInitByProb provides a mock function with given fields: ctx, key, errorRate, probability
func (_m *MockProbabilisticCmdable) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, probability)

	if len(ret) == 0 {
		panic("no return value specified for CMSInitByProb")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, probability)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSInitByProb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInitByProb'
type MockProbabilisticCmdable_CMSInitByProb_Call struct {
	*mock.Call
}

// CMSInitByProb is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - probability float64
func (_e *MockProbabilisticCmdable_Expecter) CMSInitByProb(ctx interface{}, key interface{}, errorRate interface{}, probability interface{}) *MockProbabilisticCmdable_CMSInitByProb_Call {
	return &MockProbabilisticCmdable_CMSInitByProb_Call{Call: _e.mock.On("CMSInitByProb", ctx, key, errorRate, probability)}
}

func (_c *MockProbabilisticCmdable_CMSInitByProb_Call) Run(run func(ctx context.Context, key string, errorRate float64, probability float64)) *MockProbabilisticCmdable_CMSInitByProb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSInitByProb_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CMSInitByProb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSInitByProb_Call) RunAndReturn(run func(context.Context, string, float64, float64) *StatusCmd) *MockProbabilisticCmdable_CMSInitByProb_Call {
	_c.Call.Return(run)
	return _c
}

// CMSMerge provides a mock function with given fields: ctx, destKey, sourceKeys
func (_m *MockProbabilisticCmdable) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *StatusCmd {
	_va := make([]interface{}, len(sourceKeys))
	for _i := range sourceKeys {
		_va[_i] = sourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CMSMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *StatusCmd); ok {
		r0 = rf(ctx, destKey, sourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSMerge'
type MockProbabilisticCmdable_CMSMerge_Call struct {
	*mock.Call
}

// CMSMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - sourceKeys ...string
func (_e *MockProbabilisticCmdable_Expecter) CMSMerge(ctx interface{}, destKey interface{}, sourceKeys ...interface{}) *MockProbabilisticCmdable_CMSMerge_Call {
	return &MockProbabilisticCmdable_CMSMerge_Call{Call: _e.mock.On("CMSMerge",
		append([]interface{}{ctx, destKey}, sourceKeys...)...)}
}

func (_c *MockProbabilisticCmdable_CMSMerge_Call) Run(run func(ctx context.Context, destKey string, sourceKeys ...string)) *MockProbabilisticCmdable_CMSMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSMerge_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CMSMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSMerge_Call) RunAndReturn(run func(context.Context, string, ...string) *StatusCmd) *MockProbabilisticCmdable_CMSMerge_Call {
	_c.Call.Return(run)
	return _c
}

// CMSMergeWithWeight provides a mock function with given fields: ctx, destKey, sourceKeys
func (_m *MockProbabilisticCmdable) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *StatusCmd {
	ret := _m.Called(ctx, destKey, sourceKeys)

	if len(ret) == 0 {
		panic("no return value specified for CMSMergeWithWeight")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]int64) *StatusCmd); ok {
		r0 = rf(ctx, destKey, sourceKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSMergeWithWeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSMergeWithWeight'
type MockProbabilisticCmdable_CMSMergeWithWeight_Call struct {
	*mock.Call
}

// CMSMergeWithWeight is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - sourceKeys map[string]int64
func (_e *MockProbabilisticCmdable_Expecter) CMSMergeWithWeight(ctx interface{}, destKey interface{}, sourceKeys interface{}) *MockProbabilisticCmdable_CMSMergeWithWeight_Call {
	return &MockProbabilisticCmdable_CMSMergeWithWeight_Call{Call: _e.mock.On("CMSMergeWithWeight", ctx, destKey, sourceKeys)}
}

func (_c *MockProbabilisticCmdable_CMSMergeWithWeight_Call) Run(run func(ctx context.Context, destKey string, sourceKeys map[string]int64)) *MockProbabilisticCmdable_CMSMergeWithWeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSMergeWithWeight_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_CMSMergeWithWeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSMergeWithWeight_Call) RunAndReturn(run func(context.Context, string, map[string]int64) *StatusCmd) *MockProbabilisticCmdable_CMSMergeWithWeight_Call {
	_c.Call.Return(run)
	return _c
}

// CMSQuery provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) CMSQuery(ctx context.Context, key string, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CMSQuery")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_CMSQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSQuery'
type MockProbabilisticCmdable_CMSQuery_Call struct {
	*mock.Call
}

// CMSQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) CMSQuery(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_CMSQuery_Call {
	return &MockProbabilisticCmdable_CMSQuery_Call{Call: _e.mock.On("CMSQuery",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_CMSQuery_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_CMSQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_CMSQuery_Call) Return(_a0 *IntSliceCmd) *MockProbabilisticCmdable_CMSQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_CMSQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockProbabilisticCmdable_CMSQuery_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestAdd provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TDigestAdd(ctx context.Context, key string, elements ...float64) *StatusCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestAdd")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *StatusCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestAdd'
type MockProbabilisticCmdable_TDigestAdd_Call struct {
	*mock.Call
}

// TDigestAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *MockProbabilisticCmdable_Expecter) TDigestAdd(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TDigestAdd_Call {
	return &MockProbabilisticCmdable_TDigestAdd_Call{Call: _e.mock.On("TDigestAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestAdd_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *MockProbabilisticCmdable_TDigestAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestAdd_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TDigestAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestAdd_Call) RunAndReturn(run func(context.Context, string, ...float64) *StatusCmd) *MockProbabilisticCmdable_TDigestAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestByRank provides a mock function with given fields: ctx, key, rank
func (_m *MockProbabilisticCmdable) TDigestByRank(ctx context.Context, key string, rank ...uint64) *FloatSliceCmd {
	_va := make([]interface{}, len(rank))
	for _i := range rank {
		_va[_i] = rank[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestByRank")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, rank...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestByRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestByRank'
type MockProbabilisticCmdable_TDigestByRank_Call struct {
	*mock.Call
}

// TDigestByRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rank ...uint64
func (_e *MockProbabilisticCmdable_Expecter) TDigestByRank(ctx interface{}, key interface{}, rank ...interface{}) *MockProbabilisticCmdable_TDigestByRank_Call {
	return &MockProbabilisticCmdable_TDigestByRank_Call{Call: _e.mock.On("TDigestByRank",
		append([]interface{}{ctx, key}, rank...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestByRank_Call) Run(run func(ctx context.Context, key string, rank ...uint64)) *MockProbabilisticCmdable_TDigestByRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestByRank_Call) Return(_a0 *FloatSliceCmd) *MockProbabilisticCmdable_TDigestByRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestByRank_Call) RunAndReturn(run func(context.Context, string, ...uint64) *FloatSliceCmd) *MockProbabilisticCmdable_TDigestByRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestByRevRank provides a mock function with given fields: ctx, key, rank
func (_m *MockProbabilisticCmdable) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *FloatSliceCmd {
	_va := make([]interface{}, len(rank))
	for _i := range rank {
		_va[_i] = rank[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestByRevRank")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, rank...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestByRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestByRevRank'
type MockProbabilisticCmdable_TDigestByRevRank_Call struct {
	*mock.Call
}

// TDigestByRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rank ...uint64
func (_e *MockProbabilisticCmdable_Expecter) TDigestByRevRank(ctx interface{}, key interface{}, rank ...interface{}) *MockProbabilisticCmdable_TDigestByRevRank_Call {
	return &MockProbabilisticCmdable_TDigestByRevRank_Call{Call: _e.mock.On("TDigestByRevRank",
		append([]interface{}{ctx, key}, rank...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestByRevRank_Call) Run(run func(ctx context.Context, key string, rank ...uint64)) *MockProbabilisticCmdable_TDigestByRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestByRevRank_Call) Return(_a0 *FloatSliceCmd) *MockProbabilisticCmdable_TDigestByRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestByRevRank_Call) RunAndReturn(run func(context.Context, string, ...uint64) *FloatSliceCmd) *MockProbabilisticCmdable_TDigestByRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCDF provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TDigestCDF(ctx context.Context, key string, elements ...float64) *FloatSliceCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestCDF")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestCDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCDF'
type MockProbabilisticCmdable_TDigestCDF_Call struct {
	*mock.Call
}

// TDigestCDF is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *MockProbabilisticCmdable_Expecter) TDigestCDF(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TDigestCDF_Call {
	return &MockProbabilisticCmdable_TDigestCDF_Call{Call: _e.mock.On("TDigestCDF",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestCDF_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *MockProbabilisticCmdable_TDigestCDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestCDF_Call) Return(_a0 *FloatSliceCmd) *MockProbabilisticCmdable_TDigestCDF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestCDF_Call) RunAndReturn(run func(context.Context, string, ...float64) *FloatSliceCmd) *MockProbabilisticCmdable_TDigestCDF_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCreate provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TDigestCreate(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCreate'
type MockProbabilisticCmdable_TDigestCreate_Call struct {
	*mock.Call
}

// TDigestCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TDigestCreate(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TDigestCreate_Call {
	return &MockProbabilisticCmdable_TDigestCreate_Call{Call: _e.mock.On("TDigestCreate", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TDigestCreate_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TDigestCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestCreate_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TDigestCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestCreate_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockProbabilisticCmdable_TDigestCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCreateWithCompression provides a mock function with given fields: ctx, key, compression
func (_m *MockProbabilisticCmdable) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *StatusCmd {
	ret := _m.Called(ctx, key, compression)

	if len(ret) == 0 {
		panic("no return value specified for TDigestCreateWithCompression")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, compression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestCreateWithCompression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCreateWithCompression'
type MockProbabilisticCmdable_TDigestCreateWithCompression_Call struct {
	*mock.Call
}

// TDigestCreateWithCompression is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - compression int64
func (_e *MockProbabilisticCmdable_Expecter) TDigestCreateWithCompression(ctx interface{}, key interface{}, compression interface{}) *MockProbabilisticCmdable_TDigestCreateWithCompression_Call {
	return &MockProbabilisticCmdable_TDigestCreateWithCompression_Call{Call: _e.mock.On("TDigestCreateWithCompression", ctx, key, compression)}
}

func (_c *MockProbabilisticCmdable_TDigestCreateWithCompression_Call) Run(run func(ctx context.Context, key string, compression int64)) *MockProbabilisticCmdable_TDigestCreateWithCompression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestCreateWithCompression_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TDigestCreateWithCompression_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestCreateWithCompression_Call) RunAndReturn(run func(context.Context, string, int64) *StatusCmd) *MockProbabilisticCmdable_TDigestCreateWithCompression_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestInfo provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TDigestInfo(ctx context.Context, key string) *TDigestInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestInfo")
	}

	var r0 *TDigestInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *TDigestInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TDigestInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestInfo'
type MockProbabilisticCmdable_TDigestInfo_Call struct {
	*mock.Call
}

// TDigestInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TDigestInfo(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TDigestInfo_Call {
	return &MockProbabilisticCmdable_TDigestInfo_Call{Call: _e.mock.On("TDigestInfo", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TDigestInfo_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TDigestInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestInfo_Call) Return(_a0 *TDigestInfoCmd) *MockProbabilisticCmdable_TDigestInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestInfo_Call) RunAndReturn(run func(context.Context, string) *TDigestInfoCmd) *MockProbabilisticCmdable_TDigestInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMax provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TDigestMax(ctx context.Context, key string) *FloatCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestMax")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FloatCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMax'
type MockProbabilisticCmdable_TDigestMax_Call struct {
	*mock.Call
}

// TDigestMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TDigestMax(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TDigestMax_Call {
	return &MockProbabilisticCmdable_TDigestMax_Call{Call: _e.mock.On("TDigestMax", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TDigestMax_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TDigestMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestMax_Call) Return(_a0 *FloatCmd) *MockProbabilisticCmdable_TDigestMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestMax_Call) RunAndReturn(run func(context.Context, string) *FloatCmd) *MockProbabilisticCmdable_TDigestMax_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMerge provides a mock function with given fields: ctx, destKey, options, sourceKeys
func (_m *MockProbabilisticCmdable) TDigestMerge(ctx context.Context, destKey string, options *TDigestMergeOptions, sourceKeys ...string) *StatusCmd {
	_va := make([]interface{}, len(sourceKeys))
	for _i := range sourceKeys {
		_va[_i] = sourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TDigestMergeOptions, ...string) *StatusCmd); ok {
		r0 = rf(ctx, destKey, options, sourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMerge'
type MockProbabilisticCmdable_TDigestMerge_Call struct {
	*mock.Call
}

// TDigestMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - options *TDigestMergeOptions
//   - sourceKeys ...string
func (_e *MockProbabilisticCmdable_Expecter) TDigestMerge(ctx interface{}, destKey interface{}, options interface{}, sourceKeys ...interface{}) *MockProbabilisticCmdable_TDigestMerge_Call {
	return &MockProbabilisticCmdable_TDigestMerge_Call{Call: _e.mock.On("TDigestMerge",
		append([]interface{}{ctx, destKey, options}, sourceKeys...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestMerge_Call) Run(run func(ctx context.Context, destKey string, options *TDigestMergeOptions, sourceKeys ...string)) *MockProbabilisticCmdable_TDigestMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*TDigestMergeOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestMerge_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TDigestMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestMerge_Call) RunAndReturn(run func(context.Context, string, *TDigestMergeOptions, ...string) *StatusCmd) *MockProbabilisticCmdable_TDigestMerge_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMin provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TDigestMin(ctx context.Context, key string) *FloatCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestMin")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FloatCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMin'
type MockProbabilisticCmdable_TDigestMin_Call struct {
	*mock.Call
}

// TDigestMin is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TDigestMin(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TDigestMin_Call {
	return &MockProbabilisticCmdable_TDigestMin_Call{Call: _e.mock.On("TDigestMin", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TDigestMin_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TDigestMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestMin_Call) Return(_a0 *FloatCmd) *MockProbabilisticCmdable_TDigestMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestMin_Call) RunAndReturn(run func(context.Context, string) *FloatCmd) *MockProbabilisticCmdable_TDigestMin_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestQuantile provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TDigestQuantile(ctx context.Context, key string, elements ...float64) *FloatSliceCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestQuantile")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestQuantile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestQuantile'
type MockProbabilisticCmdable_TDigestQuantile_Call struct {
	*mock.Call
}

// TDigestQuantile is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *MockProbabilisticCmdable_Expecter) TDigestQuantile(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TDigestQuantile_Call {
	return &MockProbabilisticCmdable_TDigestQuantile_Call{Call: _e.mock.On("TDigestQuantile",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestQuantile_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *MockProbabilisticCmdable_TDigestQuantile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestQuantile_Call) Return(_a0 *FloatSliceCmd) *MockProbabilisticCmdable_TDigestQuantile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestQuantile_Call) RunAndReturn(run func(context.Context, string, ...float64) *FloatSliceCmd) *MockProbabilisticCmdable_TDigestQuantile_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestRank provides a mock function with given fields: ctx, key, values
func (_m *MockProbabilisticCmdable) TDigestRank(ctx context.Context, key string, values ...float64) *IntSliceCmd {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestRank")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestRank'
type MockProbabilisticCmdable_TDigestRank_Call struct {
	*mock.Call
}

// TDigestRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...float64
func (_e *MockProbabilisticCmdable_Expecter) TDigestRank(ctx interface{}, key interface{}, values ...interface{}) *MockProbabilisticCmdable_TDigestRank_Call {
	return &MockProbabilisticCmdable_TDigestRank_Call{Call: _e.mock.On("TDigestRank",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestRank_Call) Run(run func(ctx context.Context, key string, values ...float64)) *MockProbabilisticCmdable_TDigestRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestRank_Call) Return(_a0 *IntSliceCmd) *MockProbabilisticCmdable_TDigestRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestRank_Call) RunAndReturn(run func(context.Context, string, ...float64) *IntSliceCmd) *MockProbabilisticCmdable_TDigestRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestReset provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TDigestReset(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestReset")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestReset'
type MockProbabilisticCmdable_TDigestReset_Call struct {
	*mock.Call
}

// TDigestReset is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TDigestReset(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TDigestReset_Call {
	return &MockProbabilisticCmdable_TDigestReset_Call{Call: _e.mock.On("TDigestReset", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TDigestReset_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TDigestReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestReset_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TDigestReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestReset_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockProbabilisticCmdable_TDigestReset_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestRevRank provides a mock function with given fields: ctx, key, values
func (_m *MockProbabilisticCmdable) TDigestRevRank(ctx context.Context, key string, values ...float64) *IntSliceCmd {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestRevRank")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestRevRank'
type MockProbabilisticCmdable_TDigestRevRank_Call struct {
	*mock.Call
}

// TDigestRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...float64
func (_e *MockProbabilisticCmdable_Expecter) TDigestRevRank(ctx interface{}, key interface{}, values ...interface{}) *MockProbabilisticCmdable_TDigestRevRank_Call {
	return &MockProbabilisticCmdable_TDigestRevRank_Call{Call: _e.mock.On("TDigestRevRank",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockProbabilisticCmdable_TDigestRevRank_Call) Run(run func(ctx context.Context, key string, values ...float64)) *MockProbabilisticCmdable_TDigestRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestRevRank_Call) Return(_a0 *IntSliceCmd) *MockProbabilisticCmdable_TDigestRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestRevRank_Call) RunAndReturn(run func(context.Context, string, ...float64) *IntSliceCmd) *MockProbabilisticCmdable_TDigestRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestTrimmedMean provides a mock function with given fields: ctx, key, lowCutQuantile, highCutQuantile
func (_m *MockProbabilisticCmdable) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *FloatCmd {
	ret := _m.Called(ctx, key, lowCutQuantile, highCutQuantile)

	if len(ret) == 0 {
		panic("no return value specified for TDigestTrimmedMean")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) *FloatCmd); ok {
		r0 = rf(ctx, key, lowCutQuantile, highCutQuantile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TDigestTrimmedMean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestTrimmedMean'
type MockProbabilisticCmdable_TDigestTrimmedMean_Call struct {
	*mock.Call
}

// TDigestTrimmedMean is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - lowCutQuantile float64
//   - highCutQuantile float64
func (_e *MockProbabilisticCmdable_Expecter) TDigestTrimmedMean(ctx interface{}, key interface{}, lowCutQuantile interface{}, highCutQuantile interface{}) *MockProbabilisticCmdable_TDigestTrimmedMean_Call {
	return &MockProbabilisticCmdable_TDigestTrimmedMean_Call{Call: _e.mock.On("TDigestTrimmedMean", ctx, key, lowCutQuantile, highCutQuantile)}
}

func (_c *MockProbabilisticCmdable_TDigestTrimmedMean_Call) Run(run func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64)) *MockProbabilisticCmdable_TDigestTrimmedMean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestTrimmedMean_Call) Return(_a0 *FloatCmd) *MockProbabilisticCmdable_TDigestTrimmedMean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TDigestTrimmedMean_Call) RunAndReturn(run func(context.Context, string, float64, float64) *FloatCmd) *MockProbabilisticCmdable_TDigestTrimmedMean_Call {
	_c.Call.Return(run)
	return _c
}

// TopKAdd provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TopKAdd(ctx context.Context, key string, elements ...interface{}) *StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKAdd")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *StringSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKAdd'
type MockProbabilisticCmdable_TopKAdd_Call struct {
	*mock.Call
}

// TopKAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) TopKAdd(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TopKAdd_Call {
	return &MockProbabilisticCmdable_TopKAdd_Call{Call: _e.mock.On("TopKAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TopKAdd_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_TopKAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKAdd_Call) Return(_a0 *StringSliceCmd) *MockProbabilisticCmdable_TopKAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *StringSliceCmd) *MockProbabilisticCmdable_TopKAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TopKCount provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TopKCount(ctx context.Context, key string, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKCount")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKCount'
type MockProbabilisticCmdable_TopKCount_Call struct {
	*mock.Call
}

// TopKCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) TopKCount(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TopKCount_Call {
	return &MockProbabilisticCmdable_TopKCount_Call{Call: _e.mock.On("TopKCount",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TopKCount_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_TopKCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKCount_Call) Return(_a0 *IntSliceCmd) *MockProbabilisticCmdable_TopKCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKCount_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockProbabilisticCmdable_TopKCount_Call {
	_c.Call.Return(run)
	return _c
}

// TopKIncrBy provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKIncrBy")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *StringSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKIncrBy'
type MockProbabilisticCmdable_TopKIncrBy_Call struct {
	*mock.Call
}

// TopKIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) TopKIncrBy(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TopKIncrBy_Call {
	return &MockProbabilisticCmdable_TopKIncrBy_Call{Call: _e.mock.On("TopKIncrBy",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TopKIncrBy_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_TopKIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKIncrBy_Call) Return(_a0 *StringSliceCmd) *MockProbabilisticCmdable_TopKIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKIncrBy_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *StringSliceCmd) *MockProbabilisticCmdable_TopKIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TopKInfo provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TopKInfo(ctx context.Context, key string) *TopKInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TopKInfo")
	}

	var r0 *TopKInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *TopKInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TopKInfoCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKInfo'
type MockProbabilisticCmdable_TopKInfo_Call struct {
	*mock.Call
}

// TopKInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TopKInfo(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TopKInfo_Call {
	return &MockProbabilisticCmdable_TopKInfo_Call{Call: _e.mock.On("TopKInfo", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TopKInfo_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TopKInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKInfo_Call) Return(_a0 *TopKInfoCmd) *MockProbabilisticCmdable_TopKInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKInfo_Call) RunAndReturn(run func(context.Context, string) *TopKInfoCmd) *MockProbabilisticCmdable_TopKInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TopKList provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TopKList(ctx context.Context, key string) *StringSliceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TopKList")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKList'
type MockProbabilisticCmdable_TopKList_Call struct {
	*mock.Call
}

// TopKList is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TopKList(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TopKList_Call {
	return &MockProbabilisticCmdable_TopKList_Call{Call: _e.mock.On("TopKList", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TopKList_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TopKList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKList_Call) Return(_a0 *StringSliceCmd) *MockProbabilisticCmdable_TopKList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKList_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockProbabilisticCmdable_TopKList_Call {
	_c.Call.Return(run)
	return _c
}

// TopKListWithCount provides a mock function with given fields: ctx, key
func (_m *MockProbabilisticCmdable) TopKListWithCount(ctx context.Context, key string) *MapStringIntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TopKListWithCount")
	}

	var r0 *MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapStringIntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringIntCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKListWithCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKListWithCount'
type MockProbabilisticCmdable_TopKListWithCount_Call struct {
	*mock.Call
}

// TopKListWithCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProbabilisticCmdable_Expecter) TopKListWithCount(ctx interface{}, key interface{}) *MockProbabilisticCmdable_TopKListWithCount_Call {
	return &MockProbabilisticCmdable_TopKListWithCount_Call{Call: _e.mock.On("TopKListWithCount", ctx, key)}
}

func (_c *MockProbabilisticCmdable_TopKListWithCount_Call) Run(run func(ctx context.Context, key string)) *MockProbabilisticCmdable_TopKListWithCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKListWithCount_Call) Return(_a0 *MapStringIntCmd) *MockProbabilisticCmdable_TopKListWithCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKListWithCount_Call) RunAndReturn(run func(context.Context, string) *MapStringIntCmd) *MockProbabilisticCmdable_TopKListWithCount_Call {
	_c.Call.Return(run)
	return _c
}

// TopKQuery provides a mock function with given fields: ctx, key, elements
func (_m *MockProbabilisticCmdable) TopKQuery(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKQuery")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKQuery'
type MockProbabilisticCmdable_TopKQuery_Call struct {
	*mock.Call
}

// TopKQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockProbabilisticCmdable_Expecter) TopKQuery(ctx interface{}, key interface{}, elements ...interface{}) *MockProbabilisticCmdable_TopKQuery_Call {
	return &MockProbabilisticCmdable_TopKQuery_Call{Call: _e.mock.On("TopKQuery",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockProbabilisticCmdable_TopKQuery_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockProbabilisticCmdable_TopKQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKQuery_Call) Return(_a0 *BoolSliceCmd) *MockProbabilisticCmdable_TopKQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockProbabilisticCmdable_TopKQuery_Call {
	_c.Call.Return(run)
	return _c
}

// TopKReserve provides a mock function with given fields: ctx, key, k
func (_m *MockProbabilisticCmdable) TopKReserve(ctx context.Context, key string, k int64) *StatusCmd {
	ret := _m.Called(ctx, key, k)

	if len(ret) == 0 {
		panic("no return value specified for TopKReserve")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKReserve'
type MockProbabilisticCmdable_TopKReserve_Call struct {
	*mock.Call
}

// TopKReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - k int64
func (_e *MockProbabilisticCmdable_Expecter) TopKReserve(ctx interface{}, key interface{}, k interface{}) *MockProbabilisticCmdable_TopKReserve_Call {
	return &MockProbabilisticCmdable_TopKReserve_Call{Call: _e.mock.On("TopKReserve", ctx, key, k)}
}

func (_c *MockProbabilisticCmdable_TopKReserve_Call) Run(run func(ctx context.Context, key string, k int64)) *MockProbabilisticCmdable_TopKReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKReserve_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TopKReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKReserve_Call) RunAndReturn(run func(context.Context, string, int64) *StatusCmd) *MockProbabilisticCmdable_TopKReserve_Call {
	_c.Call.Return(run)
	return _c
}

// TopKReserveWithOptions provides a mock function with given fields: ctx, key, k, width, depth, decay
func (_m *MockProbabilisticCmdable) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *StatusCmd {
	ret := _m.Called(ctx, key, k, width, depth, decay)

	if len(ret) == 0 {
		panic("no return value specified for TopKReserveWithOptions")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int64, float64) *StatusCmd); ok {
		r0 = rf(ctx, key, k, width, depth, decay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockProbabilisticCmdable_TopKReserveWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKReserveWithOptions'
type MockProbabilisticCmdable_TopKReserveWithOptions_Call struct {
	*mock.Call
}

// TopKReserveWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - k int64
//   - width int64
//   - depth int64
//   - decay float64
func (_e *MockProbabilisticCmdable_Expecter) TopKReserveWithOptions(ctx interface{}, key interface{}, k interface{}, width interface{}, depth interface{}, decay interface{}) *MockProbabilisticCmdable_TopKReserveWithOptions_Call {
	return &MockProbabilisticCmdable_TopKReserveWithOptions_Call{Call: _e.mock.On("TopKReserveWithOptions", ctx, key, k, width, depth, decay)}
}

func (_c *MockProbabilisticCmdable_TopKReserveWithOptions_Call) Run(run func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64)) *MockProbabilisticCmdable_TopKReserveWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64), args[4].(int64), args[5].(float64))
	})
	return _c
}

func (_c *MockProbabilisticCmdable_TopKReserveWithOptions_Call) Return(_a0 *StatusCmd) *MockProbabilisticCmdable_TopKReserveWithOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProbabilisticCmdable_TopKReserveWithOptions_Call) RunAndReturn(run func(context.Context, string, int64, int64, int64, float64) *StatusCmd) *MockProbabilisticCmdable_TopKReserveWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProbabilisticCmdable creates a new instance of MockProbabilisticCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProbabilisticCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProbabilisticCmdable {
	mock := &MockProbabilisticCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
