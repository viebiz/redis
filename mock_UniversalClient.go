// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockUniversalClient is an autogenerated mock type for the UniversalClient type
type MockUniversalClient struct {
	mock.Mock
}

type MockUniversalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUniversalClient) EXPECT() *MockUniversalClient_Expecter {
	return &MockUniversalClient_Expecter{mock: &_m.Mock}
}

// ACLCat provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ACLCat(ctx context.Context) *StringSliceCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ACLCat")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringSliceCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLCat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLCat'
type MockUniversalClient_ACLCat_Call struct {
	*mock.Call
}

// ACLCat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ACLCat(ctx interface{}) *MockUniversalClient_ACLCat_Call {
	return &MockUniversalClient_ACLCat_Call{Call: _e.mock.On("ACLCat", ctx)}
}

func (_c *MockUniversalClient_ACLCat_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ACLCat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ACLCat_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ACLCat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLCat_Call) RunAndReturn(run func(context.Context) *StringSliceCmd) *MockUniversalClient_ACLCat_Call {
	_c.Call.Return(run)
	return _c
}

// ACLCatArgs provides a mock function with given fields: ctx, options
func (_m *MockUniversalClient) ACLCatArgs(ctx context.Context, options *ACLCatArgs) *StringSliceCmd {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ACLCatArgs")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *ACLCatArgs) *StringSliceCmd); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLCatArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLCatArgs'
type MockUniversalClient_ACLCatArgs_Call struct {
	*mock.Call
}

// ACLCatArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - options *ACLCatArgs
func (_e *MockUniversalClient_Expecter) ACLCatArgs(ctx interface{}, options interface{}) *MockUniversalClient_ACLCatArgs_Call {
	return &MockUniversalClient_ACLCatArgs_Call{Call: _e.mock.On("ACLCatArgs", ctx, options)}
}

func (_c *MockUniversalClient_ACLCatArgs_Call) Run(run func(ctx context.Context, options *ACLCatArgs)) *MockUniversalClient_ACLCatArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ACLCatArgs))
	})
	return _c
}

func (_c *MockUniversalClient_ACLCatArgs_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ACLCatArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLCatArgs_Call) RunAndReturn(run func(context.Context, *ACLCatArgs) *StringSliceCmd) *MockUniversalClient_ACLCatArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ACLDelUser provides a mock function with given fields: ctx, username
func (_m *MockUniversalClient) ACLDelUser(ctx context.Context, username string) *IntCmd {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for ACLDelUser")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLDelUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLDelUser'
type MockUniversalClient_ACLDelUser_Call struct {
	*mock.Call
}

// ACLDelUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUniversalClient_Expecter) ACLDelUser(ctx interface{}, username interface{}) *MockUniversalClient_ACLDelUser_Call {
	return &MockUniversalClient_ACLDelUser_Call{Call: _e.mock.On("ACLDelUser", ctx, username)}
}

func (_c *MockUniversalClient_ACLDelUser_Call) Run(run func(ctx context.Context, username string)) *MockUniversalClient_ACLDelUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ACLDelUser_Call) Return(_a0 *IntCmd) *MockUniversalClient_ACLDelUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLDelUser_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_ACLDelUser_Call {
	_c.Call.Return(run)
	return _c
}

// ACLDryRun provides a mock function with given fields: ctx, username, command
func (_m *MockUniversalClient) ACLDryRun(ctx context.Context, username string, command ...interface{}) *StringCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, username)
	_ca = append(_ca, command...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ACLDryRun")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *StringCmd); ok {
		r0 = rf(ctx, username, command...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLDryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLDryRun'
type MockUniversalClient_ACLDryRun_Call struct {
	*mock.Call
}

// ACLDryRun is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - command ...interface{}
func (_e *MockUniversalClient_Expecter) ACLDryRun(ctx interface{}, username interface{}, command ...interface{}) *MockUniversalClient_ACLDryRun_Call {
	return &MockUniversalClient_ACLDryRun_Call{Call: _e.mock.On("ACLDryRun",
		append([]interface{}{ctx, username}, command...)...)}
}

func (_c *MockUniversalClient_ACLDryRun_Call) Run(run func(ctx context.Context, username string, command ...interface{})) *MockUniversalClient_ACLDryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ACLDryRun_Call) Return(_a0 *StringCmd) *MockUniversalClient_ACLDryRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLDryRun_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *StringCmd) *MockUniversalClient_ACLDryRun_Call {
	_c.Call.Return(run)
	return _c
}

// ACLList provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ACLList(ctx context.Context) *StringSliceCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ACLList")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringSliceCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLList'
type MockUniversalClient_ACLList_Call struct {
	*mock.Call
}

// ACLList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ACLList(ctx interface{}) *MockUniversalClient_ACLList_Call {
	return &MockUniversalClient_ACLList_Call{Call: _e.mock.On("ACLList", ctx)}
}

func (_c *MockUniversalClient_ACLList_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ACLList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ACLList_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ACLList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLList_Call) RunAndReturn(run func(context.Context) *StringSliceCmd) *MockUniversalClient_ACLList_Call {
	_c.Call.Return(run)
	return _c
}

// ACLLog provides a mock function with given fields: ctx, count
func (_m *MockUniversalClient) ACLLog(ctx context.Context, count int64) *ACLLogCmd {
	ret := _m.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for ACLLog")
	}

	var r0 *ACLLogCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ACLLogCmd); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ACLLogCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLLog'
type MockUniversalClient_ACLLog_Call struct {
	*mock.Call
}

// ACLLog is a helper method to define mock.On call
//   - ctx context.Context
//   - count int64
func (_e *MockUniversalClient_Expecter) ACLLog(ctx interface{}, count interface{}) *MockUniversalClient_ACLLog_Call {
	return &MockUniversalClient_ACLLog_Call{Call: _e.mock.On("ACLLog", ctx, count)}
}

func (_c *MockUniversalClient_ACLLog_Call) Run(run func(ctx context.Context, count int64)) *MockUniversalClient_ACLLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ACLLog_Call) Return(_a0 *ACLLogCmd) *MockUniversalClient_ACLLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLLog_Call) RunAndReturn(run func(context.Context, int64) *ACLLogCmd) *MockUniversalClient_ACLLog_Call {
	_c.Call.Return(run)
	return _c
}

// ACLLogReset provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ACLLogReset(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ACLLogReset")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLLogReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLLogReset'
type MockUniversalClient_ACLLogReset_Call struct {
	*mock.Call
}

// ACLLogReset is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ACLLogReset(ctx interface{}) *MockUniversalClient_ACLLogReset_Call {
	return &MockUniversalClient_ACLLogReset_Call{Call: _e.mock.On("ACLLogReset", ctx)}
}

func (_c *MockUniversalClient_ACLLogReset_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ACLLogReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ACLLogReset_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ACLLogReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLLogReset_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ACLLogReset_Call {
	_c.Call.Return(run)
	return _c
}

// ACLSetUser provides a mock function with given fields: ctx, username, rules
func (_m *MockUniversalClient) ACLSetUser(ctx context.Context, username string, rules ...string) *StatusCmd {
	_va := make([]interface{}, len(rules))
	for _i := range rules {
		_va[_i] = rules[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, username)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ACLSetUser")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *StatusCmd); ok {
		r0 = rf(ctx, username, rules...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ACLSetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLSetUser'
type MockUniversalClient_ACLSetUser_Call struct {
	*mock.Call
}

// ACLSetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - rules ...string
func (_e *MockUniversalClient_Expecter) ACLSetUser(ctx interface{}, username interface{}, rules ...interface{}) *MockUniversalClient_ACLSetUser_Call {
	return &MockUniversalClient_ACLSetUser_Call{Call: _e.mock.On("ACLSetUser",
		append([]interface{}{ctx, username}, rules...)...)}
}

func (_c *MockUniversalClient_ACLSetUser_Call) Run(run func(ctx context.Context, username string, rules ...string)) *MockUniversalClient_ACLSetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ACLSetUser_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ACLSetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ACLSetUser_Call) RunAndReturn(run func(context.Context, string, ...string) *StatusCmd) *MockUniversalClient_ACLSetUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddHook provides a mock function with given fields: _a0
func (_m *MockUniversalClient) AddHook(_a0 Hook) {
	_m.Called(_a0)
}

// MockUniversalClient_AddHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHook'
type MockUniversalClient_AddHook_Call struct {
	*mock.Call
}

// AddHook is a helper method to define mock.On call
//   - _a0 Hook
func (_e *MockUniversalClient_Expecter) AddHook(_a0 interface{}) *MockUniversalClient_AddHook_Call {
	return &MockUniversalClient_AddHook_Call{Call: _e.mock.On("AddHook", _a0)}
}

func (_c *MockUniversalClient_AddHook_Call) Run(run func(_a0 Hook)) *MockUniversalClient_AddHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Hook))
	})
	return _c
}

func (_c *MockUniversalClient_AddHook_Call) Return() *MockUniversalClient_AddHook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUniversalClient_AddHook_Call) RunAndReturn(run func(Hook)) *MockUniversalClient_AddHook_Call {
	_c.Run(run)
	return _c
}

// Append provides a mock function with given fields: ctx, key, value
func (_m *MockUniversalClient) Append(ctx context.Context, key string, value string) *IntCmd {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockUniversalClient_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *MockUniversalClient_Expecter) Append(ctx interface{}, key interface{}, value interface{}) *MockUniversalClient_Append_Call {
	return &MockUniversalClient_Append_Call{Call: _e.mock.On("Append", ctx, key, value)}
}

func (_c *MockUniversalClient_Append_Call) Run(run func(ctx context.Context, key string, value string)) *MockUniversalClient_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Append_Call) Return(_a0 *IntCmd) *MockUniversalClient_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Append_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_Append_Call {
	_c.Call.Return(run)
	return _c
}

// BFAdd provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) BFAdd(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for BFAdd")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFAdd'
type MockUniversalClient_BFAdd_Call struct {
	*mock.Call
}

// BFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) BFAdd(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_BFAdd_Call {
	return &MockUniversalClient_BFAdd_Call{Call: _e.mock.On("BFAdd", ctx, key, element)}
}

func (_c *MockUniversalClient_BFAdd_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_BFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_BFAdd_Call) Return(_a0 *BoolCmd) *MockUniversalClient_BFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFAdd_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_BFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BFCard provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFCard(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFCard'
type MockUniversalClient_BFCard_Call struct {
	*mock.Call
}

// BFCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFCard(ctx interface{}, key interface{}) *MockUniversalClient_BFCard_Call {
	return &MockUniversalClient_BFCard_Call{Call: _e.mock.On("BFCard", ctx, key)}
}

func (_c *MockUniversalClient_BFCard_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFCard_Call) Return(_a0 *IntCmd) *MockUniversalClient_BFCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFCard_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_BFCard_Call {
	_c.Call.Return(run)
	return _c
}

// BFExists provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) BFExists(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for BFExists")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFExists'
type MockUniversalClient_BFExists_Call struct {
	*mock.Call
}

// BFExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) BFExists(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_BFExists_Call {
	return &MockUniversalClient_BFExists_Call{Call: _e.mock.On("BFExists", ctx, key, element)}
}

func (_c *MockUniversalClient_BFExists_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_BFExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_BFExists_Call) Return(_a0 *BoolCmd) *MockUniversalClient_BFExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFExists_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_BFExists_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfo provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFInfo(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfo")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfo'
type MockUniversalClient_BFInfo_Call struct {
	*mock.Call
}

// BFInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFInfo(ctx interface{}, key interface{}) *MockUniversalClient_BFInfo_Call {
	return &MockUniversalClient_BFInfo_Call{Call: _e.mock.On("BFInfo", ctx, key)}
}

func (_c *MockUniversalClient_BFInfo_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfo_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfo_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockUniversalClient_BFInfo_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoArg provides a mock function with given fields: ctx, key, option
func (_m *MockUniversalClient) BFInfoArg(ctx context.Context, key string, option string) *BFInfoCmd {
	ret := _m.Called(ctx, key, option)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoArg")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfoArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoArg'
type MockUniversalClient_BFInfoArg_Call struct {
	*mock.Call
}

// BFInfoArg is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - option string
func (_e *MockUniversalClient_Expecter) BFInfoArg(ctx interface{}, key interface{}, option interface{}) *MockUniversalClient_BFInfoArg_Call {
	return &MockUniversalClient_BFInfoArg_Call{Call: _e.mock.On("BFInfoArg", ctx, key, option)}
}

func (_c *MockUniversalClient_BFInfoArg_Call) Run(run func(ctx context.Context, key string, option string)) *MockUniversalClient_BFInfoArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfoArg_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfoArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfoArg_Call) RunAndReturn(run func(context.Context, string, string) *BFInfoCmd) *MockUniversalClient_BFInfoArg_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoCapacity provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFInfoCapacity(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoCapacity")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfoCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoCapacity'
type MockUniversalClient_BFInfoCapacity_Call struct {
	*mock.Call
}

// BFInfoCapacity is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFInfoCapacity(ctx interface{}, key interface{}) *MockUniversalClient_BFInfoCapacity_Call {
	return &MockUniversalClient_BFInfoCapacity_Call{Call: _e.mock.On("BFInfoCapacity", ctx, key)}
}

func (_c *MockUniversalClient_BFInfoCapacity_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFInfoCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfoCapacity_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfoCapacity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfoCapacity_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockUniversalClient_BFInfoCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoExpansion provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFInfoExpansion(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoExpansion")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfoExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoExpansion'
type MockUniversalClient_BFInfoExpansion_Call struct {
	*mock.Call
}

// BFInfoExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFInfoExpansion(ctx interface{}, key interface{}) *MockUniversalClient_BFInfoExpansion_Call {
	return &MockUniversalClient_BFInfoExpansion_Call{Call: _e.mock.On("BFInfoExpansion", ctx, key)}
}

func (_c *MockUniversalClient_BFInfoExpansion_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFInfoExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfoExpansion_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfoExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfoExpansion_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockUniversalClient_BFInfoExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoFilters provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFInfoFilters(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoFilters")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfoFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoFilters'
type MockUniversalClient_BFInfoFilters_Call struct {
	*mock.Call
}

// BFInfoFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFInfoFilters(ctx interface{}, key interface{}) *MockUniversalClient_BFInfoFilters_Call {
	return &MockUniversalClient_BFInfoFilters_Call{Call: _e.mock.On("BFInfoFilters", ctx, key)}
}

func (_c *MockUniversalClient_BFInfoFilters_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFInfoFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfoFilters_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfoFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfoFilters_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockUniversalClient_BFInfoFilters_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoItems provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFInfoItems(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoItems")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfoItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoItems'
type MockUniversalClient_BFInfoItems_Call struct {
	*mock.Call
}

// BFInfoItems is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFInfoItems(ctx interface{}, key interface{}) *MockUniversalClient_BFInfoItems_Call {
	return &MockUniversalClient_BFInfoItems_Call{Call: _e.mock.On("BFInfoItems", ctx, key)}
}

func (_c *MockUniversalClient_BFInfoItems_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFInfoItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfoItems_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfoItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfoItems_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockUniversalClient_BFInfoItems_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoSize provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) BFInfoSize(ctx context.Context, key string) *BFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BFInfoSize")
	}

	var r0 *BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInfoSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoSize'
type MockUniversalClient_BFInfoSize_Call struct {
	*mock.Call
}

// BFInfoSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) BFInfoSize(ctx interface{}, key interface{}) *MockUniversalClient_BFInfoSize_Call {
	return &MockUniversalClient_BFInfoSize_Call{Call: _e.mock.On("BFInfoSize", ctx, key)}
}

func (_c *MockUniversalClient_BFInfoSize_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_BFInfoSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BFInfoSize_Call) Return(_a0 *BFInfoCmd) *MockUniversalClient_BFInfoSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInfoSize_Call) RunAndReturn(run func(context.Context, string) *BFInfoCmd) *MockUniversalClient_BFInfoSize_Call {
	_c.Call.Return(run)
	return _c
}

// BFInsert provides a mock function with given fields: ctx, key, options, elements
func (_m *MockUniversalClient) BFInsert(ctx context.Context, key string, options *BFInsertOptions, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BFInsert")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *BFInsertOptions, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInsert'
type MockUniversalClient_BFInsert_Call struct {
	*mock.Call
}

// BFInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *BFInsertOptions
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) BFInsert(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *MockUniversalClient_BFInsert_Call {
	return &MockUniversalClient_BFInsert_Call{Call: _e.mock.On("BFInsert",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *MockUniversalClient_BFInsert_Call) Run(run func(ctx context.Context, key string, options *BFInsertOptions, elements ...interface{})) *MockUniversalClient_BFInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*BFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BFInsert_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_BFInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFInsert_Call) RunAndReturn(run func(context.Context, string, *BFInsertOptions, ...interface{}) *BoolSliceCmd) *MockUniversalClient_BFInsert_Call {
	_c.Call.Return(run)
	return _c
}

// BFLoadChunk provides a mock function with given fields: ctx, key, iterator, data
func (_m *MockUniversalClient) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, iterator, data)

	if len(ret) == 0 {
		panic("no return value specified for BFLoadChunk")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, iterator, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFLoadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFLoadChunk'
type MockUniversalClient_BFLoadChunk_Call struct {
	*mock.Call
}

// BFLoadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
//   - data interface{}
func (_e *MockUniversalClient_Expecter) BFLoadChunk(ctx interface{}, key interface{}, iterator interface{}, data interface{}) *MockUniversalClient_BFLoadChunk_Call {
	return &MockUniversalClient_BFLoadChunk_Call{Call: _e.mock.On("BFLoadChunk", ctx, key, iterator, data)}
}

func (_c *MockUniversalClient_BFLoadChunk_Call) Run(run func(ctx context.Context, key string, iterator int64, data interface{})) *MockUniversalClient_BFLoadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_BFLoadChunk_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BFLoadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFLoadChunk_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *StatusCmd) *MockUniversalClient_BFLoadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// BFMAdd provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) BFMAdd(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BFMAdd")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFMAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFMAdd'
type MockUniversalClient_BFMAdd_Call struct {
	*mock.Call
}

// BFMAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) BFMAdd(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_BFMAdd_Call {
	return &MockUniversalClient_BFMAdd_Call{Call: _e.mock.On("BFMAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_BFMAdd_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_BFMAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BFMAdd_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_BFMAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFMAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockUniversalClient_BFMAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BFMExists provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) BFMExists(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BFMExists")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFMExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFMExists'
type MockUniversalClient_BFMExists_Call struct {
	*mock.Call
}

// BFMExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) BFMExists(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_BFMExists_Call {
	return &MockUniversalClient_BFMExists_Call{Call: _e.mock.On("BFMExists",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_BFMExists_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_BFMExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BFMExists_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_BFMExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFMExists_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockUniversalClient_BFMExists_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserve provides a mock function with given fields: ctx, key, errorRate, capacity
func (_m *MockUniversalClient) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity)

	if len(ret) == 0 {
		panic("no return value specified for BFReserve")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserve'
type MockUniversalClient_BFReserve_Call struct {
	*mock.Call
}

// BFReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
func (_e *MockUniversalClient_Expecter) BFReserve(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}) *MockUniversalClient_BFReserve_Call {
	return &MockUniversalClient_BFReserve_Call{Call: _e.mock.On("BFReserve", ctx, key, errorRate, capacity)}
}

func (_c *MockUniversalClient_BFReserve_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64)) *MockUniversalClient_BFReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_BFReserve_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BFReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFReserve_Call) RunAndReturn(run func(context.Context, string, float64, int64) *StatusCmd) *MockUniversalClient_BFReserve_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveExpansion provides a mock function with given fields: ctx, key, errorRate, capacity, expansion
func (_m *MockUniversalClient) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity, expansion)

	if len(ret) == 0 {
		panic("no return value specified for BFReserveExpansion")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity, expansion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFReserveExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveExpansion'
type MockUniversalClient_BFReserveExpansion_Call struct {
	*mock.Call
}

// BFReserveExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
//   - expansion int64
func (_e *MockUniversalClient_Expecter) BFReserveExpansion(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}, expansion interface{}) *MockUniversalClient_BFReserveExpansion_Call {
	return &MockUniversalClient_BFReserveExpansion_Call{Call: _e.mock.On("BFReserveExpansion", ctx, key, errorRate, capacity, expansion)}
}

func (_c *MockUniversalClient_BFReserveExpansion_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64)) *MockUniversalClient_BFReserveExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_BFReserveExpansion_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BFReserveExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFReserveExpansion_Call) RunAndReturn(run func(context.Context, string, float64, int64, int64) *StatusCmd) *MockUniversalClient_BFReserveExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveNonScaling provides a mock function with given fields: ctx, key, errorRate, capacity
func (_m *MockUniversalClient) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity)

	if len(ret) == 0 {
		panic("no return value specified for BFReserveNonScaling")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFReserveNonScaling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveNonScaling'
type MockUniversalClient_BFReserveNonScaling_Call struct {
	*mock.Call
}

// BFReserveNonScaling is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
func (_e *MockUniversalClient_Expecter) BFReserveNonScaling(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}) *MockUniversalClient_BFReserveNonScaling_Call {
	return &MockUniversalClient_BFReserveNonScaling_Call{Call: _e.mock.On("BFReserveNonScaling", ctx, key, errorRate, capacity)}
}

func (_c *MockUniversalClient_BFReserveNonScaling_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64)) *MockUniversalClient_BFReserveNonScaling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_BFReserveNonScaling_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BFReserveNonScaling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFReserveNonScaling_Call) RunAndReturn(run func(context.Context, string, float64, int64) *StatusCmd) *MockUniversalClient_BFReserveNonScaling_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockUniversalClient) BFReserveWithArgs(ctx context.Context, key string, options *BFReserveOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for BFReserveWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *BFReserveOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFReserveWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveWithArgs'
type MockUniversalClient_BFReserveWithArgs_Call struct {
	*mock.Call
}

// BFReserveWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *BFReserveOptions
func (_e *MockUniversalClient_Expecter) BFReserveWithArgs(ctx interface{}, key interface{}, options interface{}) *MockUniversalClient_BFReserveWithArgs_Call {
	return &MockUniversalClient_BFReserveWithArgs_Call{Call: _e.mock.On("BFReserveWithArgs", ctx, key, options)}
}

func (_c *MockUniversalClient_BFReserveWithArgs_Call) Run(run func(ctx context.Context, key string, options *BFReserveOptions)) *MockUniversalClient_BFReserveWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*BFReserveOptions))
	})
	return _c
}

func (_c *MockUniversalClient_BFReserveWithArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BFReserveWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFReserveWithArgs_Call) RunAndReturn(run func(context.Context, string, *BFReserveOptions) *StatusCmd) *MockUniversalClient_BFReserveWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// BFScanDump provides a mock function with given fields: ctx, key, iterator
func (_m *MockUniversalClient) BFScanDump(ctx context.Context, key string, iterator int64) *ScanDumpCmd {
	ret := _m.Called(ctx, key, iterator)

	if len(ret) == 0 {
		panic("no return value specified for BFScanDump")
	}

	var r0 *ScanDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *ScanDumpCmd); ok {
		r0 = rf(ctx, key, iterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanDumpCmd)
		}
	}

	return r0
}

// MockUniversalClient_BFScanDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFScanDump'
type MockUniversalClient_BFScanDump_Call struct {
	*mock.Call
}

// BFScanDump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
func (_e *MockUniversalClient_Expecter) BFScanDump(ctx interface{}, key interface{}, iterator interface{}) *MockUniversalClient_BFScanDump_Call {
	return &MockUniversalClient_BFScanDump_Call{Call: _e.mock.On("BFScanDump", ctx, key, iterator)}
}

func (_c *MockUniversalClient_BFScanDump_Call) Run(run func(ctx context.Context, key string, iterator int64)) *MockUniversalClient_BFScanDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_BFScanDump_Call) Return(_a0 *ScanDumpCmd) *MockUniversalClient_BFScanDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BFScanDump_Call) RunAndReturn(run func(context.Context, string, int64) *ScanDumpCmd) *MockUniversalClient_BFScanDump_Call {
	_c.Call.Return(run)
	return _c
}

// BLMPop provides a mock function with given fields: ctx, timeout, direction, count, keys
func (_m *MockUniversalClient) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *KeyValuesCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout, direction, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BLMPop")
	}

	var r0 *KeyValuesCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, int64, ...string) *KeyValuesCmd); ok {
		r0 = rf(ctx, timeout, direction, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KeyValuesCmd)
		}
	}

	return r0
}

// MockUniversalClient_BLMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLMPop'
type MockUniversalClient_BLMPop_Call struct {
	*mock.Call
}

// BLMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - direction string
//   - count int64
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BLMPop(ctx interface{}, timeout interface{}, direction interface{}, count interface{}, keys ...interface{}) *MockUniversalClient_BLMPop_Call {
	return &MockUniversalClient_BLMPop_Call{Call: _e.mock.On("BLMPop",
		append([]interface{}{ctx, timeout, direction, count}, keys...)...)}
}

func (_c *MockUniversalClient_BLMPop_Call) Run(run func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string)) *MockUniversalClient_BLMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BLMPop_Call) Return(_a0 *KeyValuesCmd) *MockUniversalClient_BLMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BLMPop_Call) RunAndReturn(run func(context.Context, time.Duration, string, int64, ...string) *KeyValuesCmd) *MockUniversalClient_BLMPop_Call {
	_c.Call.Return(run)
	return _c
}

// BLMove provides a mock function with given fields: ctx, source, destination, srcpos, destpos, timeout
func (_m *MockUniversalClient) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *StringCmd {
	ret := _m.Called(ctx, source, destination, srcpos, destpos, timeout)

	if len(ret) == 0 {
		panic("no return value specified for BLMove")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Duration) *StringCmd); ok {
		r0 = rf(ctx, source, destination, srcpos, destpos, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_BLMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLMove'
type MockUniversalClient_BLMove_Call struct {
	*mock.Call
}

// BLMove is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - srcpos string
//   - destpos string
//   - timeout time.Duration
func (_e *MockUniversalClient_Expecter) BLMove(ctx interface{}, source interface{}, destination interface{}, srcpos interface{}, destpos interface{}, timeout interface{}) *MockUniversalClient_BLMove_Call {
	return &MockUniversalClient_BLMove_Call{Call: _e.mock.On("BLMove", ctx, source, destination, srcpos, destpos, timeout)}
}

func (_c *MockUniversalClient_BLMove_Call) Run(run func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration)) *MockUniversalClient_BLMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_BLMove_Call) Return(_a0 *StringCmd) *MockUniversalClient_BLMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BLMove_Call) RunAndReturn(run func(context.Context, string, string, string, string, time.Duration) *StringCmd) *MockUniversalClient_BLMove_Call {
	_c.Call.Return(run)
	return _c
}

// BLPop provides a mock function with given fields: ctx, timeout, keys
func (_m *MockUniversalClient) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BLPop")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BLPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLPop'
type MockUniversalClient_BLPop_Call struct {
	*mock.Call
}

// BLPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BLPop(ctx interface{}, timeout interface{}, keys ...interface{}) *MockUniversalClient_BLPop_Call {
	return &MockUniversalClient_BLPop_Call{Call: _e.mock.On("BLPop",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *MockUniversalClient_BLPop_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *MockUniversalClient_BLPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BLPop_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_BLPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BLPop_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *StringSliceCmd) *MockUniversalClient_BLPop_Call {
	_c.Call.Return(run)
	return _c
}

// BRPop provides a mock function with given fields: ctx, timeout, keys
func (_m *MockUniversalClient) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BRPop")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BRPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BRPop'
type MockUniversalClient_BRPop_Call struct {
	*mock.Call
}

// BRPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BRPop(ctx interface{}, timeout interface{}, keys ...interface{}) *MockUniversalClient_BRPop_Call {
	return &MockUniversalClient_BRPop_Call{Call: _e.mock.On("BRPop",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *MockUniversalClient_BRPop_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *MockUniversalClient_BRPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BRPop_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_BRPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BRPop_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *StringSliceCmd) *MockUniversalClient_BRPop_Call {
	_c.Call.Return(run)
	return _c
}

// BRPopLPush provides a mock function with given fields: ctx, source, destination, timeout
func (_m *MockUniversalClient) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *StringCmd {
	ret := _m.Called(ctx, source, destination, timeout)

	if len(ret) == 0 {
		panic("no return value specified for BRPopLPush")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) *StringCmd); ok {
		r0 = rf(ctx, source, destination, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_BRPopLPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BRPopLPush'
type MockUniversalClient_BRPopLPush_Call struct {
	*mock.Call
}

// BRPopLPush is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - timeout time.Duration
func (_e *MockUniversalClient_Expecter) BRPopLPush(ctx interface{}, source interface{}, destination interface{}, timeout interface{}) *MockUniversalClient_BRPopLPush_Call {
	return &MockUniversalClient_BRPopLPush_Call{Call: _e.mock.On("BRPopLPush", ctx, source, destination, timeout)}
}

func (_c *MockUniversalClient_BRPopLPush_Call) Run(run func(ctx context.Context, source string, destination string, timeout time.Duration)) *MockUniversalClient_BRPopLPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_BRPopLPush_Call) Return(_a0 *StringCmd) *MockUniversalClient_BRPopLPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BRPopLPush_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) *StringCmd) *MockUniversalClient_BRPopLPush_Call {
	_c.Call.Return(run)
	return _c
}

// BZMPop provides a mock function with given fields: ctx, timeout, order, count, keys
func (_m *MockUniversalClient) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *ZSliceWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout, order, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BZMPop")
	}

	var r0 *ZSliceWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, int64, ...string) *ZSliceWithKeyCmd); ok {
		r0 = rf(ctx, timeout, order, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceWithKeyCmd)
		}
	}

	return r0
}

// MockUniversalClient_BZMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZMPop'
type MockUniversalClient_BZMPop_Call struct {
	*mock.Call
}

// BZMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - order string
//   - count int64
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BZMPop(ctx interface{}, timeout interface{}, order interface{}, count interface{}, keys ...interface{}) *MockUniversalClient_BZMPop_Call {
	return &MockUniversalClient_BZMPop_Call{Call: _e.mock.On("BZMPop",
		append([]interface{}{ctx, timeout, order, count}, keys...)...)}
}

func (_c *MockUniversalClient_BZMPop_Call) Run(run func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string)) *MockUniversalClient_BZMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BZMPop_Call) Return(_a0 *ZSliceWithKeyCmd) *MockUniversalClient_BZMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BZMPop_Call) RunAndReturn(run func(context.Context, time.Duration, string, int64, ...string) *ZSliceWithKeyCmd) *MockUniversalClient_BZMPop_Call {
	_c.Call.Return(run)
	return _c
}

// BZPopMax provides a mock function with given fields: ctx, timeout, keys
func (_m *MockUniversalClient) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BZPopMax")
	}

	var r0 *ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZWithKeyCmd)
		}
	}

	return r0
}

// MockUniversalClient_BZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMax'
type MockUniversalClient_BZPopMax_Call struct {
	*mock.Call
}

// BZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BZPopMax(ctx interface{}, timeout interface{}, keys ...interface{}) *MockUniversalClient_BZPopMax_Call {
	return &MockUniversalClient_BZPopMax_Call{Call: _e.mock.On("BZPopMax",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *MockUniversalClient_BZPopMax_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *MockUniversalClient_BZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BZPopMax_Call) Return(_a0 *ZWithKeyCmd) *MockUniversalClient_BZPopMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BZPopMax_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *ZWithKeyCmd) *MockUniversalClient_BZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// BZPopMin provides a mock function with given fields: ctx, timeout, keys
func (_m *MockUniversalClient) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BZPopMin")
	}

	var r0 *ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZWithKeyCmd)
		}
	}

	return r0
}

// MockUniversalClient_BZPopMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMin'
type MockUniversalClient_BZPopMin_Call struct {
	*mock.Call
}

// BZPopMin is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BZPopMin(ctx interface{}, timeout interface{}, keys ...interface{}) *MockUniversalClient_BZPopMin_Call {
	return &MockUniversalClient_BZPopMin_Call{Call: _e.mock.On("BZPopMin",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *MockUniversalClient_BZPopMin_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *MockUniversalClient_BZPopMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BZPopMin_Call) Return(_a0 *ZWithKeyCmd) *MockUniversalClient_BZPopMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BZPopMin_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *ZWithKeyCmd) *MockUniversalClient_BZPopMin_Call {
	_c.Call.Return(run)
	return _c
}

// BgRewriteAOF provides a mock function with given fields: ctx
func (_m *MockUniversalClient) BgRewriteAOF(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BgRewriteAOF")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BgRewriteAOF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BgRewriteAOF'
type MockUniversalClient_BgRewriteAOF_Call struct {
	*mock.Call
}

// BgRewriteAOF is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) BgRewriteAOF(ctx interface{}) *MockUniversalClient_BgRewriteAOF_Call {
	return &MockUniversalClient_BgRewriteAOF_Call{Call: _e.mock.On("BgRewriteAOF", ctx)}
}

func (_c *MockUniversalClient_BgRewriteAOF_Call) Run(run func(ctx context.Context)) *MockUniversalClient_BgRewriteAOF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_BgRewriteAOF_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BgRewriteAOF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BgRewriteAOF_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_BgRewriteAOF_Call {
	_c.Call.Return(run)
	return _c
}

// BgSave provides a mock function with given fields: ctx
func (_m *MockUniversalClient) BgSave(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BgSave")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_BgSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BgSave'
type MockUniversalClient_BgSave_Call struct {
	*mock.Call
}

// BgSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) BgSave(ctx interface{}) *MockUniversalClient_BgSave_Call {
	return &MockUniversalClient_BgSave_Call{Call: _e.mock.On("BgSave", ctx)}
}

func (_c *MockUniversalClient_BgSave_Call) Run(run func(ctx context.Context)) *MockUniversalClient_BgSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_BgSave_Call) Return(_a0 *StatusCmd) *MockUniversalClient_BgSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BgSave_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_BgSave_Call {
	_c.Call.Return(run)
	return _c
}

// BitCount provides a mock function with given fields: ctx, key, bitCount
func (_m *MockUniversalClient) BitCount(ctx context.Context, key string, bitCount *BitCount) *IntCmd {
	ret := _m.Called(ctx, key, bitCount)

	if len(ret) == 0 {
		panic("no return value specified for BitCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *BitCount) *IntCmd); ok {
		r0 = rf(ctx, key, bitCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitCount'
type MockUniversalClient_BitCount_Call struct {
	*mock.Call
}

// BitCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - bitCount *BitCount
func (_e *MockUniversalClient_Expecter) BitCount(ctx interface{}, key interface{}, bitCount interface{}) *MockUniversalClient_BitCount_Call {
	return &MockUniversalClient_BitCount_Call{Call: _e.mock.On("BitCount", ctx, key, bitCount)}
}

func (_c *MockUniversalClient_BitCount_Call) Run(run func(ctx context.Context, key string, bitCount *BitCount)) *MockUniversalClient_BitCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*BitCount))
	})
	return _c
}

func (_c *MockUniversalClient_BitCount_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitCount_Call) RunAndReturn(run func(context.Context, string, *BitCount) *IntCmd) *MockUniversalClient_BitCount_Call {
	_c.Call.Return(run)
	return _c
}

// BitField provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) BitField(ctx context.Context, key string, values ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BitField")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitField'
type MockUniversalClient_BitField_Call struct {
	*mock.Call
}

// BitField is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) BitField(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_BitField_Call {
	return &MockUniversalClient_BitField_Call{Call: _e.mock.On("BitField",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_BitField_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_BitField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BitField_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_BitField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitField_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_BitField_Call {
	_c.Call.Return(run)
	return _c
}

// BitFieldRO provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) BitFieldRO(ctx context.Context, key string, values ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BitFieldRO")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitFieldRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitFieldRO'
type MockUniversalClient_BitFieldRO_Call struct {
	*mock.Call
}

// BitFieldRO is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) BitFieldRO(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_BitFieldRO_Call {
	return &MockUniversalClient_BitFieldRO_Call{Call: _e.mock.On("BitFieldRO",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_BitFieldRO_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_BitFieldRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BitFieldRO_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_BitFieldRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitFieldRO_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_BitFieldRO_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpAnd provides a mock function with given fields: ctx, destKey, keys
func (_m *MockUniversalClient) BitOpAnd(ctx context.Context, destKey string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BitOpAnd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitOpAnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpAnd'
type MockUniversalClient_BitOpAnd_Call struct {
	*mock.Call
}

// BitOpAnd is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BitOpAnd(ctx interface{}, destKey interface{}, keys ...interface{}) *MockUniversalClient_BitOpAnd_Call {
	return &MockUniversalClient_BitOpAnd_Call{Call: _e.mock.On("BitOpAnd",
		append([]interface{}{ctx, destKey}, keys...)...)}
}

func (_c *MockUniversalClient_BitOpAnd_Call) Run(run func(ctx context.Context, destKey string, keys ...string)) *MockUniversalClient_BitOpAnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BitOpAnd_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitOpAnd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitOpAnd_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_BitOpAnd_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpNot provides a mock function with given fields: ctx, destKey, key
func (_m *MockUniversalClient) BitOpNot(ctx context.Context, destKey string, key string) *IntCmd {
	ret := _m.Called(ctx, destKey, key)

	if len(ret) == 0 {
		panic("no return value specified for BitOpNot")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, destKey, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitOpNot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpNot'
type MockUniversalClient_BitOpNot_Call struct {
	*mock.Call
}

// BitOpNot is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - key string
func (_e *MockUniversalClient_Expecter) BitOpNot(ctx interface{}, destKey interface{}, key interface{}) *MockUniversalClient_BitOpNot_Call {
	return &MockUniversalClient_BitOpNot_Call{Call: _e.mock.On("BitOpNot", ctx, destKey, key)}
}

func (_c *MockUniversalClient_BitOpNot_Call) Run(run func(ctx context.Context, destKey string, key string)) *MockUniversalClient_BitOpNot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BitOpNot_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitOpNot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitOpNot_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_BitOpNot_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpOr provides a mock function with given fields: ctx, destKey, keys
func (_m *MockUniversalClient) BitOpOr(ctx context.Context, destKey string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BitOpOr")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitOpOr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpOr'
type MockUniversalClient_BitOpOr_Call struct {
	*mock.Call
}

// BitOpOr is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BitOpOr(ctx interface{}, destKey interface{}, keys ...interface{}) *MockUniversalClient_BitOpOr_Call {
	return &MockUniversalClient_BitOpOr_Call{Call: _e.mock.On("BitOpOr",
		append([]interface{}{ctx, destKey}, keys...)...)}
}

func (_c *MockUniversalClient_BitOpOr_Call) Run(run func(ctx context.Context, destKey string, keys ...string)) *MockUniversalClient_BitOpOr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BitOpOr_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitOpOr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitOpOr_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_BitOpOr_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpXor provides a mock function with given fields: ctx, destKey, keys
func (_m *MockUniversalClient) BitOpXor(ctx context.Context, destKey string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BitOpXor")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitOpXor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpXor'
type MockUniversalClient_BitOpXor_Call struct {
	*mock.Call
}

// BitOpXor is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) BitOpXor(ctx interface{}, destKey interface{}, keys ...interface{}) *MockUniversalClient_BitOpXor_Call {
	return &MockUniversalClient_BitOpXor_Call{Call: _e.mock.On("BitOpXor",
		append([]interface{}{ctx, destKey}, keys...)...)}
}

func (_c *MockUniversalClient_BitOpXor_Call) Run(run func(ctx context.Context, destKey string, keys ...string)) *MockUniversalClient_BitOpXor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BitOpXor_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitOpXor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitOpXor_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_BitOpXor_Call {
	_c.Call.Return(run)
	return _c
}

// BitPos provides a mock function with given fields: ctx, key, bit, pos
func (_m *MockUniversalClient) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *IntCmd {
	_va := make([]interface{}, len(pos))
	for _i := range pos {
		_va[_i] = pos[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, bit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BitPos")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...int64) *IntCmd); ok {
		r0 = rf(ctx, key, bit, pos...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitPos'
type MockUniversalClient_BitPos_Call struct {
	*mock.Call
}

// BitPos is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - bit int64
//   - pos ...int64
func (_e *MockUniversalClient_Expecter) BitPos(ctx interface{}, key interface{}, bit interface{}, pos ...interface{}) *MockUniversalClient_BitPos_Call {
	return &MockUniversalClient_BitPos_Call{Call: _e.mock.On("BitPos",
		append([]interface{}{ctx, key, bit}, pos...)...)}
}

func (_c *MockUniversalClient_BitPos_Call) Run(run func(ctx context.Context, key string, bit int64, pos ...int64)) *MockUniversalClient_BitPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_BitPos_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitPos_Call) RunAndReturn(run func(context.Context, string, int64, ...int64) *IntCmd) *MockUniversalClient_BitPos_Call {
	_c.Call.Return(run)
	return _c
}

// BitPosSpan provides a mock function with given fields: ctx, key, bit, start, end, span
func (_m *MockUniversalClient) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *IntCmd {
	ret := _m.Called(ctx, key, bit, start, end, span)

	if len(ret) == 0 {
		panic("no return value specified for BitPosSpan")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int8, int64, int64, string) *IntCmd); ok {
		r0 = rf(ctx, key, bit, start, end, span)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_BitPosSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitPosSpan'
type MockUniversalClient_BitPosSpan_Call struct {
	*mock.Call
}

// BitPosSpan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - bit int8
//   - start int64
//   - end int64
//   - span string
func (_e *MockUniversalClient_Expecter) BitPosSpan(ctx interface{}, key interface{}, bit interface{}, start interface{}, end interface{}, span interface{}) *MockUniversalClient_BitPosSpan_Call {
	return &MockUniversalClient_BitPosSpan_Call{Call: _e.mock.On("BitPosSpan", ctx, key, bit, start, end, span)}
}

func (_c *MockUniversalClient_BitPosSpan_Call) Run(run func(ctx context.Context, key string, bit int8, start int64, end int64, span string)) *MockUniversalClient_BitPosSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int8), args[3].(int64), args[4].(int64), args[5].(string))
	})
	return _c
}

func (_c *MockUniversalClient_BitPosSpan_Call) Return(_a0 *IntCmd) *MockUniversalClient_BitPosSpan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_BitPosSpan_Call) RunAndReturn(run func(context.Context, string, int8, int64, int64, string) *IntCmd) *MockUniversalClient_BitPosSpan_Call {
	_c.Call.Return(run)
	return _c
}

// CFAdd provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) CFAdd(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFAdd")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFAdd'
type MockUniversalClient_CFAdd_Call struct {
	*mock.Call
}

// CFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) CFAdd(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_CFAdd_Call {
	return &MockUniversalClient_CFAdd_Call{Call: _e.mock.On("CFAdd", ctx, key, element)}
}

func (_c *MockUniversalClient_CFAdd_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_CFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_CFAdd_Call) Return(_a0 *BoolCmd) *MockUniversalClient_CFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFAdd_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_CFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// CFAddNX provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) CFAddNX(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFAddNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFAddNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFAddNX'
type MockUniversalClient_CFAddNX_Call struct {
	*mock.Call
}

// CFAddNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) CFAddNX(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_CFAddNX_Call {
	return &MockUniversalClient_CFAddNX_Call{Call: _e.mock.On("CFAddNX", ctx, key, element)}
}

func (_c *MockUniversalClient_CFAddNX_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_CFAddNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_CFAddNX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_CFAddNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFAddNX_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_CFAddNX_Call {
	_c.Call.Return(run)
	return _c
}

// CFCount provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) CFCount(ctx context.Context, key string, element interface{}) *IntCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFCount'
type MockUniversalClient_CFCount_Call struct {
	*mock.Call
}

// CFCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) CFCount(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_CFCount_Call {
	return &MockUniversalClient_CFCount_Call{Call: _e.mock.On("CFCount", ctx, key, element)}
}

func (_c *MockUniversalClient_CFCount_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_CFCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_CFCount_Call) Return(_a0 *IntCmd) *MockUniversalClient_CFCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFCount_Call) RunAndReturn(run func(context.Context, string, interface{}) *IntCmd) *MockUniversalClient_CFCount_Call {
	_c.Call.Return(run)
	return _c
}

// CFDel provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) CFDel(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFDel")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFDel'
type MockUniversalClient_CFDel_Call struct {
	*mock.Call
}

// CFDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) CFDel(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_CFDel_Call {
	return &MockUniversalClient_CFDel_Call{Call: _e.mock.On("CFDel", ctx, key, element)}
}

func (_c *MockUniversalClient_CFDel_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_CFDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_CFDel_Call) Return(_a0 *BoolCmd) *MockUniversalClient_CFDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFDel_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_CFDel_Call {
	_c.Call.Return(run)
	return _c
}

// CFExists provides a mock function with given fields: ctx, key, element
func (_m *MockUniversalClient) CFExists(ctx context.Context, key string, element interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, element)

	if len(ret) == 0 {
		panic("no return value specified for CFExists")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFExists'
type MockUniversalClient_CFExists_Call struct {
	*mock.Call
}

// CFExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *MockUniversalClient_Expecter) CFExists(ctx interface{}, key interface{}, element interface{}) *MockUniversalClient_CFExists_Call {
	return &MockUniversalClient_CFExists_Call{Call: _e.mock.On("CFExists", ctx, key, element)}
}

func (_c *MockUniversalClient_CFExists_Call) Run(run func(ctx context.Context, key string, element interface{})) *MockUniversalClient_CFExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_CFExists_Call) Return(_a0 *BoolCmd) *MockUniversalClient_CFExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFExists_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_CFExists_Call {
	_c.Call.Return(run)
	return _c
}

// CFInfo provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) CFInfo(ctx context.Context, key string) *CFInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for CFInfo")
	}

	var r0 *CFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *CFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CFInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInfo'
type MockUniversalClient_CFInfo_Call struct {
	*mock.Call
}

// CFInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) CFInfo(ctx interface{}, key interface{}) *MockUniversalClient_CFInfo_Call {
	return &MockUniversalClient_CFInfo_Call{Call: _e.mock.On("CFInfo", ctx, key)}
}

func (_c *MockUniversalClient_CFInfo_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_CFInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_CFInfo_Call) Return(_a0 *CFInfoCmd) *MockUniversalClient_CFInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFInfo_Call) RunAndReturn(run func(context.Context, string) *CFInfoCmd) *MockUniversalClient_CFInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CFInsert provides a mock function with given fields: ctx, key, options, elements
func (_m *MockUniversalClient) CFInsert(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CFInsert")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *CFInsertOptions, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInsert'
type MockUniversalClient_CFInsert_Call struct {
	*mock.Call
}

// CFInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *CFInsertOptions
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) CFInsert(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *MockUniversalClient_CFInsert_Call {
	return &MockUniversalClient_CFInsert_Call{Call: _e.mock.On("CFInsert",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *MockUniversalClient_CFInsert_Call) Run(run func(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{})) *MockUniversalClient_CFInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*CFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CFInsert_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_CFInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFInsert_Call) RunAndReturn(run func(context.Context, string, *CFInsertOptions, ...interface{}) *BoolSliceCmd) *MockUniversalClient_CFInsert_Call {
	_c.Call.Return(run)
	return _c
}

// CFInsertNX provides a mock function with given fields: ctx, key, options, elements
func (_m *MockUniversalClient) CFInsertNX(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CFInsertNX")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *CFInsertOptions, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFInsertNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInsertNX'
type MockUniversalClient_CFInsertNX_Call struct {
	*mock.Call
}

// CFInsertNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *CFInsertOptions
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) CFInsertNX(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *MockUniversalClient_CFInsertNX_Call {
	return &MockUniversalClient_CFInsertNX_Call{Call: _e.mock.On("CFInsertNX",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *MockUniversalClient_CFInsertNX_Call) Run(run func(ctx context.Context, key string, options *CFInsertOptions, elements ...interface{})) *MockUniversalClient_CFInsertNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*CFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CFInsertNX_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_CFInsertNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFInsertNX_Call) RunAndReturn(run func(context.Context, string, *CFInsertOptions, ...interface{}) *IntSliceCmd) *MockUniversalClient_CFInsertNX_Call {
	_c.Call.Return(run)
	return _c
}

// CFLoadChunk provides a mock function with given fields: ctx, key, iterator, data
func (_m *MockUniversalClient) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, iterator, data)

	if len(ret) == 0 {
		panic("no return value specified for CFLoadChunk")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, iterator, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFLoadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFLoadChunk'
type MockUniversalClient_CFLoadChunk_Call struct {
	*mock.Call
}

// CFLoadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
//   - data interface{}
func (_e *MockUniversalClient_Expecter) CFLoadChunk(ctx interface{}, key interface{}, iterator interface{}, data interface{}) *MockUniversalClient_CFLoadChunk_Call {
	return &MockUniversalClient_CFLoadChunk_Call{Call: _e.mock.On("CFLoadChunk", ctx, key, iterator, data)}
}

func (_c *MockUniversalClient_CFLoadChunk_Call) Run(run func(ctx context.Context, key string, iterator int64, data interface{})) *MockUniversalClient_CFLoadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_CFLoadChunk_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CFLoadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFLoadChunk_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *StatusCmd) *MockUniversalClient_CFLoadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// CFMExists provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) CFMExists(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CFMExists")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFMExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFMExists'
type MockUniversalClient_CFMExists_Call struct {
	*mock.Call
}

// CFMExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) CFMExists(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_CFMExists_Call {
	return &MockUniversalClient_CFMExists_Call{Call: _e.mock.On("CFMExists",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_CFMExists_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_CFMExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CFMExists_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_CFMExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFMExists_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockUniversalClient_CFMExists_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserve provides a mock function with given fields: ctx, key, capacity
func (_m *MockUniversalClient) CFReserve(ctx context.Context, key string, capacity int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity)

	if len(ret) == 0 {
		panic("no return value specified for CFReserve")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserve'
type MockUniversalClient_CFReserve_Call struct {
	*mock.Call
}

// CFReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
func (_e *MockUniversalClient_Expecter) CFReserve(ctx interface{}, key interface{}, capacity interface{}) *MockUniversalClient_CFReserve_Call {
	return &MockUniversalClient_CFReserve_Call{Call: _e.mock.On("CFReserve", ctx, key, capacity)}
}

func (_c *MockUniversalClient_CFReserve_Call) Run(run func(ctx context.Context, key string, capacity int64)) *MockUniversalClient_CFReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_CFReserve_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CFReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFReserve_Call) RunAndReturn(run func(context.Context, string, int64) *StatusCmd) *MockUniversalClient_CFReserve_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveBucketSize provides a mock function with given fields: ctx, key, capacity, bucketsize
func (_m *MockUniversalClient) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity, bucketsize)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveBucketSize")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity, bucketsize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFReserveBucketSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveBucketSize'
type MockUniversalClient_CFReserveBucketSize_Call struct {
	*mock.Call
}

// CFReserveBucketSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - bucketsize int64
func (_e *MockUniversalClient_Expecter) CFReserveBucketSize(ctx interface{}, key interface{}, capacity interface{}, bucketsize interface{}) *MockUniversalClient_CFReserveBucketSize_Call {
	return &MockUniversalClient_CFReserveBucketSize_Call{Call: _e.mock.On("CFReserveBucketSize", ctx, key, capacity, bucketsize)}
}

func (_c *MockUniversalClient_CFReserveBucketSize_Call) Run(run func(ctx context.Context, key string, capacity int64, bucketsize int64)) *MockUniversalClient_CFReserveBucketSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_CFReserveBucketSize_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CFReserveBucketSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFReserveBucketSize_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockUniversalClient_CFReserveBucketSize_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveExpansion provides a mock function with given fields: ctx, key, capacity, expansion
func (_m *MockUniversalClient) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity, expansion)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveExpansion")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity, expansion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFReserveExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveExpansion'
type MockUniversalClient_CFReserveExpansion_Call struct {
	*mock.Call
}

// CFReserveExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - expansion int64
func (_e *MockUniversalClient_Expecter) CFReserveExpansion(ctx interface{}, key interface{}, capacity interface{}, expansion interface{}) *MockUniversalClient_CFReserveExpansion_Call {
	return &MockUniversalClient_CFReserveExpansion_Call{Call: _e.mock.On("CFReserveExpansion", ctx, key, capacity, expansion)}
}

func (_c *MockUniversalClient_CFReserveExpansion_Call) Run(run func(ctx context.Context, key string, capacity int64, expansion int64)) *MockUniversalClient_CFReserveExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_CFReserveExpansion_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CFReserveExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFReserveExpansion_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockUniversalClient_CFReserveExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveMaxIterations provides a mock function with given fields: ctx, key, capacity, maxiterations
func (_m *MockUniversalClient) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *StatusCmd {
	ret := _m.Called(ctx, key, capacity, maxiterations)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveMaxIterations")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, capacity, maxiterations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFReserveMaxIterations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveMaxIterations'
type MockUniversalClient_CFReserveMaxIterations_Call struct {
	*mock.Call
}

// CFReserveMaxIterations is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - maxiterations int64
func (_e *MockUniversalClient_Expecter) CFReserveMaxIterations(ctx interface{}, key interface{}, capacity interface{}, maxiterations interface{}) *MockUniversalClient_CFReserveMaxIterations_Call {
	return &MockUniversalClient_CFReserveMaxIterations_Call{Call: _e.mock.On("CFReserveMaxIterations", ctx, key, capacity, maxiterations)}
}

func (_c *MockUniversalClient_CFReserveMaxIterations_Call) Run(run func(ctx context.Context, key string, capacity int64, maxiterations int64)) *MockUniversalClient_CFReserveMaxIterations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_CFReserveMaxIterations_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CFReserveMaxIterations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFReserveMaxIterations_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockUniversalClient_CFReserveMaxIterations_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockUniversalClient) CFReserveWithArgs(ctx context.Context, key string, options *CFReserveOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for CFReserveWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *CFReserveOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFReserveWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveWithArgs'
type MockUniversalClient_CFReserveWithArgs_Call struct {
	*mock.Call
}

// CFReserveWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *CFReserveOptions
func (_e *MockUniversalClient_Expecter) CFReserveWithArgs(ctx interface{}, key interface{}, options interface{}) *MockUniversalClient_CFReserveWithArgs_Call {
	return &MockUniversalClient_CFReserveWithArgs_Call{Call: _e.mock.On("CFReserveWithArgs", ctx, key, options)}
}

func (_c *MockUniversalClient_CFReserveWithArgs_Call) Run(run func(ctx context.Context, key string, options *CFReserveOptions)) *MockUniversalClient_CFReserveWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*CFReserveOptions))
	})
	return _c
}

func (_c *MockUniversalClient_CFReserveWithArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CFReserveWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFReserveWithArgs_Call) RunAndReturn(run func(context.Context, string, *CFReserveOptions) *StatusCmd) *MockUniversalClient_CFReserveWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// CFScanDump provides a mock function with given fields: ctx, key, iterator
func (_m *MockUniversalClient) CFScanDump(ctx context.Context, key string, iterator int64) *ScanDumpCmd {
	ret := _m.Called(ctx, key, iterator)

	if len(ret) == 0 {
		panic("no return value specified for CFScanDump")
	}

	var r0 *ScanDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *ScanDumpCmd); ok {
		r0 = rf(ctx, key, iterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanDumpCmd)
		}
	}

	return r0
}

// MockUniversalClient_CFScanDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFScanDump'
type MockUniversalClient_CFScanDump_Call struct {
	*mock.Call
}

// CFScanDump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
func (_e *MockUniversalClient_Expecter) CFScanDump(ctx interface{}, key interface{}, iterator interface{}) *MockUniversalClient_CFScanDump_Call {
	return &MockUniversalClient_CFScanDump_Call{Call: _e.mock.On("CFScanDump", ctx, key, iterator)}
}

func (_c *MockUniversalClient_CFScanDump_Call) Run(run func(ctx context.Context, key string, iterator int64)) *MockUniversalClient_CFScanDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_CFScanDump_Call) Return(_a0 *ScanDumpCmd) *MockUniversalClient_CFScanDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CFScanDump_Call) RunAndReturn(run func(context.Context, string, int64) *ScanDumpCmd) *MockUniversalClient_CFScanDump_Call {
	_c.Call.Return(run)
	return _c
}

// CMSIncrBy provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CMSIncrBy")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSIncrBy'
type MockUniversalClient_CMSIncrBy_Call struct {
	*mock.Call
}

// CMSIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) CMSIncrBy(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_CMSIncrBy_Call {
	return &MockUniversalClient_CMSIncrBy_Call{Call: _e.mock.On("CMSIncrBy",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_CMSIncrBy_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_CMSIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CMSIncrBy_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_CMSIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSIncrBy_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_CMSIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInfo provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) CMSInfo(ctx context.Context, key string) *CMSInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for CMSInfo")
	}

	var r0 *CMSInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *CMSInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CMSInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInfo'
type MockUniversalClient_CMSInfo_Call struct {
	*mock.Call
}

// CMSInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) CMSInfo(ctx interface{}, key interface{}) *MockUniversalClient_CMSInfo_Call {
	return &MockUniversalClient_CMSInfo_Call{Call: _e.mock.On("CMSInfo", ctx, key)}
}

func (_c *MockUniversalClient_CMSInfo_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_CMSInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_CMSInfo_Call) Return(_a0 *CMSInfoCmd) *MockUniversalClient_CMSInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSInfo_Call) RunAndReturn(run func(context.Context, string) *CMSInfoCmd) *MockUniversalClient_CMSInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInitByDim provides a mock function with given fields: ctx, key, width, height
func (_m *MockUniversalClient) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *StatusCmd {
	ret := _m.Called(ctx, key, width, height)

	if len(ret) == 0 {
		panic("no return value specified for CMSInitByDim")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, width, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSInitByDim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInitByDim'
type MockUniversalClient_CMSInitByDim_Call struct {
	*mock.Call
}

// CMSInitByDim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - width int64
//   - height int64
func (_e *MockUniversalClient_Expecter) CMSInitByDim(ctx interface{}, key interface{}, width interface{}, height interface{}) *MockUniversalClient_CMSInitByDim_Call {
	return &MockUniversalClient_CMSInitByDim_Call{Call: _e.mock.On("CMSInitByDim", ctx, key, width, height)}
}

func (_c *MockUniversalClient_CMSInitByDim_Call) Run(run func(ctx context.Context, key string, width int64, height int64)) *MockUniversalClient_CMSInitByDim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_CMSInitByDim_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CMSInitByDim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSInitByDim_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockUniversalClient_CMSInitByDim_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInitByProb provides a mock function with given fields: ctx, key, errorRate, probability
func (_m *MockUniversalClient) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *StatusCmd {
	ret := _m.Called(ctx, key, errorRate, probability)

	if len(ret) == 0 {
		panic("no return value specified for CMSInitByProb")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) *StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, probability)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSInitByProb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInitByProb'
type MockUniversalClient_CMSInitByProb_Call struct {
	*mock.Call
}

// CMSInitByProb is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - probability float64
func (_e *MockUniversalClient_Expecter) CMSInitByProb(ctx interface{}, key interface{}, errorRate interface{}, probability interface{}) *MockUniversalClient_CMSInitByProb_Call {
	return &MockUniversalClient_CMSInitByProb_Call{Call: _e.mock.On("CMSInitByProb", ctx, key, errorRate, probability)}
}

func (_c *MockUniversalClient_CMSInitByProb_Call) Run(run func(ctx context.Context, key string, errorRate float64, probability float64)) *MockUniversalClient_CMSInitByProb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_CMSInitByProb_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CMSInitByProb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSInitByProb_Call) RunAndReturn(run func(context.Context, string, float64, float64) *StatusCmd) *MockUniversalClient_CMSInitByProb_Call {
	_c.Call.Return(run)
	return _c
}

// CMSMerge provides a mock function with given fields: ctx, destKey, sourceKeys
func (_m *MockUniversalClient) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *StatusCmd {
	_va := make([]interface{}, len(sourceKeys))
	for _i := range sourceKeys {
		_va[_i] = sourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CMSMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *StatusCmd); ok {
		r0 = rf(ctx, destKey, sourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSMerge'
type MockUniversalClient_CMSMerge_Call struct {
	*mock.Call
}

// CMSMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - sourceKeys ...string
func (_e *MockUniversalClient_Expecter) CMSMerge(ctx interface{}, destKey interface{}, sourceKeys ...interface{}) *MockUniversalClient_CMSMerge_Call {
	return &MockUniversalClient_CMSMerge_Call{Call: _e.mock.On("CMSMerge",
		append([]interface{}{ctx, destKey}, sourceKeys...)...)}
}

func (_c *MockUniversalClient_CMSMerge_Call) Run(run func(ctx context.Context, destKey string, sourceKeys ...string)) *MockUniversalClient_CMSMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CMSMerge_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CMSMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSMerge_Call) RunAndReturn(run func(context.Context, string, ...string) *StatusCmd) *MockUniversalClient_CMSMerge_Call {
	_c.Call.Return(run)
	return _c
}

// CMSMergeWithWeight provides a mock function with given fields: ctx, destKey, sourceKeys
func (_m *MockUniversalClient) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *StatusCmd {
	ret := _m.Called(ctx, destKey, sourceKeys)

	if len(ret) == 0 {
		panic("no return value specified for CMSMergeWithWeight")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]int64) *StatusCmd); ok {
		r0 = rf(ctx, destKey, sourceKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSMergeWithWeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSMergeWithWeight'
type MockUniversalClient_CMSMergeWithWeight_Call struct {
	*mock.Call
}

// CMSMergeWithWeight is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - sourceKeys map[string]int64
func (_e *MockUniversalClient_Expecter) CMSMergeWithWeight(ctx interface{}, destKey interface{}, sourceKeys interface{}) *MockUniversalClient_CMSMergeWithWeight_Call {
	return &MockUniversalClient_CMSMergeWithWeight_Call{Call: _e.mock.On("CMSMergeWithWeight", ctx, destKey, sourceKeys)}
}

func (_c *MockUniversalClient_CMSMergeWithWeight_Call) Run(run func(ctx context.Context, destKey string, sourceKeys map[string]int64)) *MockUniversalClient_CMSMergeWithWeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]int64))
	})
	return _c
}

func (_c *MockUniversalClient_CMSMergeWithWeight_Call) Return(_a0 *StatusCmd) *MockUniversalClient_CMSMergeWithWeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSMergeWithWeight_Call) RunAndReturn(run func(context.Context, string, map[string]int64) *StatusCmd) *MockUniversalClient_CMSMergeWithWeight_Call {
	_c.Call.Return(run)
	return _c
}

// CMSQuery provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) CMSQuery(ctx context.Context, key string, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CMSQuery")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CMSQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSQuery'
type MockUniversalClient_CMSQuery_Call struct {
	*mock.Call
}

// CMSQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) CMSQuery(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_CMSQuery_Call {
	return &MockUniversalClient_CMSQuery_Call{Call: _e.mock.On("CMSQuery",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_CMSQuery_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_CMSQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CMSQuery_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_CMSQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CMSQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_CMSQuery_Call {
	_c.Call.Return(run)
	return _c
}

// ClientGetName provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClientGetName(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientGetName")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientGetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientGetName'
type MockUniversalClient_ClientGetName_Call struct {
	*mock.Call
}

// ClientGetName is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClientGetName(ctx interface{}) *MockUniversalClient_ClientGetName_Call {
	return &MockUniversalClient_ClientGetName_Call{Call: _e.mock.On("ClientGetName", ctx)}
}

func (_c *MockUniversalClient_ClientGetName_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClientGetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClientGetName_Call) Return(_a0 *StringCmd) *MockUniversalClient_ClientGetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientGetName_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_ClientGetName_Call {
	_c.Call.Return(run)
	return _c
}

// ClientID provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClientID(ctx context.Context) *IntCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientID")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientID'
type MockUniversalClient_ClientID_Call struct {
	*mock.Call
}

// ClientID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClientID(ctx interface{}) *MockUniversalClient_ClientID_Call {
	return &MockUniversalClient_ClientID_Call{Call: _e.mock.On("ClientID", ctx)}
}

func (_c *MockUniversalClient_ClientID_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClientID_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClientID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientID_Call) RunAndReturn(run func(context.Context) *IntCmd) *MockUniversalClient_ClientID_Call {
	_c.Call.Return(run)
	return _c
}

// ClientInfo provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClientInfo(ctx context.Context) *ClientInfoCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientInfo")
	}

	var r0 *ClientInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClientInfoCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClientInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientInfo'
type MockUniversalClient_ClientInfo_Call struct {
	*mock.Call
}

// ClientInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClientInfo(ctx interface{}) *MockUniversalClient_ClientInfo_Call {
	return &MockUniversalClient_ClientInfo_Call{Call: _e.mock.On("ClientInfo", ctx)}
}

func (_c *MockUniversalClient_ClientInfo_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClientInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClientInfo_Call) Return(_a0 *ClientInfoCmd) *MockUniversalClient_ClientInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientInfo_Call) RunAndReturn(run func(context.Context) *ClientInfoCmd) *MockUniversalClient_ClientInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ClientKill provides a mock function with given fields: ctx, ipPort
func (_m *MockUniversalClient) ClientKill(ctx context.Context, ipPort string) *StatusCmd {
	ret := _m.Called(ctx, ipPort)

	if len(ret) == 0 {
		panic("no return value specified for ClientKill")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, ipPort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientKill'
type MockUniversalClient_ClientKill_Call struct {
	*mock.Call
}

// ClientKill is a helper method to define mock.On call
//   - ctx context.Context
//   - ipPort string
func (_e *MockUniversalClient_Expecter) ClientKill(ctx interface{}, ipPort interface{}) *MockUniversalClient_ClientKill_Call {
	return &MockUniversalClient_ClientKill_Call{Call: _e.mock.On("ClientKill", ctx, ipPort)}
}

func (_c *MockUniversalClient_ClientKill_Call) Run(run func(ctx context.Context, ipPort string)) *MockUniversalClient_ClientKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClientKill_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClientKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientKill_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_ClientKill_Call {
	_c.Call.Return(run)
	return _c
}

// ClientKillByFilter provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) ClientKillByFilter(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClientKillByFilter")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientKillByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientKillByFilter'
type MockUniversalClient_ClientKillByFilter_Call struct {
	*mock.Call
}

// ClientKillByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) ClientKillByFilter(ctx interface{}, keys ...interface{}) *MockUniversalClient_ClientKillByFilter_Call {
	return &MockUniversalClient_ClientKillByFilter_Call{Call: _e.mock.On("ClientKillByFilter",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_ClientKillByFilter_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_ClientKillByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ClientKillByFilter_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClientKillByFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientKillByFilter_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockUniversalClient_ClientKillByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// ClientList provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClientList(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientList")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientList'
type MockUniversalClient_ClientList_Call struct {
	*mock.Call
}

// ClientList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClientList(ctx interface{}) *MockUniversalClient_ClientList_Call {
	return &MockUniversalClient_ClientList_Call{Call: _e.mock.On("ClientList", ctx)}
}

func (_c *MockUniversalClient_ClientList_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClientList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClientList_Call) Return(_a0 *StringCmd) *MockUniversalClient_ClientList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientList_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_ClientList_Call {
	_c.Call.Return(run)
	return _c
}

// ClientPause provides a mock function with given fields: ctx, dur
func (_m *MockUniversalClient) ClientPause(ctx context.Context, dur time.Duration) *BoolCmd {
	ret := _m.Called(ctx, dur)

	if len(ret) == 0 {
		panic("no return value specified for ClientPause")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, dur)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientPause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientPause'
type MockUniversalClient_ClientPause_Call struct {
	*mock.Call
}

// ClientPause is a helper method to define mock.On call
//   - ctx context.Context
//   - dur time.Duration
func (_e *MockUniversalClient_Expecter) ClientPause(ctx interface{}, dur interface{}) *MockUniversalClient_ClientPause_Call {
	return &MockUniversalClient_ClientPause_Call{Call: _e.mock.On("ClientPause", ctx, dur)}
}

func (_c *MockUniversalClient_ClientPause_Call) Run(run func(ctx context.Context, dur time.Duration)) *MockUniversalClient_ClientPause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_ClientPause_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ClientPause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientPause_Call) RunAndReturn(run func(context.Context, time.Duration) *BoolCmd) *MockUniversalClient_ClientPause_Call {
	_c.Call.Return(run)
	return _c
}

// ClientUnblock provides a mock function with given fields: ctx, id
func (_m *MockUniversalClient) ClientUnblock(ctx context.Context, id int64) *IntCmd {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ClientUnblock")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *IntCmd); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientUnblock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientUnblock'
type MockUniversalClient_ClientUnblock_Call struct {
	*mock.Call
}

// ClientUnblock is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUniversalClient_Expecter) ClientUnblock(ctx interface{}, id interface{}) *MockUniversalClient_ClientUnblock_Call {
	return &MockUniversalClient_ClientUnblock_Call{Call: _e.mock.On("ClientUnblock", ctx, id)}
}

func (_c *MockUniversalClient_ClientUnblock_Call) Run(run func(ctx context.Context, id int64)) *MockUniversalClient_ClientUnblock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ClientUnblock_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClientUnblock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientUnblock_Call) RunAndReturn(run func(context.Context, int64) *IntCmd) *MockUniversalClient_ClientUnblock_Call {
	_c.Call.Return(run)
	return _c
}

// ClientUnblockWithError provides a mock function with given fields: ctx, id
func (_m *MockUniversalClient) ClientUnblockWithError(ctx context.Context, id int64) *IntCmd {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ClientUnblockWithError")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *IntCmd); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientUnblockWithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientUnblockWithError'
type MockUniversalClient_ClientUnblockWithError_Call struct {
	*mock.Call
}

// ClientUnblockWithError is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUniversalClient_Expecter) ClientUnblockWithError(ctx interface{}, id interface{}) *MockUniversalClient_ClientUnblockWithError_Call {
	return &MockUniversalClient_ClientUnblockWithError_Call{Call: _e.mock.On("ClientUnblockWithError", ctx, id)}
}

func (_c *MockUniversalClient_ClientUnblockWithError_Call) Run(run func(ctx context.Context, id int64)) *MockUniversalClient_ClientUnblockWithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ClientUnblockWithError_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClientUnblockWithError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientUnblockWithError_Call) RunAndReturn(run func(context.Context, int64) *IntCmd) *MockUniversalClient_ClientUnblockWithError_Call {
	_c.Call.Return(run)
	return _c
}

// ClientUnpause provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClientUnpause(ctx context.Context) *BoolCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientUnpause")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context) *BoolCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClientUnpause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientUnpause'
type MockUniversalClient_ClientUnpause_Call struct {
	*mock.Call
}

// ClientUnpause is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClientUnpause(ctx interface{}) *MockUniversalClient_ClientUnpause_Call {
	return &MockUniversalClient_ClientUnpause_Call{Call: _e.mock.On("ClientUnpause", ctx)}
}

func (_c *MockUniversalClient_ClientUnpause_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClientUnpause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClientUnpause_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ClientUnpause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClientUnpause_Call) RunAndReturn(run func(context.Context) *BoolCmd) *MockUniversalClient_ClientUnpause_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockUniversalClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUniversalClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockUniversalClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockUniversalClient_Expecter) Close() *MockUniversalClient_Close_Call {
	return &MockUniversalClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockUniversalClient_Close_Call) Run(run func()) *MockUniversalClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUniversalClient_Close_Call) Return(_a0 error) *MockUniversalClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Close_Call) RunAndReturn(run func() error) *MockUniversalClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterAddSlots provides a mock function with given fields: ctx, slots
func (_m *MockUniversalClient) ClusterAddSlots(ctx context.Context, slots ...int) *StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterAddSlots")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterAddSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterAddSlots'
type MockUniversalClient_ClusterAddSlots_Call struct {
	*mock.Call
}

// ClusterAddSlots is a helper method to define mock.On call
//   - ctx context.Context
//   - slots ...int
func (_e *MockUniversalClient_Expecter) ClusterAddSlots(ctx interface{}, slots ...interface{}) *MockUniversalClient_ClusterAddSlots_Call {
	return &MockUniversalClient_ClusterAddSlots_Call{Call: _e.mock.On("ClusterAddSlots",
		append([]interface{}{ctx}, slots...)...)}
}

func (_c *MockUniversalClient_ClusterAddSlots_Call) Run(run func(ctx context.Context, slots ...int)) *MockUniversalClient_ClusterAddSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ClusterAddSlots_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterAddSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterAddSlots_Call) RunAndReturn(run func(context.Context, ...int) *StatusCmd) *MockUniversalClient_ClusterAddSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterAddSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *MockUniversalClient) ClusterAddSlotsRange(ctx context.Context, min int, max int) *StatusCmd {
	ret := _m.Called(ctx, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ClusterAddSlotsRange")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterAddSlotsRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterAddSlotsRange'
type MockUniversalClient_ClusterAddSlotsRange_Call struct {
	*mock.Call
}

// ClusterAddSlotsRange is a helper method to define mock.On call
//   - ctx context.Context
//   - min int
//   - max int
func (_e *MockUniversalClient_Expecter) ClusterAddSlotsRange(ctx interface{}, min interface{}, max interface{}) *MockUniversalClient_ClusterAddSlotsRange_Call {
	return &MockUniversalClient_ClusterAddSlotsRange_Call{Call: _e.mock.On("ClusterAddSlotsRange", ctx, min, max)}
}

func (_c *MockUniversalClient_ClusterAddSlotsRange_Call) Run(run func(ctx context.Context, min int, max int)) *MockUniversalClient_ClusterAddSlotsRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterAddSlotsRange_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterAddSlotsRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterAddSlotsRange_Call) RunAndReturn(run func(context.Context, int, int) *StatusCmd) *MockUniversalClient_ClusterAddSlotsRange_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterCountFailureReports provides a mock function with given fields: ctx, nodeID
func (_m *MockUniversalClient) ClusterCountFailureReports(ctx context.Context, nodeID string) *IntCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterCountFailureReports")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterCountFailureReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterCountFailureReports'
type MockUniversalClient_ClusterCountFailureReports_Call struct {
	*mock.Call
}

// ClusterCountFailureReports is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockUniversalClient_Expecter) ClusterCountFailureReports(ctx interface{}, nodeID interface{}) *MockUniversalClient_ClusterCountFailureReports_Call {
	return &MockUniversalClient_ClusterCountFailureReports_Call{Call: _e.mock.On("ClusterCountFailureReports", ctx, nodeID)}
}

func (_c *MockUniversalClient_ClusterCountFailureReports_Call) Run(run func(ctx context.Context, nodeID string)) *MockUniversalClient_ClusterCountFailureReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterCountFailureReports_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClusterCountFailureReports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterCountFailureReports_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_ClusterCountFailureReports_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterCountKeysInSlot provides a mock function with given fields: ctx, slot
func (_m *MockUniversalClient) ClusterCountKeysInSlot(ctx context.Context, slot int) *IntCmd {
	ret := _m.Called(ctx, slot)

	if len(ret) == 0 {
		panic("no return value specified for ClusterCountKeysInSlot")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int) *IntCmd); ok {
		r0 = rf(ctx, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterCountKeysInSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterCountKeysInSlot'
type MockUniversalClient_ClusterCountKeysInSlot_Call struct {
	*mock.Call
}

// ClusterCountKeysInSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
func (_e *MockUniversalClient_Expecter) ClusterCountKeysInSlot(ctx interface{}, slot interface{}) *MockUniversalClient_ClusterCountKeysInSlot_Call {
	return &MockUniversalClient_ClusterCountKeysInSlot_Call{Call: _e.mock.On("ClusterCountKeysInSlot", ctx, slot)}
}

func (_c *MockUniversalClient_ClusterCountKeysInSlot_Call) Run(run func(ctx context.Context, slot int)) *MockUniversalClient_ClusterCountKeysInSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterCountKeysInSlot_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClusterCountKeysInSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterCountKeysInSlot_Call) RunAndReturn(run func(context.Context, int) *IntCmd) *MockUniversalClient_ClusterCountKeysInSlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterDelSlots provides a mock function with given fields: ctx, slots
func (_m *MockUniversalClient) ClusterDelSlots(ctx context.Context, slots ...int) *StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterDelSlots")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterDelSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelSlots'
type MockUniversalClient_ClusterDelSlots_Call struct {
	*mock.Call
}

// ClusterDelSlots is a helper method to define mock.On call
//   - ctx context.Context
//   - slots ...int
func (_e *MockUniversalClient_Expecter) ClusterDelSlots(ctx interface{}, slots ...interface{}) *MockUniversalClient_ClusterDelSlots_Call {
	return &MockUniversalClient_ClusterDelSlots_Call{Call: _e.mock.On("ClusterDelSlots",
		append([]interface{}{ctx}, slots...)...)}
}

func (_c *MockUniversalClient_ClusterDelSlots_Call) Run(run func(ctx context.Context, slots ...int)) *MockUniversalClient_ClusterDelSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ClusterDelSlots_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterDelSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterDelSlots_Call) RunAndReturn(run func(context.Context, ...int) *StatusCmd) *MockUniversalClient_ClusterDelSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterDelSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *MockUniversalClient) ClusterDelSlotsRange(ctx context.Context, min int, max int) *StatusCmd {
	ret := _m.Called(ctx, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ClusterDelSlotsRange")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterDelSlotsRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelSlotsRange'
type MockUniversalClient_ClusterDelSlotsRange_Call struct {
	*mock.Call
}

// ClusterDelSlotsRange is a helper method to define mock.On call
//   - ctx context.Context
//   - min int
//   - max int
func (_e *MockUniversalClient_Expecter) ClusterDelSlotsRange(ctx interface{}, min interface{}, max interface{}) *MockUniversalClient_ClusterDelSlotsRange_Call {
	return &MockUniversalClient_ClusterDelSlotsRange_Call{Call: _e.mock.On("ClusterDelSlotsRange", ctx, min, max)}
}

func (_c *MockUniversalClient_ClusterDelSlotsRange_Call) Run(run func(ctx context.Context, min int, max int)) *MockUniversalClient_ClusterDelSlotsRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterDelSlotsRange_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterDelSlotsRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterDelSlotsRange_Call) RunAndReturn(run func(context.Context, int, int) *StatusCmd) *MockUniversalClient_ClusterDelSlotsRange_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterFailover provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterFailover(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterFailover")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterFailover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterFailover'
type MockUniversalClient_ClusterFailover_Call struct {
	*mock.Call
}

// ClusterFailover is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterFailover(ctx interface{}) *MockUniversalClient_ClusterFailover_Call {
	return &MockUniversalClient_ClusterFailover_Call{Call: _e.mock.On("ClusterFailover", ctx)}
}

func (_c *MockUniversalClient_ClusterFailover_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterFailover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterFailover_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterFailover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterFailover_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ClusterFailover_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterForget provides a mock function with given fields: ctx, nodeID
func (_m *MockUniversalClient) ClusterForget(ctx context.Context, nodeID string) *StatusCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterForget")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterForget'
type MockUniversalClient_ClusterForget_Call struct {
	*mock.Call
}

// ClusterForget is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockUniversalClient_Expecter) ClusterForget(ctx interface{}, nodeID interface{}) *MockUniversalClient_ClusterForget_Call {
	return &MockUniversalClient_ClusterForget_Call{Call: _e.mock.On("ClusterForget", ctx, nodeID)}
}

func (_c *MockUniversalClient_ClusterForget_Call) Run(run func(ctx context.Context, nodeID string)) *MockUniversalClient_ClusterForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterForget_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterForget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterForget_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_ClusterForget_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterGetKeysInSlot provides a mock function with given fields: ctx, slot, count
func (_m *MockUniversalClient) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *StringSliceCmd {
	ret := _m.Called(ctx, slot, count)

	if len(ret) == 0 {
		panic("no return value specified for ClusterGetKeysInSlot")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *StringSliceCmd); ok {
		r0 = rf(ctx, slot, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterGetKeysInSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterGetKeysInSlot'
type MockUniversalClient_ClusterGetKeysInSlot_Call struct {
	*mock.Call
}

// ClusterGetKeysInSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
//   - count int
func (_e *MockUniversalClient_Expecter) ClusterGetKeysInSlot(ctx interface{}, slot interface{}, count interface{}) *MockUniversalClient_ClusterGetKeysInSlot_Call {
	return &MockUniversalClient_ClusterGetKeysInSlot_Call{Call: _e.mock.On("ClusterGetKeysInSlot", ctx, slot, count)}
}

func (_c *MockUniversalClient_ClusterGetKeysInSlot_Call) Run(run func(ctx context.Context, slot int, count int)) *MockUniversalClient_ClusterGetKeysInSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterGetKeysInSlot_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ClusterGetKeysInSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterGetKeysInSlot_Call) RunAndReturn(run func(context.Context, int, int) *StringSliceCmd) *MockUniversalClient_ClusterGetKeysInSlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterInfo provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterInfo(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterInfo")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterInfo'
type MockUniversalClient_ClusterInfo_Call struct {
	*mock.Call
}

// ClusterInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterInfo(ctx interface{}) *MockUniversalClient_ClusterInfo_Call {
	return &MockUniversalClient_ClusterInfo_Call{Call: _e.mock.On("ClusterInfo", ctx)}
}

func (_c *MockUniversalClient_ClusterInfo_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterInfo_Call) Return(_a0 *StringCmd) *MockUniversalClient_ClusterInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterInfo_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_ClusterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterKeySlot provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ClusterKeySlot(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ClusterKeySlot")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterKeySlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterKeySlot'
type MockUniversalClient_ClusterKeySlot_Call struct {
	*mock.Call
}

// ClusterKeySlot is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ClusterKeySlot(ctx interface{}, key interface{}) *MockUniversalClient_ClusterKeySlot_Call {
	return &MockUniversalClient_ClusterKeySlot_Call{Call: _e.mock.On("ClusterKeySlot", ctx, key)}
}

func (_c *MockUniversalClient_ClusterKeySlot_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ClusterKeySlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterKeySlot_Call) Return(_a0 *IntCmd) *MockUniversalClient_ClusterKeySlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterKeySlot_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_ClusterKeySlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterLinks provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterLinks(ctx context.Context) *ClusterLinksCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterLinks")
	}

	var r0 *ClusterLinksCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClusterLinksCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterLinksCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterLinks'
type MockUniversalClient_ClusterLinks_Call struct {
	*mock.Call
}

// ClusterLinks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterLinks(ctx interface{}) *MockUniversalClient_ClusterLinks_Call {
	return &MockUniversalClient_ClusterLinks_Call{Call: _e.mock.On("ClusterLinks", ctx)}
}

func (_c *MockUniversalClient_ClusterLinks_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterLinks_Call) Return(_a0 *ClusterLinksCmd) *MockUniversalClient_ClusterLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterLinks_Call) RunAndReturn(run func(context.Context) *ClusterLinksCmd) *MockUniversalClient_ClusterLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMeet provides a mock function with given fields: ctx, host, port
func (_m *MockUniversalClient) ClusterMeet(ctx context.Context, host string, port string) *StatusCmd {
	ret := _m.Called(ctx, host, port)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMeet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterMeet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMeet'
type MockUniversalClient_ClusterMeet_Call struct {
	*mock.Call
}

// ClusterMeet is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
func (_e *MockUniversalClient_Expecter) ClusterMeet(ctx interface{}, host interface{}, port interface{}) *MockUniversalClient_ClusterMeet_Call {
	return &MockUniversalClient_ClusterMeet_Call{Call: _e.mock.On("ClusterMeet", ctx, host, port)}
}

func (_c *MockUniversalClient_ClusterMeet_Call) Run(run func(ctx context.Context, host string, port string)) *MockUniversalClient_ClusterMeet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterMeet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterMeet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterMeet_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_ClusterMeet_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMyID provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterMyID(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMyID")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterMyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMyID'
type MockUniversalClient_ClusterMyID_Call struct {
	*mock.Call
}

// ClusterMyID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterMyID(ctx interface{}) *MockUniversalClient_ClusterMyID_Call {
	return &MockUniversalClient_ClusterMyID_Call{Call: _e.mock.On("ClusterMyID", ctx)}
}

func (_c *MockUniversalClient_ClusterMyID_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterMyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterMyID_Call) Return(_a0 *StringCmd) *MockUniversalClient_ClusterMyID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterMyID_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_ClusterMyID_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMyShardID provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterMyShardID(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMyShardID")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterMyShardID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMyShardID'
type MockUniversalClient_ClusterMyShardID_Call struct {
	*mock.Call
}

// ClusterMyShardID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterMyShardID(ctx interface{}) *MockUniversalClient_ClusterMyShardID_Call {
	return &MockUniversalClient_ClusterMyShardID_Call{Call: _e.mock.On("ClusterMyShardID", ctx)}
}

func (_c *MockUniversalClient_ClusterMyShardID_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterMyShardID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterMyShardID_Call) Return(_a0 *StringCmd) *MockUniversalClient_ClusterMyShardID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterMyShardID_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_ClusterMyShardID_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterNodes provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterNodes(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterNodes")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterNodes'
type MockUniversalClient_ClusterNodes_Call struct {
	*mock.Call
}

// ClusterNodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterNodes(ctx interface{}) *MockUniversalClient_ClusterNodes_Call {
	return &MockUniversalClient_ClusterNodes_Call{Call: _e.mock.On("ClusterNodes", ctx)}
}

func (_c *MockUniversalClient_ClusterNodes_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterNodes_Call) Return(_a0 *StringCmd) *MockUniversalClient_ClusterNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterNodes_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_ClusterNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterReplicate provides a mock function with given fields: ctx, nodeID
func (_m *MockUniversalClient) ClusterReplicate(ctx context.Context, nodeID string) *StatusCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterReplicate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterReplicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterReplicate'
type MockUniversalClient_ClusterReplicate_Call struct {
	*mock.Call
}

// ClusterReplicate is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockUniversalClient_Expecter) ClusterReplicate(ctx interface{}, nodeID interface{}) *MockUniversalClient_ClusterReplicate_Call {
	return &MockUniversalClient_ClusterReplicate_Call{Call: _e.mock.On("ClusterReplicate", ctx, nodeID)}
}

func (_c *MockUniversalClient_ClusterReplicate_Call) Run(run func(ctx context.Context, nodeID string)) *MockUniversalClient_ClusterReplicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterReplicate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterReplicate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterReplicate_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_ClusterReplicate_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterResetHard provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterResetHard(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterResetHard")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterResetHard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterResetHard'
type MockUniversalClient_ClusterResetHard_Call struct {
	*mock.Call
}

// ClusterResetHard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterResetHard(ctx interface{}) *MockUniversalClient_ClusterResetHard_Call {
	return &MockUniversalClient_ClusterResetHard_Call{Call: _e.mock.On("ClusterResetHard", ctx)}
}

func (_c *MockUniversalClient_ClusterResetHard_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterResetHard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterResetHard_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterResetHard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterResetHard_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ClusterResetHard_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterResetSoft provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterResetSoft(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterResetSoft")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterResetSoft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterResetSoft'
type MockUniversalClient_ClusterResetSoft_Call struct {
	*mock.Call
}

// ClusterResetSoft is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterResetSoft(ctx interface{}) *MockUniversalClient_ClusterResetSoft_Call {
	return &MockUniversalClient_ClusterResetSoft_Call{Call: _e.mock.On("ClusterResetSoft", ctx)}
}

func (_c *MockUniversalClient_ClusterResetSoft_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterResetSoft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterResetSoft_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterResetSoft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterResetSoft_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ClusterResetSoft_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSaveConfig provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterSaveConfig(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterSaveConfig")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterSaveConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSaveConfig'
type MockUniversalClient_ClusterSaveConfig_Call struct {
	*mock.Call
}

// ClusterSaveConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterSaveConfig(ctx interface{}) *MockUniversalClient_ClusterSaveConfig_Call {
	return &MockUniversalClient_ClusterSaveConfig_Call{Call: _e.mock.On("ClusterSaveConfig", ctx)}
}

func (_c *MockUniversalClient_ClusterSaveConfig_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterSaveConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterSaveConfig_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ClusterSaveConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterSaveConfig_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ClusterSaveConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterShards provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterShards(ctx context.Context) *ClusterShardsCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterShards")
	}

	var r0 *ClusterShardsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClusterShardsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterShardsCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterShards'
type MockUniversalClient_ClusterShards_Call struct {
	*mock.Call
}

// ClusterShards is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterShards(ctx interface{}) *MockUniversalClient_ClusterShards_Call {
	return &MockUniversalClient_ClusterShards_Call{Call: _e.mock.On("ClusterShards", ctx)}
}

func (_c *MockUniversalClient_ClusterShards_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterShards_Call) Return(_a0 *ClusterShardsCmd) *MockUniversalClient_ClusterShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterShards_Call) RunAndReturn(run func(context.Context) *ClusterShardsCmd) *MockUniversalClient_ClusterShards_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSlaves provides a mock function with given fields: ctx, nodeID
func (_m *MockUniversalClient) ClusterSlaves(ctx context.Context, nodeID string) *StringSliceCmd {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterSlaves")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterSlaves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSlaves'
type MockUniversalClient_ClusterSlaves_Call struct {
	*mock.Call
}

// ClusterSlaves is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockUniversalClient_Expecter) ClusterSlaves(ctx interface{}, nodeID interface{}) *MockUniversalClient_ClusterSlaves_Call {
	return &MockUniversalClient_ClusterSlaves_Call{Call: _e.mock.On("ClusterSlaves", ctx, nodeID)}
}

func (_c *MockUniversalClient_ClusterSlaves_Call) Run(run func(ctx context.Context, nodeID string)) *MockUniversalClient_ClusterSlaves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterSlaves_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ClusterSlaves_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterSlaves_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_ClusterSlaves_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSlots provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ClusterSlots(ctx context.Context) *ClusterSlotsCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterSlots")
	}

	var r0 *ClusterSlotsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *ClusterSlotsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClusterSlotsCmd)
		}
	}

	return r0
}

// MockUniversalClient_ClusterSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSlots'
type MockUniversalClient_ClusterSlots_Call struct {
	*mock.Call
}

// ClusterSlots is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ClusterSlots(ctx interface{}) *MockUniversalClient_ClusterSlots_Call {
	return &MockUniversalClient_ClusterSlots_Call{Call: _e.mock.On("ClusterSlots", ctx)}
}

func (_c *MockUniversalClient_ClusterSlots_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ClusterSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ClusterSlots_Call) Return(_a0 *ClusterSlotsCmd) *MockUniversalClient_ClusterSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ClusterSlots_Call) RunAndReturn(run func(context.Context) *ClusterSlotsCmd) *MockUniversalClient_ClusterSlots_Call {
	_c.Call.Return(run)
	return _c
}

// Command provides a mock function with given fields: ctx
func (_m *MockUniversalClient) Command(ctx context.Context) *CommandsInfoCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 *CommandsInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context) *CommandsInfoCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CommandsInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type MockUniversalClient_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) Command(ctx interface{}) *MockUniversalClient_Command_Call {
	return &MockUniversalClient_Command_Call{Call: _e.mock.On("Command", ctx)}
}

func (_c *MockUniversalClient_Command_Call) Run(run func(ctx context.Context)) *MockUniversalClient_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_Command_Call) Return(_a0 *CommandsInfoCmd) *MockUniversalClient_Command_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Command_Call) RunAndReturn(run func(context.Context) *CommandsInfoCmd) *MockUniversalClient_Command_Call {
	_c.Call.Return(run)
	return _c
}

// CommandGetKeys provides a mock function with given fields: ctx, commands
func (_m *MockUniversalClient) CommandGetKeys(ctx context.Context, commands ...interface{}) *StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, commands...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommandGetKeys")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *StringSliceCmd); ok {
		r0 = rf(ctx, commands...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CommandGetKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandGetKeys'
type MockUniversalClient_CommandGetKeys_Call struct {
	*mock.Call
}

// CommandGetKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - commands ...interface{}
func (_e *MockUniversalClient_Expecter) CommandGetKeys(ctx interface{}, commands ...interface{}) *MockUniversalClient_CommandGetKeys_Call {
	return &MockUniversalClient_CommandGetKeys_Call{Call: _e.mock.On("CommandGetKeys",
		append([]interface{}{ctx}, commands...)...)}
}

func (_c *MockUniversalClient_CommandGetKeys_Call) Run(run func(ctx context.Context, commands ...interface{})) *MockUniversalClient_CommandGetKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CommandGetKeys_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_CommandGetKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CommandGetKeys_Call) RunAndReturn(run func(context.Context, ...interface{}) *StringSliceCmd) *MockUniversalClient_CommandGetKeys_Call {
	_c.Call.Return(run)
	return _c
}

// CommandGetKeysAndFlags provides a mock function with given fields: ctx, commands
func (_m *MockUniversalClient) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) *KeyFlagsCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, commands...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommandGetKeysAndFlags")
	}

	var r0 *KeyFlagsCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *KeyFlagsCmd); ok {
		r0 = rf(ctx, commands...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KeyFlagsCmd)
		}
	}

	return r0
}

// MockUniversalClient_CommandGetKeysAndFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandGetKeysAndFlags'
type MockUniversalClient_CommandGetKeysAndFlags_Call struct {
	*mock.Call
}

// CommandGetKeysAndFlags is a helper method to define mock.On call
//   - ctx context.Context
//   - commands ...interface{}
func (_e *MockUniversalClient_Expecter) CommandGetKeysAndFlags(ctx interface{}, commands ...interface{}) *MockUniversalClient_CommandGetKeysAndFlags_Call {
	return &MockUniversalClient_CommandGetKeysAndFlags_Call{Call: _e.mock.On("CommandGetKeysAndFlags",
		append([]interface{}{ctx}, commands...)...)}
}

func (_c *MockUniversalClient_CommandGetKeysAndFlags_Call) Run(run func(ctx context.Context, commands ...interface{})) *MockUniversalClient_CommandGetKeysAndFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_CommandGetKeysAndFlags_Call) Return(_a0 *KeyFlagsCmd) *MockUniversalClient_CommandGetKeysAndFlags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CommandGetKeysAndFlags_Call) RunAndReturn(run func(context.Context, ...interface{}) *KeyFlagsCmd) *MockUniversalClient_CommandGetKeysAndFlags_Call {
	_c.Call.Return(run)
	return _c
}

// CommandList provides a mock function with given fields: ctx, filter
func (_m *MockUniversalClient) CommandList(ctx context.Context, filter *FilterBy) *StringSliceCmd {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CommandList")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *FilterBy) *StringSliceCmd); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_CommandList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandList'
type MockUniversalClient_CommandList_Call struct {
	*mock.Call
}

// CommandList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *FilterBy
func (_e *MockUniversalClient_Expecter) CommandList(ctx interface{}, filter interface{}) *MockUniversalClient_CommandList_Call {
	return &MockUniversalClient_CommandList_Call{Call: _e.mock.On("CommandList", ctx, filter)}
}

func (_c *MockUniversalClient_CommandList_Call) Run(run func(ctx context.Context, filter *FilterBy)) *MockUniversalClient_CommandList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*FilterBy))
	})
	return _c
}

func (_c *MockUniversalClient_CommandList_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_CommandList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_CommandList_Call) RunAndReturn(run func(context.Context, *FilterBy) *StringSliceCmd) *MockUniversalClient_CommandList_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigGet provides a mock function with given fields: ctx, parameter
func (_m *MockUniversalClient) ConfigGet(ctx context.Context, parameter string) *MapStringStringCmd {
	ret := _m.Called(ctx, parameter)

	if len(ret) == 0 {
		panic("no return value specified for ConfigGet")
	}

	var r0 *MapStringStringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapStringStringCmd); ok {
		r0 = rf(ctx, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringStringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ConfigGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigGet'
type MockUniversalClient_ConfigGet_Call struct {
	*mock.Call
}

// ConfigGet is a helper method to define mock.On call
//   - ctx context.Context
//   - parameter string
func (_e *MockUniversalClient_Expecter) ConfigGet(ctx interface{}, parameter interface{}) *MockUniversalClient_ConfigGet_Call {
	return &MockUniversalClient_ConfigGet_Call{Call: _e.mock.On("ConfigGet", ctx, parameter)}
}

func (_c *MockUniversalClient_ConfigGet_Call) Run(run func(ctx context.Context, parameter string)) *MockUniversalClient_ConfigGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ConfigGet_Call) Return(_a0 *MapStringStringCmd) *MockUniversalClient_ConfigGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ConfigGet_Call) RunAndReturn(run func(context.Context, string) *MapStringStringCmd) *MockUniversalClient_ConfigGet_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigResetStat provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ConfigResetStat(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConfigResetStat")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ConfigResetStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigResetStat'
type MockUniversalClient_ConfigResetStat_Call struct {
	*mock.Call
}

// ConfigResetStat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ConfigResetStat(ctx interface{}) *MockUniversalClient_ConfigResetStat_Call {
	return &MockUniversalClient_ConfigResetStat_Call{Call: _e.mock.On("ConfigResetStat", ctx)}
}

func (_c *MockUniversalClient_ConfigResetStat_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ConfigResetStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ConfigResetStat_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ConfigResetStat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ConfigResetStat_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ConfigResetStat_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigRewrite provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ConfigRewrite(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConfigRewrite")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ConfigRewrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigRewrite'
type MockUniversalClient_ConfigRewrite_Call struct {
	*mock.Call
}

// ConfigRewrite is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ConfigRewrite(ctx interface{}) *MockUniversalClient_ConfigRewrite_Call {
	return &MockUniversalClient_ConfigRewrite_Call{Call: _e.mock.On("ConfigRewrite", ctx)}
}

func (_c *MockUniversalClient_ConfigRewrite_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ConfigRewrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ConfigRewrite_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ConfigRewrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ConfigRewrite_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ConfigRewrite_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigSet provides a mock function with given fields: ctx, parameter, value
func (_m *MockUniversalClient) ConfigSet(ctx context.Context, parameter string, value string) *StatusCmd {
	ret := _m.Called(ctx, parameter, value)

	if len(ret) == 0 {
		panic("no return value specified for ConfigSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, parameter, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigSet'
type MockUniversalClient_ConfigSet_Call struct {
	*mock.Call
}

// ConfigSet is a helper method to define mock.On call
//   - ctx context.Context
//   - parameter string
//   - value string
func (_e *MockUniversalClient_Expecter) ConfigSet(ctx interface{}, parameter interface{}, value interface{}) *MockUniversalClient_ConfigSet_Call {
	return &MockUniversalClient_ConfigSet_Call{Call: _e.mock.On("ConfigSet", ctx, parameter, value)}
}

func (_c *MockUniversalClient_ConfigSet_Call) Run(run func(ctx context.Context, parameter string, value string)) *MockUniversalClient_ConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ConfigSet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ConfigSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ConfigSet_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_ConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields: ctx, sourceKey, destKey, db, replace
func (_m *MockUniversalClient) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *IntCmd {
	ret := _m.Called(ctx, sourceKey, destKey, db, replace)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, bool) *IntCmd); ok {
		r0 = rf(ctx, sourceKey, destKey, db, replace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type MockUniversalClient_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
//   - db int
//   - replace bool
func (_e *MockUniversalClient_Expecter) Copy(ctx interface{}, sourceKey interface{}, destKey interface{}, db interface{}, replace interface{}) *MockUniversalClient_Copy_Call {
	return &MockUniversalClient_Copy_Call{Call: _e.mock.On("Copy", ctx, sourceKey, destKey, db, replace)}
}

func (_c *MockUniversalClient_Copy_Call) Run(run func(ctx context.Context, sourceKey string, destKey string, db int, replace bool)) *MockUniversalClient_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(bool))
	})
	return _c
}

func (_c *MockUniversalClient_Copy_Call) Return(_a0 *IntCmd) *MockUniversalClient_Copy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Copy_Call) RunAndReturn(run func(context.Context, string, string, int, bool) *IntCmd) *MockUniversalClient_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// DBSize provides a mock function with given fields: ctx
func (_m *MockUniversalClient) DBSize(ctx context.Context) *IntCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DBSize")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_DBSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBSize'
type MockUniversalClient_DBSize_Call struct {
	*mock.Call
}

// DBSize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) DBSize(ctx interface{}) *MockUniversalClient_DBSize_Call {
	return &MockUniversalClient_DBSize_Call{Call: _e.mock.On("DBSize", ctx)}
}

func (_c *MockUniversalClient_DBSize_Call) Run(run func(ctx context.Context)) *MockUniversalClient_DBSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_DBSize_Call) Return(_a0 *IntCmd) *MockUniversalClient_DBSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_DBSize_Call) RunAndReturn(run func(context.Context) *IntCmd) *MockUniversalClient_DBSize_Call {
	_c.Call.Return(run)
	return _c
}

// DebugObject provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) DebugObject(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DebugObject")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_DebugObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebugObject'
type MockUniversalClient_DebugObject_Call struct {
	*mock.Call
}

// DebugObject is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) DebugObject(ctx interface{}, key interface{}) *MockUniversalClient_DebugObject_Call {
	return &MockUniversalClient_DebugObject_Call{Call: _e.mock.On("DebugObject", ctx, key)}
}

func (_c *MockUniversalClient_DebugObject_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_DebugObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_DebugObject_Call) Return(_a0 *StringCmd) *MockUniversalClient_DebugObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_DebugObject_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_DebugObject_Call {
	_c.Call.Return(run)
	return _c
}

// Decr provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) Decr(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Decr")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Decr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decr'
type MockUniversalClient_Decr_Call struct {
	*mock.Call
}

// Decr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) Decr(ctx interface{}, key interface{}) *MockUniversalClient_Decr_Call {
	return &MockUniversalClient_Decr_Call{Call: _e.mock.On("Decr", ctx, key)}
}

func (_c *MockUniversalClient_Decr_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_Decr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Decr_Call) Return(_a0 *IntCmd) *MockUniversalClient_Decr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Decr_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_Decr_Call {
	_c.Call.Return(run)
	return _c
}

// DecrBy provides a mock function with given fields: ctx, key, decrement
func (_m *MockUniversalClient) DecrBy(ctx context.Context, key string, decrement int64) *IntCmd {
	ret := _m.Called(ctx, key, decrement)

	if len(ret) == 0 {
		panic("no return value specified for DecrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, decrement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_DecrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrBy'
type MockUniversalClient_DecrBy_Call struct {
	*mock.Call
}

// DecrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - decrement int64
func (_e *MockUniversalClient_Expecter) DecrBy(ctx interface{}, key interface{}, decrement interface{}) *MockUniversalClient_DecrBy_Call {
	return &MockUniversalClient_DecrBy_Call{Call: _e.mock.On("DecrBy", ctx, key, decrement)}
}

func (_c *MockUniversalClient_DecrBy_Call) Run(run func(ctx context.Context, key string, decrement int64)) *MockUniversalClient_DecrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_DecrBy_Call) Return(_a0 *IntCmd) *MockUniversalClient_DecrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_DecrBy_Call) RunAndReturn(run func(context.Context, string, int64) *IntCmd) *MockUniversalClient_DecrBy_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) Del(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockUniversalClient_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) Del(ctx interface{}, keys ...interface{}) *MockUniversalClient_Del_Call {
	return &MockUniversalClient_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_Del_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Del_Call) Return(_a0 *IntCmd) *MockUniversalClient_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Del_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockUniversalClient_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function with given fields: ctx, args
func (_m *MockUniversalClient) Do(ctx context.Context, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockUniversalClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) Do(ctx interface{}, args ...interface{}) *MockUniversalClient_Do_Call {
	return &MockUniversalClient_Do_Call{Call: _e.mock.On("Do",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockUniversalClient_Do_Call) Run(run func(ctx context.Context, args ...interface{})) *MockUniversalClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Do_Call) Return(_a0 *Cmd) *MockUniversalClient_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Do_Call) RunAndReturn(run func(context.Context, ...interface{}) *Cmd) *MockUniversalClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Dump provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) Dump(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Dump")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_Dump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dump'
type MockUniversalClient_Dump_Call struct {
	*mock.Call
}

// Dump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) Dump(ctx interface{}, key interface{}) *MockUniversalClient_Dump_Call {
	return &MockUniversalClient_Dump_Call{Call: _e.mock.On("Dump", ctx, key)}
}

func (_c *MockUniversalClient_Dump_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_Dump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Dump_Call) Return(_a0 *StringCmd) *MockUniversalClient_Dump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Dump_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_Dump_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function with given fields: ctx, message
func (_m *MockUniversalClient) Echo(ctx context.Context, message interface{}) *StringCmd {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *StringCmd); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type MockUniversalClient_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
//   - ctx context.Context
//   - message interface{}
func (_e *MockUniversalClient_Expecter) Echo(ctx interface{}, message interface{}) *MockUniversalClient_Echo_Call {
	return &MockUniversalClient_Echo_Call{Call: _e.mock.On("Echo", ctx, message)}
}

func (_c *MockUniversalClient_Echo_Call) Run(run func(ctx context.Context, message interface{})) *MockUniversalClient_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_Echo_Call) Return(_a0 *StringCmd) *MockUniversalClient_Echo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Echo_Call) RunAndReturn(run func(context.Context, interface{}) *StringCmd) *MockUniversalClient_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// Eval provides a mock function with given fields: ctx, script, keys, args
func (_m *MockUniversalClient) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type MockUniversalClient_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) Eval(ctx interface{}, script interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_Eval_Call {
	return &MockUniversalClient_Eval_Call{Call: _e.mock.On("Eval",
		append([]interface{}{ctx, script, keys}, args...)...)}
}

func (_c *MockUniversalClient_Eval_Call) Run(run func(ctx context.Context, script string, keys []string, args ...interface{})) *MockUniversalClient_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Eval_Call) Return(_a0 *Cmd) *MockUniversalClient_Eval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Eval_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// EvalRO provides a mock function with given fields: ctx, script, keys, args
func (_m *MockUniversalClient) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalRO")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_EvalRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalRO'
type MockUniversalClient_EvalRO_Call struct {
	*mock.Call
}

// EvalRO is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) EvalRO(ctx interface{}, script interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_EvalRO_Call {
	return &MockUniversalClient_EvalRO_Call{Call: _e.mock.On("EvalRO",
		append([]interface{}{ctx, script, keys}, args...)...)}
}

func (_c *MockUniversalClient_EvalRO_Call) Run(run func(ctx context.Context, script string, keys []string, args ...interface{})) *MockUniversalClient_EvalRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_EvalRO_Call) Return(_a0 *Cmd) *MockUniversalClient_EvalRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_EvalRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_EvalRO_Call {
	_c.Call.Return(run)
	return _c
}

// EvalSha provides a mock function with given fields: ctx, sha1, keys, args
func (_m *MockUniversalClient) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalSha")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_EvalSha_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalSha'
type MockUniversalClient_EvalSha_Call struct {
	*mock.Call
}

// EvalSha is a helper method to define mock.On call
//   - ctx context.Context
//   - sha1 string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) EvalSha(ctx interface{}, sha1 interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_EvalSha_Call {
	return &MockUniversalClient_EvalSha_Call{Call: _e.mock.On("EvalSha",
		append([]interface{}{ctx, sha1, keys}, args...)...)}
}

func (_c *MockUniversalClient_EvalSha_Call) Run(run func(ctx context.Context, sha1 string, keys []string, args ...interface{})) *MockUniversalClient_EvalSha_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_EvalSha_Call) Return(_a0 *Cmd) *MockUniversalClient_EvalSha_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_EvalSha_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_EvalSha_Call {
	_c.Call.Return(run)
	return _c
}

// EvalShaRO provides a mock function with given fields: ctx, sha1, keys, args
func (_m *MockUniversalClient) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvalShaRO")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_EvalShaRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalShaRO'
type MockUniversalClient_EvalShaRO_Call struct {
	*mock.Call
}

// EvalShaRO is a helper method to define mock.On call
//   - ctx context.Context
//   - sha1 string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) EvalShaRO(ctx interface{}, sha1 interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_EvalShaRO_Call {
	return &MockUniversalClient_EvalShaRO_Call{Call: _e.mock.On("EvalShaRO",
		append([]interface{}{ctx, sha1, keys}, args...)...)}
}

func (_c *MockUniversalClient_EvalShaRO_Call) Run(run func(ctx context.Context, sha1 string, keys []string, args ...interface{})) *MockUniversalClient_EvalShaRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_EvalShaRO_Call) Return(_a0 *Cmd) *MockUniversalClient_EvalShaRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_EvalShaRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_EvalShaRO_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) Exists(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockUniversalClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) Exists(ctx interface{}, keys ...interface{}) *MockUniversalClient_Exists_Call {
	return &MockUniversalClient_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_Exists_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Exists_Call) Return(_a0 *IntCmd) *MockUniversalClient_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Exists_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockUniversalClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) Expire(ctx context.Context, key string, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type MockUniversalClient_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) Expire(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_Expire_Call {
	return &MockUniversalClient_Expire_Call{Call: _e.mock.On("Expire", ctx, key, expiration)}
}

func (_c *MockUniversalClient_Expire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_Expire_Call) Return(_a0 *BoolCmd) *MockUniversalClient_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Expire_Call) RunAndReturn(run func(context.Context, string, time.Duration) *BoolCmd) *MockUniversalClient_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *MockUniversalClient) ExpireAt(ctx context.Context, key string, tm time.Time) *BoolCmd {
	ret := _m.Called(ctx, key, tm)

	if len(ret) == 0 {
		panic("no return value specified for ExpireAt")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *BoolCmd); ok {
		r0 = rf(ctx, key, tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireAt'
type MockUniversalClient_ExpireAt_Call struct {
	*mock.Call
}

// ExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
func (_e *MockUniversalClient_Expecter) ExpireAt(ctx interface{}, key interface{}, tm interface{}) *MockUniversalClient_ExpireAt_Call {
	return &MockUniversalClient_ExpireAt_Call{Call: _e.mock.On("ExpireAt", ctx, key, tm)}
}

func (_c *MockUniversalClient_ExpireAt_Call) Run(run func(ctx context.Context, key string, tm time.Time)) *MockUniversalClient_ExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockUniversalClient_ExpireAt_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ExpireAt_Call) RunAndReturn(run func(context.Context, string, time.Time) *BoolCmd) *MockUniversalClient_ExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireGT provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) ExpireGT(ctx context.Context, key string, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for ExpireGT")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ExpireGT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireGT'
type MockUniversalClient_ExpireGT_Call struct {
	*mock.Call
}

// ExpireGT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) ExpireGT(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_ExpireGT_Call {
	return &MockUniversalClient_ExpireGT_Call{Call: _e.mock.On("ExpireGT", ctx, key, expiration)}
}

func (_c *MockUniversalClient_ExpireGT_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_ExpireGT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_ExpireGT_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ExpireGT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ExpireGT_Call) RunAndReturn(run func(context.Context, string, time.Duration) *BoolCmd) *MockUniversalClient_ExpireGT_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireLT provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) ExpireLT(ctx context.Context, key string, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for ExpireLT")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ExpireLT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireLT'
type MockUniversalClient_ExpireLT_Call struct {
	*mock.Call
}

// ExpireLT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) ExpireLT(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_ExpireLT_Call {
	return &MockUniversalClient_ExpireLT_Call{Call: _e.mock.On("ExpireLT", ctx, key, expiration)}
}

func (_c *MockUniversalClient_ExpireLT_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_ExpireLT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_ExpireLT_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ExpireLT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ExpireLT_Call) RunAndReturn(run func(context.Context, string, time.Duration) *BoolCmd) *MockUniversalClient_ExpireLT_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireNX provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) ExpireNX(ctx context.Context, key string, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for ExpireNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ExpireNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireNX'
type MockUniversalClient_ExpireNX_Call struct {
	*mock.Call
}

// ExpireNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) ExpireNX(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_ExpireNX_Call {
	return &MockUniversalClient_ExpireNX_Call{Call: _e.mock.On("ExpireNX", ctx, key, expiration)}
}

func (_c *MockUniversalClient_ExpireNX_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_ExpireNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_ExpireNX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ExpireNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ExpireNX_Call) RunAndReturn(run func(context.Context, string, time.Duration) *BoolCmd) *MockUniversalClient_ExpireNX_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireTime provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ExpireTime(ctx context.Context, key string) *DurationCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ExpireTime")
	}

	var r0 *DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DurationCmd)
		}
	}

	return r0
}

// MockUniversalClient_ExpireTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireTime'
type MockUniversalClient_ExpireTime_Call struct {
	*mock.Call
}

// ExpireTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ExpireTime(ctx interface{}, key interface{}) *MockUniversalClient_ExpireTime_Call {
	return &MockUniversalClient_ExpireTime_Call{Call: _e.mock.On("ExpireTime", ctx, key)}
}

func (_c *MockUniversalClient_ExpireTime_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ExpireTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ExpireTime_Call) Return(_a0 *DurationCmd) *MockUniversalClient_ExpireTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ExpireTime_Call) RunAndReturn(run func(context.Context, string) *DurationCmd) *MockUniversalClient_ExpireTime_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireXX provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) ExpireXX(ctx context.Context, key string, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for ExpireXX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_ExpireXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireXX'
type MockUniversalClient_ExpireXX_Call struct {
	*mock.Call
}

// ExpireXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) ExpireXX(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_ExpireXX_Call {
	return &MockUniversalClient_ExpireXX_Call{Call: _e.mock.On("ExpireXX", ctx, key, expiration)}
}

func (_c *MockUniversalClient_ExpireXX_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_ExpireXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_ExpireXX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_ExpireXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ExpireXX_Call) RunAndReturn(run func(context.Context, string, time.Duration) *BoolCmd) *MockUniversalClient_ExpireXX_Call {
	_c.Call.Return(run)
	return _c
}

// FCall provides a mock function with given fields: ctx, function, keys, args
func (_m *MockUniversalClient) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, function, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FCall")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, function, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_FCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FCall'
type MockUniversalClient_FCall_Call struct {
	*mock.Call
}

// FCall is a helper method to define mock.On call
//   - ctx context.Context
//   - function string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) FCall(ctx interface{}, function interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_FCall_Call {
	return &MockUniversalClient_FCall_Call{Call: _e.mock.On("FCall",
		append([]interface{}{ctx, function, keys}, args...)...)}
}

func (_c *MockUniversalClient_FCall_Call) Run(run func(ctx context.Context, function string, keys []string, args ...interface{})) *MockUniversalClient_FCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_FCall_Call) Return(_a0 *Cmd) *MockUniversalClient_FCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FCall_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_FCall_Call {
	_c.Call.Return(run)
	return _c
}

// FCallRO provides a mock function with given fields: ctx, function, keys, args
func (_m *MockUniversalClient) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, function, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FCallRO")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, function, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_FCallRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FCallRO'
type MockUniversalClient_FCallRO_Call struct {
	*mock.Call
}

// FCallRO is a helper method to define mock.On call
//   - ctx context.Context
//   - function string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) FCallRO(ctx interface{}, function interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_FCallRO_Call {
	return &MockUniversalClient_FCallRO_Call{Call: _e.mock.On("FCallRO",
		append([]interface{}{ctx, function, keys}, args...)...)}
}

func (_c *MockUniversalClient_FCallRO_Call) Run(run func(ctx context.Context, function string, keys []string, args ...interface{})) *MockUniversalClient_FCallRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_FCallRO_Call) Return(_a0 *Cmd) *MockUniversalClient_FCallRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FCallRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_FCallRO_Call {
	_c.Call.Return(run)
	return _c
}

// FCallRo provides a mock function with given fields: ctx, function, keys, args
func (_m *MockUniversalClient) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, function, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FCallRo")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *Cmd); ok {
		r0 = rf(ctx, function, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_FCallRo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FCallRo'
type MockUniversalClient_FCallRo_Call struct {
	*mock.Call
}

// FCallRo is a helper method to define mock.On call
//   - ctx context.Context
//   - function string
//   - keys []string
//   - args ...interface{}
func (_e *MockUniversalClient_Expecter) FCallRo(ctx interface{}, function interface{}, keys interface{}, args ...interface{}) *MockUniversalClient_FCallRo_Call {
	return &MockUniversalClient_FCallRo_Call{Call: _e.mock.On("FCallRo",
		append([]interface{}{ctx, function, keys}, args...)...)}
}

func (_c *MockUniversalClient_FCallRo_Call) Run(run func(ctx context.Context, function string, keys []string, args ...interface{})) *MockUniversalClient_FCallRo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_FCallRo_Call) Return(_a0 *Cmd) *MockUniversalClient_FCallRo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FCallRo_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *Cmd) *MockUniversalClient_FCallRo_Call {
	_c.Call.Return(run)
	return _c
}

// FTAggregate provides a mock function with given fields: ctx, index, query
func (_m *MockUniversalClient) FTAggregate(ctx context.Context, index string, query string) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTAggregate")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAggregate'
type MockUniversalClient_FTAggregate_Call struct {
	*mock.Call
}

// FTAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockUniversalClient_Expecter) FTAggregate(ctx interface{}, index interface{}, query interface{}) *MockUniversalClient_FTAggregate_Call {
	return &MockUniversalClient_FTAggregate_Call{Call: _e.mock.On("FTAggregate", ctx, index, query)}
}

func (_c *MockUniversalClient_FTAggregate_Call) Run(run func(ctx context.Context, index string, query string)) *MockUniversalClient_FTAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTAggregate_Call) Return(_a0 *MapStringInterfaceCmd) *MockUniversalClient_FTAggregate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTAggregate_Call) RunAndReturn(run func(context.Context, string, string) *MapStringInterfaceCmd) *MockUniversalClient_FTAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// FTAggregateWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockUniversalClient) FTAggregateWithArgs(ctx context.Context, index string, query string, options *FTAggregateOptions) *AggregateCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTAggregateWithArgs")
	}

	var r0 *AggregateCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTAggregateOptions) *AggregateCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AggregateCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTAggregateWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAggregateWithArgs'
type MockUniversalClient_FTAggregateWithArgs_Call struct {
	*mock.Call
}

// FTAggregateWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTAggregateOptions
func (_e *MockUniversalClient_Expecter) FTAggregateWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockUniversalClient_FTAggregateWithArgs_Call {
	return &MockUniversalClient_FTAggregateWithArgs_Call{Call: _e.mock.On("FTAggregateWithArgs", ctx, index, query, options)}
}

func (_c *MockUniversalClient_FTAggregateWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTAggregateOptions)) *MockUniversalClient_FTAggregateWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTAggregateOptions))
	})
	return _c
}

func (_c *MockUniversalClient_FTAggregateWithArgs_Call) Return(_a0 *AggregateCmd) *MockUniversalClient_FTAggregateWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTAggregateWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTAggregateOptions) *AggregateCmd) *MockUniversalClient_FTAggregateWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTAliasAdd provides a mock function with given fields: ctx, index, alias
func (_m *MockUniversalClient) FTAliasAdd(ctx context.Context, index string, alias string) *StatusCmd {
	ret := _m.Called(ctx, index, alias)

	if len(ret) == 0 {
		panic("no return value specified for FTAliasAdd")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, index, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTAliasAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAliasAdd'
type MockUniversalClient_FTAliasAdd_Call struct {
	*mock.Call
}

// FTAliasAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - alias string
func (_e *MockUniversalClient_Expecter) FTAliasAdd(ctx interface{}, index interface{}, alias interface{}) *MockUniversalClient_FTAliasAdd_Call {
	return &MockUniversalClient_FTAliasAdd_Call{Call: _e.mock.On("FTAliasAdd", ctx, index, alias)}
}

func (_c *MockUniversalClient_FTAliasAdd_Call) Run(run func(ctx context.Context, index string, alias string)) *MockUniversalClient_FTAliasAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTAliasAdd_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTAliasAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTAliasAdd_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_FTAliasAdd_Call {
	_c.Call.Return(run)
	return _c
}

// FTAliasDel provides a mock function with given fields: ctx, alias
func (_m *MockUniversalClient) FTAliasDel(ctx context.Context, alias string) *StatusCmd {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for FTAliasDel")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTAliasDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAliasDel'
type MockUniversalClient_FTAliasDel_Call struct {
	*mock.Call
}

// FTAliasDel is a helper method to define mock.On call
//   - ctx context.Context
//   - alias string
func (_e *MockUniversalClient_Expecter) FTAliasDel(ctx interface{}, alias interface{}) *MockUniversalClient_FTAliasDel_Call {
	return &MockUniversalClient_FTAliasDel_Call{Call: _e.mock.On("FTAliasDel", ctx, alias)}
}

func (_c *MockUniversalClient_FTAliasDel_Call) Run(run func(ctx context.Context, alias string)) *MockUniversalClient_FTAliasDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTAliasDel_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTAliasDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTAliasDel_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_FTAliasDel_Call {
	_c.Call.Return(run)
	return _c
}

// FTAliasUpdate provides a mock function with given fields: ctx, index, alias
func (_m *MockUniversalClient) FTAliasUpdate(ctx context.Context, index string, alias string) *StatusCmd {
	ret := _m.Called(ctx, index, alias)

	if len(ret) == 0 {
		panic("no return value specified for FTAliasUpdate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, index, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTAliasUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAliasUpdate'
type MockUniversalClient_FTAliasUpdate_Call struct {
	*mock.Call
}

// FTAliasUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - alias string
func (_e *MockUniversalClient_Expecter) FTAliasUpdate(ctx interface{}, index interface{}, alias interface{}) *MockUniversalClient_FTAliasUpdate_Call {
	return &MockUniversalClient_FTAliasUpdate_Call{Call: _e.mock.On("FTAliasUpdate", ctx, index, alias)}
}

func (_c *MockUniversalClient_FTAliasUpdate_Call) Run(run func(ctx context.Context, index string, alias string)) *MockUniversalClient_FTAliasUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTAliasUpdate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTAliasUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTAliasUpdate_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_FTAliasUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// FTAlter provides a mock function with given fields: ctx, index, skipInitialScan, definition
func (_m *MockUniversalClient) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *StatusCmd {
	ret := _m.Called(ctx, index, skipInitialScan, definition)

	if len(ret) == 0 {
		panic("no return value specified for FTAlter")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, []interface{}) *StatusCmd); ok {
		r0 = rf(ctx, index, skipInitialScan, definition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTAlter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAlter'
type MockUniversalClient_FTAlter_Call struct {
	*mock.Call
}

// FTAlter is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - skipInitialScan bool
//   - definition []interface{}
func (_e *MockUniversalClient_Expecter) FTAlter(ctx interface{}, index interface{}, skipInitialScan interface{}, definition interface{}) *MockUniversalClient_FTAlter_Call {
	return &MockUniversalClient_FTAlter_Call{Call: _e.mock.On("FTAlter", ctx, index, skipInitialScan, definition)}
}

func (_c *MockUniversalClient_FTAlter_Call) Run(run func(ctx context.Context, index string, skipInitialScan bool, definition []interface{})) *MockUniversalClient_FTAlter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].([]interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_FTAlter_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTAlter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTAlter_Call) RunAndReturn(run func(context.Context, string, bool, []interface{}) *StatusCmd) *MockUniversalClient_FTAlter_Call {
	_c.Call.Return(run)
	return _c
}

// FTConfigGet provides a mock function with given fields: ctx, option
func (_m *MockUniversalClient) FTConfigGet(ctx context.Context, option string) *MapMapStringInterfaceCmd {
	ret := _m.Called(ctx, option)

	if len(ret) == 0 {
		panic("no return value specified for FTConfigGet")
	}

	var r0 *MapMapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapMapStringInterfaceCmd); ok {
		r0 = rf(ctx, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapMapStringInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTConfigGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTConfigGet'
type MockUniversalClient_FTConfigGet_Call struct {
	*mock.Call
}

// FTConfigGet is a helper method to define mock.On call
//   - ctx context.Context
//   - option string
func (_e *MockUniversalClient_Expecter) FTConfigGet(ctx interface{}, option interface{}) *MockUniversalClient_FTConfigGet_Call {
	return &MockUniversalClient_FTConfigGet_Call{Call: _e.mock.On("FTConfigGet", ctx, option)}
}

func (_c *MockUniversalClient_FTConfigGet_Call) Run(run func(ctx context.Context, option string)) *MockUniversalClient_FTConfigGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTConfigGet_Call) Return(_a0 *MapMapStringInterfaceCmd) *MockUniversalClient_FTConfigGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTConfigGet_Call) RunAndReturn(run func(context.Context, string) *MapMapStringInterfaceCmd) *MockUniversalClient_FTConfigGet_Call {
	_c.Call.Return(run)
	return _c
}

// FTConfigSet provides a mock function with given fields: ctx, option, value
func (_m *MockUniversalClient) FTConfigSet(ctx context.Context, option string, value interface{}) *StatusCmd {
	ret := _m.Called(ctx, option, value)

	if len(ret) == 0 {
		panic("no return value specified for FTConfigSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, option, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTConfigSet'
type MockUniversalClient_FTConfigSet_Call struct {
	*mock.Call
}

// FTConfigSet is a helper method to define mock.On call
//   - ctx context.Context
//   - option string
//   - value interface{}
func (_e *MockUniversalClient_Expecter) FTConfigSet(ctx interface{}, option interface{}, value interface{}) *MockUniversalClient_FTConfigSet_Call {
	return &MockUniversalClient_FTConfigSet_Call{Call: _e.mock.On("FTConfigSet", ctx, option, value)}
}

func (_c *MockUniversalClient_FTConfigSet_Call) Run(run func(ctx context.Context, option string, value interface{})) *MockUniversalClient_FTConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_FTConfigSet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTConfigSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTConfigSet_Call) RunAndReturn(run func(context.Context, string, interface{}) *StatusCmd) *MockUniversalClient_FTConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// FTCreate provides a mock function with given fields: ctx, index, options, schema
func (_m *MockUniversalClient) FTCreate(ctx context.Context, index string, options *FTCreateOptions, schema ...*FieldSchema) *StatusCmd {
	_va := make([]interface{}, len(schema))
	for _i := range schema {
		_va[_i] = schema[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, index, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FTCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *FTCreateOptions, ...*FieldSchema) *StatusCmd); ok {
		r0 = rf(ctx, index, options, schema...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTCreate'
type MockUniversalClient_FTCreate_Call struct {
	*mock.Call
}

// FTCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - options *FTCreateOptions
//   - schema ...*FieldSchema
func (_e *MockUniversalClient_Expecter) FTCreate(ctx interface{}, index interface{}, options interface{}, schema ...interface{}) *MockUniversalClient_FTCreate_Call {
	return &MockUniversalClient_FTCreate_Call{Call: _e.mock.On("FTCreate",
		append([]interface{}{ctx, index, options}, schema...)...)}
}

func (_c *MockUniversalClient_FTCreate_Call) Run(run func(ctx context.Context, index string, options *FTCreateOptions, schema ...*FieldSchema)) *MockUniversalClient_FTCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*FieldSchema, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*FieldSchema)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*FTCreateOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_FTCreate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTCreate_Call) RunAndReturn(run func(context.Context, string, *FTCreateOptions, ...*FieldSchema) *StatusCmd) *MockUniversalClient_FTCreate_Call {
	_c.Call.Return(run)
	return _c
}

// FTCursorDel provides a mock function with given fields: ctx, index, cursorId
func (_m *MockUniversalClient) FTCursorDel(ctx context.Context, index string, cursorId int) *StatusCmd {
	ret := _m.Called(ctx, index, cursorId)

	if len(ret) == 0 {
		panic("no return value specified for FTCursorDel")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StatusCmd); ok {
		r0 = rf(ctx, index, cursorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTCursorDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTCursorDel'
type MockUniversalClient_FTCursorDel_Call struct {
	*mock.Call
}

// FTCursorDel is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - cursorId int
func (_e *MockUniversalClient_Expecter) FTCursorDel(ctx interface{}, index interface{}, cursorId interface{}) *MockUniversalClient_FTCursorDel_Call {
	return &MockUniversalClient_FTCursorDel_Call{Call: _e.mock.On("FTCursorDel", ctx, index, cursorId)}
}

func (_c *MockUniversalClient_FTCursorDel_Call) Run(run func(ctx context.Context, index string, cursorId int)) *MockUniversalClient_FTCursorDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_FTCursorDel_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTCursorDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTCursorDel_Call) RunAndReturn(run func(context.Context, string, int) *StatusCmd) *MockUniversalClient_FTCursorDel_Call {
	_c.Call.Return(run)
	return _c
}

// FTCursorRead provides a mock function with given fields: ctx, index, cursorId, count
func (_m *MockUniversalClient) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, index, cursorId, count)

	if len(ret) == 0 {
		panic("no return value specified for FTCursorRead")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, index, cursorId, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTCursorRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTCursorRead'
type MockUniversalClient_FTCursorRead_Call struct {
	*mock.Call
}

// FTCursorRead is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - cursorId int
//   - count int
func (_e *MockUniversalClient_Expecter) FTCursorRead(ctx interface{}, index interface{}, cursorId interface{}, count interface{}) *MockUniversalClient_FTCursorRead_Call {
	return &MockUniversalClient_FTCursorRead_Call{Call: _e.mock.On("FTCursorRead", ctx, index, cursorId, count)}
}

func (_c *MockUniversalClient_FTCursorRead_Call) Run(run func(ctx context.Context, index string, cursorId int, count int)) *MockUniversalClient_FTCursorRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_FTCursorRead_Call) Return(_a0 *MapStringInterfaceCmd) *MockUniversalClient_FTCursorRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTCursorRead_Call) RunAndReturn(run func(context.Context, string, int, int) *MapStringInterfaceCmd) *MockUniversalClient_FTCursorRead_Call {
	_c.Call.Return(run)
	return _c
}

// FTDictAdd provides a mock function with given fields: ctx, dict, term
func (_m *MockUniversalClient) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, dict)
	_ca = append(_ca, term...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FTDictAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, dict, term...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTDictAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDictAdd'
type MockUniversalClient_FTDictAdd_Call struct {
	*mock.Call
}

// FTDictAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - dict string
//   - term ...interface{}
func (_e *MockUniversalClient_Expecter) FTDictAdd(ctx interface{}, dict interface{}, term ...interface{}) *MockUniversalClient_FTDictAdd_Call {
	return &MockUniversalClient_FTDictAdd_Call{Call: _e.mock.On("FTDictAdd",
		append([]interface{}{ctx, dict}, term...)...)}
}

func (_c *MockUniversalClient_FTDictAdd_Call) Run(run func(ctx context.Context, dict string, term ...interface{})) *MockUniversalClient_FTDictAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_FTDictAdd_Call) Return(_a0 *IntCmd) *MockUniversalClient_FTDictAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTDictAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_FTDictAdd_Call {
	_c.Call.Return(run)
	return _c
}

// FTDictDel provides a mock function with given fields: ctx, dict, term
func (_m *MockUniversalClient) FTDictDel(ctx context.Context, dict string, term ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, dict)
	_ca = append(_ca, term...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FTDictDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, dict, term...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTDictDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDictDel'
type MockUniversalClient_FTDictDel_Call struct {
	*mock.Call
}

// FTDictDel is a helper method to define mock.On call
//   - ctx context.Context
//   - dict string
//   - term ...interface{}
func (_e *MockUniversalClient_Expecter) FTDictDel(ctx interface{}, dict interface{}, term ...interface{}) *MockUniversalClient_FTDictDel_Call {
	return &MockUniversalClient_FTDictDel_Call{Call: _e.mock.On("FTDictDel",
		append([]interface{}{ctx, dict}, term...)...)}
}

func (_c *MockUniversalClient_FTDictDel_Call) Run(run func(ctx context.Context, dict string, term ...interface{})) *MockUniversalClient_FTDictDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_FTDictDel_Call) Return(_a0 *IntCmd) *MockUniversalClient_FTDictDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTDictDel_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_FTDictDel_Call {
	_c.Call.Return(run)
	return _c
}

// FTDictDump provides a mock function with given fields: ctx, dict
func (_m *MockUniversalClient) FTDictDump(ctx context.Context, dict string) *StringSliceCmd {
	ret := _m.Called(ctx, dict)

	if len(ret) == 0 {
		panic("no return value specified for FTDictDump")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, dict)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTDictDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDictDump'
type MockUniversalClient_FTDictDump_Call struct {
	*mock.Call
}

// FTDictDump is a helper method to define mock.On call
//   - ctx context.Context
//   - dict string
func (_e *MockUniversalClient_Expecter) FTDictDump(ctx interface{}, dict interface{}) *MockUniversalClient_FTDictDump_Call {
	return &MockUniversalClient_FTDictDump_Call{Call: _e.mock.On("FTDictDump", ctx, dict)}
}

func (_c *MockUniversalClient_FTDictDump_Call) Run(run func(ctx context.Context, dict string)) *MockUniversalClient_FTDictDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTDictDump_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_FTDictDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTDictDump_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_FTDictDump_Call {
	_c.Call.Return(run)
	return _c
}

// FTDropIndex provides a mock function with given fields: ctx, index
func (_m *MockUniversalClient) FTDropIndex(ctx context.Context, index string) *StatusCmd {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for FTDropIndex")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTDropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDropIndex'
type MockUniversalClient_FTDropIndex_Call struct {
	*mock.Call
}

// FTDropIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *MockUniversalClient_Expecter) FTDropIndex(ctx interface{}, index interface{}) *MockUniversalClient_FTDropIndex_Call {
	return &MockUniversalClient_FTDropIndex_Call{Call: _e.mock.On("FTDropIndex", ctx, index)}
}

func (_c *MockUniversalClient_FTDropIndex_Call) Run(run func(ctx context.Context, index string)) *MockUniversalClient_FTDropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTDropIndex_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTDropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTDropIndex_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_FTDropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// FTDropIndexWithArgs provides a mock function with given fields: ctx, index, options
func (_m *MockUniversalClient) FTDropIndexWithArgs(ctx context.Context, index string, options *FTDropIndexOptions) *StatusCmd {
	ret := _m.Called(ctx, index, options)

	if len(ret) == 0 {
		panic("no return value specified for FTDropIndexWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *FTDropIndexOptions) *StatusCmd); ok {
		r0 = rf(ctx, index, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTDropIndexWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDropIndexWithArgs'
type MockUniversalClient_FTDropIndexWithArgs_Call struct {
	*mock.Call
}

// FTDropIndexWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - options *FTDropIndexOptions
func (_e *MockUniversalClient_Expecter) FTDropIndexWithArgs(ctx interface{}, index interface{}, options interface{}) *MockUniversalClient_FTDropIndexWithArgs_Call {
	return &MockUniversalClient_FTDropIndexWithArgs_Call{Call: _e.mock.On("FTDropIndexWithArgs", ctx, index, options)}
}

func (_c *MockUniversalClient_FTDropIndexWithArgs_Call) Run(run func(ctx context.Context, index string, options *FTDropIndexOptions)) *MockUniversalClient_FTDropIndexWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*FTDropIndexOptions))
	})
	return _c
}

func (_c *MockUniversalClient_FTDropIndexWithArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTDropIndexWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTDropIndexWithArgs_Call) RunAndReturn(run func(context.Context, string, *FTDropIndexOptions) *StatusCmd) *MockUniversalClient_FTDropIndexWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTExplain provides a mock function with given fields: ctx, index, query
func (_m *MockUniversalClient) FTExplain(ctx context.Context, index string, query string) *StringCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTExplain")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StringCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTExplain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTExplain'
type MockUniversalClient_FTExplain_Call struct {
	*mock.Call
}

// FTExplain is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockUniversalClient_Expecter) FTExplain(ctx interface{}, index interface{}, query interface{}) *MockUniversalClient_FTExplain_Call {
	return &MockUniversalClient_FTExplain_Call{Call: _e.mock.On("FTExplain", ctx, index, query)}
}

func (_c *MockUniversalClient_FTExplain_Call) Run(run func(ctx context.Context, index string, query string)) *MockUniversalClient_FTExplain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTExplain_Call) Return(_a0 *StringCmd) *MockUniversalClient_FTExplain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTExplain_Call) RunAndReturn(run func(context.Context, string, string) *StringCmd) *MockUniversalClient_FTExplain_Call {
	_c.Call.Return(run)
	return _c
}

// FTExplainWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockUniversalClient) FTExplainWithArgs(ctx context.Context, index string, query string, options *FTExplainOptions) *StringCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTExplainWithArgs")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTExplainOptions) *StringCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTExplainWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTExplainWithArgs'
type MockUniversalClient_FTExplainWithArgs_Call struct {
	*mock.Call
}

// FTExplainWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTExplainOptions
func (_e *MockUniversalClient_Expecter) FTExplainWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockUniversalClient_FTExplainWithArgs_Call {
	return &MockUniversalClient_FTExplainWithArgs_Call{Call: _e.mock.On("FTExplainWithArgs", ctx, index, query, options)}
}

func (_c *MockUniversalClient_FTExplainWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTExplainOptions)) *MockUniversalClient_FTExplainWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTExplainOptions))
	})
	return _c
}

func (_c *MockUniversalClient_FTExplainWithArgs_Call) Return(_a0 *StringCmd) *MockUniversalClient_FTExplainWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTExplainWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTExplainOptions) *StringCmd) *MockUniversalClient_FTExplainWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTInfo provides a mock function with given fields: ctx, index
func (_m *MockUniversalClient) FTInfo(ctx context.Context, index string) *FTInfoCmd {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for FTInfo")
	}

	var r0 *FTInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FTInfoCmd); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTInfo'
type MockUniversalClient_FTInfo_Call struct {
	*mock.Call
}

// FTInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *MockUniversalClient_Expecter) FTInfo(ctx interface{}, index interface{}) *MockUniversalClient_FTInfo_Call {
	return &MockUniversalClient_FTInfo_Call{Call: _e.mock.On("FTInfo", ctx, index)}
}

func (_c *MockUniversalClient_FTInfo_Call) Run(run func(ctx context.Context, index string)) *MockUniversalClient_FTInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTInfo_Call) Return(_a0 *FTInfoCmd) *MockUniversalClient_FTInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTInfo_Call) RunAndReturn(run func(context.Context, string) *FTInfoCmd) *MockUniversalClient_FTInfo_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearch provides a mock function with given fields: ctx, index, query
func (_m *MockUniversalClient) FTSearch(ctx context.Context, index string, query string) *FTSearchCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTSearch")
	}

	var r0 *FTSearchCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *FTSearchCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSearchCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearch'
type MockUniversalClient_FTSearch_Call struct {
	*mock.Call
}

// FTSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockUniversalClient_Expecter) FTSearch(ctx interface{}, index interface{}, query interface{}) *MockUniversalClient_FTSearch_Call {
	return &MockUniversalClient_FTSearch_Call{Call: _e.mock.On("FTSearch", ctx, index, query)}
}

func (_c *MockUniversalClient_FTSearch_Call) Run(run func(ctx context.Context, index string, query string)) *MockUniversalClient_FTSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTSearch_Call) Return(_a0 *FTSearchCmd) *MockUniversalClient_FTSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSearch_Call) RunAndReturn(run func(context.Context, string, string) *FTSearchCmd) *MockUniversalClient_FTSearch_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearchWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockUniversalClient) FTSearchWithArgs(ctx context.Context, index string, query string, options *FTSearchOptions) *FTSearchCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTSearchWithArgs")
	}

	var r0 *FTSearchCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTSearchOptions) *FTSearchCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSearchCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSearchWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearchWithArgs'
type MockUniversalClient_FTSearchWithArgs_Call struct {
	*mock.Call
}

// FTSearchWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTSearchOptions
func (_e *MockUniversalClient_Expecter) FTSearchWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockUniversalClient_FTSearchWithArgs_Call {
	return &MockUniversalClient_FTSearchWithArgs_Call{Call: _e.mock.On("FTSearchWithArgs", ctx, index, query, options)}
}

func (_c *MockUniversalClient_FTSearchWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTSearchOptions)) *MockUniversalClient_FTSearchWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTSearchOptions))
	})
	return _c
}

func (_c *MockUniversalClient_FTSearchWithArgs_Call) Return(_a0 *FTSearchCmd) *MockUniversalClient_FTSearchWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSearchWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTSearchOptions) *FTSearchCmd) *MockUniversalClient_FTSearchWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTSpellCheck provides a mock function with given fields: ctx, index, query
func (_m *MockUniversalClient) FTSpellCheck(ctx context.Context, index string, query string) *FTSpellCheckCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTSpellCheck")
	}

	var r0 *FTSpellCheckCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *FTSpellCheckCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSpellCheckCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSpellCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSpellCheck'
type MockUniversalClient_FTSpellCheck_Call struct {
	*mock.Call
}

// FTSpellCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockUniversalClient_Expecter) FTSpellCheck(ctx interface{}, index interface{}, query interface{}) *MockUniversalClient_FTSpellCheck_Call {
	return &MockUniversalClient_FTSpellCheck_Call{Call: _e.mock.On("FTSpellCheck", ctx, index, query)}
}

func (_c *MockUniversalClient_FTSpellCheck_Call) Run(run func(ctx context.Context, index string, query string)) *MockUniversalClient_FTSpellCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTSpellCheck_Call) Return(_a0 *FTSpellCheckCmd) *MockUniversalClient_FTSpellCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSpellCheck_Call) RunAndReturn(run func(context.Context, string, string) *FTSpellCheckCmd) *MockUniversalClient_FTSpellCheck_Call {
	_c.Call.Return(run)
	return _c
}

// FTSpellCheckWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockUniversalClient) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *FTSpellCheckOptions) *FTSpellCheckCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTSpellCheckWithArgs")
	}

	var r0 *FTSpellCheckCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTSpellCheckOptions) *FTSpellCheckCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSpellCheckCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSpellCheckWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSpellCheckWithArgs'
type MockUniversalClient_FTSpellCheckWithArgs_Call struct {
	*mock.Call
}

// FTSpellCheckWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTSpellCheckOptions
func (_e *MockUniversalClient_Expecter) FTSpellCheckWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockUniversalClient_FTSpellCheckWithArgs_Call {
	return &MockUniversalClient_FTSpellCheckWithArgs_Call{Call: _e.mock.On("FTSpellCheckWithArgs", ctx, index, query, options)}
}

func (_c *MockUniversalClient_FTSpellCheckWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTSpellCheckOptions)) *MockUniversalClient_FTSpellCheckWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTSpellCheckOptions))
	})
	return _c
}

func (_c *MockUniversalClient_FTSpellCheckWithArgs_Call) Return(_a0 *FTSpellCheckCmd) *MockUniversalClient_FTSpellCheckWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSpellCheckWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTSpellCheckOptions) *FTSpellCheckCmd) *MockUniversalClient_FTSpellCheckWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTSynDump provides a mock function with given fields: ctx, index
func (_m *MockUniversalClient) FTSynDump(ctx context.Context, index string) *FTSynDumpCmd {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for FTSynDump")
	}

	var r0 *FTSynDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FTSynDumpCmd); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSynDumpCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSynDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSynDump'
type MockUniversalClient_FTSynDump_Call struct {
	*mock.Call
}

// FTSynDump is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *MockUniversalClient_Expecter) FTSynDump(ctx interface{}, index interface{}) *MockUniversalClient_FTSynDump_Call {
	return &MockUniversalClient_FTSynDump_Call{Call: _e.mock.On("FTSynDump", ctx, index)}
}

func (_c *MockUniversalClient_FTSynDump_Call) Run(run func(ctx context.Context, index string)) *MockUniversalClient_FTSynDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTSynDump_Call) Return(_a0 *FTSynDumpCmd) *MockUniversalClient_FTSynDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSynDump_Call) RunAndReturn(run func(context.Context, string) *FTSynDumpCmd) *MockUniversalClient_FTSynDump_Call {
	_c.Call.Return(run)
	return _c
}

// FTSynUpdate provides a mock function with given fields: ctx, index, synGroupId, terms
func (_m *MockUniversalClient) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *StatusCmd {
	ret := _m.Called(ctx, index, synGroupId, terms)

	if len(ret) == 0 {
		panic("no return value specified for FTSynUpdate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []interface{}) *StatusCmd); ok {
		r0 = rf(ctx, index, synGroupId, terms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSynUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSynUpdate'
type MockUniversalClient_FTSynUpdate_Call struct {
	*mock.Call
}

// FTSynUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - synGroupId interface{}
//   - terms []interface{}
func (_e *MockUniversalClient_Expecter) FTSynUpdate(ctx interface{}, index interface{}, synGroupId interface{}, terms interface{}) *MockUniversalClient_FTSynUpdate_Call {
	return &MockUniversalClient_FTSynUpdate_Call{Call: _e.mock.On("FTSynUpdate", ctx, index, synGroupId, terms)}
}

func (_c *MockUniversalClient_FTSynUpdate_Call) Run(run func(ctx context.Context, index string, synGroupId interface{}, terms []interface{})) *MockUniversalClient_FTSynUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].([]interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_FTSynUpdate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTSynUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSynUpdate_Call) RunAndReturn(run func(context.Context, string, interface{}, []interface{}) *StatusCmd) *MockUniversalClient_FTSynUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// FTSynUpdateWithArgs provides a mock function with given fields: ctx, index, synGroupId, options, terms
func (_m *MockUniversalClient) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *FTSynUpdateOptions, terms []interface{}) *StatusCmd {
	ret := _m.Called(ctx, index, synGroupId, options, terms)

	if len(ret) == 0 {
		panic("no return value specified for FTSynUpdateWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *FTSynUpdateOptions, []interface{}) *StatusCmd); ok {
		r0 = rf(ctx, index, synGroupId, options, terms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTSynUpdateWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSynUpdateWithArgs'
type MockUniversalClient_FTSynUpdateWithArgs_Call struct {
	*mock.Call
}

// FTSynUpdateWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - synGroupId interface{}
//   - options *FTSynUpdateOptions
//   - terms []interface{}
func (_e *MockUniversalClient_Expecter) FTSynUpdateWithArgs(ctx interface{}, index interface{}, synGroupId interface{}, options interface{}, terms interface{}) *MockUniversalClient_FTSynUpdateWithArgs_Call {
	return &MockUniversalClient_FTSynUpdateWithArgs_Call{Call: _e.mock.On("FTSynUpdateWithArgs", ctx, index, synGroupId, options, terms)}
}

func (_c *MockUniversalClient_FTSynUpdateWithArgs_Call) Run(run func(ctx context.Context, index string, synGroupId interface{}, options *FTSynUpdateOptions, terms []interface{})) *MockUniversalClient_FTSynUpdateWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*FTSynUpdateOptions), args[4].([]interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_FTSynUpdateWithArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FTSynUpdateWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTSynUpdateWithArgs_Call) RunAndReturn(run func(context.Context, string, interface{}, *FTSynUpdateOptions, []interface{}) *StatusCmd) *MockUniversalClient_FTSynUpdateWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTTagVals provides a mock function with given fields: ctx, index, field
func (_m *MockUniversalClient) FTTagVals(ctx context.Context, index string, field string) *StringSliceCmd {
	ret := _m.Called(ctx, index, field)

	if len(ret) == 0 {
		panic("no return value specified for FTTagVals")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StringSliceCmd); ok {
		r0 = rf(ctx, index, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_FTTagVals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTTagVals'
type MockUniversalClient_FTTagVals_Call struct {
	*mock.Call
}

// FTTagVals is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - field string
func (_e *MockUniversalClient_Expecter) FTTagVals(ctx interface{}, index interface{}, field interface{}) *MockUniversalClient_FTTagVals_Call {
	return &MockUniversalClient_FTTagVals_Call{Call: _e.mock.On("FTTagVals", ctx, index, field)}
}

func (_c *MockUniversalClient_FTTagVals_Call) Run(run func(ctx context.Context, index string, field string)) *MockUniversalClient_FTTagVals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FTTagVals_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_FTTagVals_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FTTagVals_Call) RunAndReturn(run func(context.Context, string, string) *StringSliceCmd) *MockUniversalClient_FTTagVals_Call {
	_c.Call.Return(run)
	return _c
}

// FT_List provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FT_List(ctx context.Context) *StringSliceCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FT_List")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringSliceCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_FT_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FT_List'
type MockUniversalClient_FT_List_Call struct {
	*mock.Call
}

// FT_List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FT_List(ctx interface{}) *MockUniversalClient_FT_List_Call {
	return &MockUniversalClient_FT_List_Call{Call: _e.mock.On("FT_List", ctx)}
}

func (_c *MockUniversalClient_FT_List_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FT_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FT_List_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_FT_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FT_List_Call) RunAndReturn(run func(context.Context) *StringSliceCmd) *MockUniversalClient_FT_List_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FlushAll(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockUniversalClient_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FlushAll(ctx interface{}) *MockUniversalClient_FlushAll_Call {
	return &MockUniversalClient_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockUniversalClient_FlushAll_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FlushAll_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FlushAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FlushAll_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAllAsync provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FlushAllAsync(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAllAsync")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FlushAllAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAllAsync'
type MockUniversalClient_FlushAllAsync_Call struct {
	*mock.Call
}

// FlushAllAsync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FlushAllAsync(ctx interface{}) *MockUniversalClient_FlushAllAsync_Call {
	return &MockUniversalClient_FlushAllAsync_Call{Call: _e.mock.On("FlushAllAsync", ctx)}
}

func (_c *MockUniversalClient_FlushAllAsync_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FlushAllAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FlushAllAsync_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FlushAllAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FlushAllAsync_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_FlushAllAsync_Call {
	_c.Call.Return(run)
	return _c
}

// FlushDB provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FlushDB(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushDB")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FlushDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushDB'
type MockUniversalClient_FlushDB_Call struct {
	*mock.Call
}

// FlushDB is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FlushDB(ctx interface{}) *MockUniversalClient_FlushDB_Call {
	return &MockUniversalClient_FlushDB_Call{Call: _e.mock.On("FlushDB", ctx)}
}

func (_c *MockUniversalClient_FlushDB_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FlushDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FlushDB_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FlushDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FlushDB_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_FlushDB_Call {
	_c.Call.Return(run)
	return _c
}

// FlushDBAsync provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FlushDBAsync(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushDBAsync")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_FlushDBAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushDBAsync'
type MockUniversalClient_FlushDBAsync_Call struct {
	*mock.Call
}

// FlushDBAsync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FlushDBAsync(ctx interface{}) *MockUniversalClient_FlushDBAsync_Call {
	return &MockUniversalClient_FlushDBAsync_Call{Call: _e.mock.On("FlushDBAsync", ctx)}
}

func (_c *MockUniversalClient_FlushDBAsync_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FlushDBAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FlushDBAsync_Call) Return(_a0 *StatusCmd) *MockUniversalClient_FlushDBAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FlushDBAsync_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_FlushDBAsync_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionDelete provides a mock function with given fields: ctx, libName
func (_m *MockUniversalClient) FunctionDelete(ctx context.Context, libName string) *StringCmd {
	ret := _m.Called(ctx, libName)

	if len(ret) == 0 {
		panic("no return value specified for FunctionDelete")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, libName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionDelete'
type MockUniversalClient_FunctionDelete_Call struct {
	*mock.Call
}

// FunctionDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
func (_e *MockUniversalClient_Expecter) FunctionDelete(ctx interface{}, libName interface{}) *MockUniversalClient_FunctionDelete_Call {
	return &MockUniversalClient_FunctionDelete_Call{Call: _e.mock.On("FunctionDelete", ctx, libName)}
}

func (_c *MockUniversalClient_FunctionDelete_Call) Run(run func(ctx context.Context, libName string)) *MockUniversalClient_FunctionDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionDelete_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionDelete_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_FunctionDelete_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionDump provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FunctionDump(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FunctionDump")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionDump'
type MockUniversalClient_FunctionDump_Call struct {
	*mock.Call
}

// FunctionDump is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FunctionDump(ctx interface{}) *MockUniversalClient_FunctionDump_Call {
	return &MockUniversalClient_FunctionDump_Call{Call: _e.mock.On("FunctionDump", ctx)}
}

func (_c *MockUniversalClient_FunctionDump_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FunctionDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionDump_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionDump_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_FunctionDump_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionFlush provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FunctionFlush(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FunctionFlush")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionFlush'
type MockUniversalClient_FunctionFlush_Call struct {
	*mock.Call
}

// FunctionFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FunctionFlush(ctx interface{}) *MockUniversalClient_FunctionFlush_Call {
	return &MockUniversalClient_FunctionFlush_Call{Call: _e.mock.On("FunctionFlush", ctx)}
}

func (_c *MockUniversalClient_FunctionFlush_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FunctionFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionFlush_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionFlush_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_FunctionFlush_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionFlushAsync provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FunctionFlushAsync(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FunctionFlushAsync")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionFlushAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionFlushAsync'
type MockUniversalClient_FunctionFlushAsync_Call struct {
	*mock.Call
}

// FunctionFlushAsync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FunctionFlushAsync(ctx interface{}) *MockUniversalClient_FunctionFlushAsync_Call {
	return &MockUniversalClient_FunctionFlushAsync_Call{Call: _e.mock.On("FunctionFlushAsync", ctx)}
}

func (_c *MockUniversalClient_FunctionFlushAsync_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FunctionFlushAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionFlushAsync_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionFlushAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionFlushAsync_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_FunctionFlushAsync_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionKill provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FunctionKill(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FunctionKill")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionKill'
type MockUniversalClient_FunctionKill_Call struct {
	*mock.Call
}

// FunctionKill is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FunctionKill(ctx interface{}) *MockUniversalClient_FunctionKill_Call {
	return &MockUniversalClient_FunctionKill_Call{Call: _e.mock.On("FunctionKill", ctx)}
}

func (_c *MockUniversalClient_FunctionKill_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FunctionKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionKill_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionKill_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_FunctionKill_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionList provides a mock function with given fields: ctx, q
func (_m *MockUniversalClient) FunctionList(ctx context.Context, q FunctionListQuery) *FunctionListCmd {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for FunctionList")
	}

	var r0 *FunctionListCmd
	if rf, ok := ret.Get(0).(func(context.Context, FunctionListQuery) *FunctionListCmd); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FunctionListCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionList'
type MockUniversalClient_FunctionList_Call struct {
	*mock.Call
}

// FunctionList is a helper method to define mock.On call
//   - ctx context.Context
//   - q FunctionListQuery
func (_e *MockUniversalClient_Expecter) FunctionList(ctx interface{}, q interface{}) *MockUniversalClient_FunctionList_Call {
	return &MockUniversalClient_FunctionList_Call{Call: _e.mock.On("FunctionList", ctx, q)}
}

func (_c *MockUniversalClient_FunctionList_Call) Run(run func(ctx context.Context, q FunctionListQuery)) *MockUniversalClient_FunctionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(FunctionListQuery))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionList_Call) Return(_a0 *FunctionListCmd) *MockUniversalClient_FunctionList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionList_Call) RunAndReturn(run func(context.Context, FunctionListQuery) *FunctionListCmd) *MockUniversalClient_FunctionList_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionLoad provides a mock function with given fields: ctx, code
func (_m *MockUniversalClient) FunctionLoad(ctx context.Context, code string) *StringCmd {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for FunctionLoad")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionLoad'
type MockUniversalClient_FunctionLoad_Call struct {
	*mock.Call
}

// FunctionLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockUniversalClient_Expecter) FunctionLoad(ctx interface{}, code interface{}) *MockUniversalClient_FunctionLoad_Call {
	return &MockUniversalClient_FunctionLoad_Call{Call: _e.mock.On("FunctionLoad", ctx, code)}
}

func (_c *MockUniversalClient_FunctionLoad_Call) Run(run func(ctx context.Context, code string)) *MockUniversalClient_FunctionLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionLoad_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionLoad_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_FunctionLoad_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionLoadReplace provides a mock function with given fields: ctx, code
func (_m *MockUniversalClient) FunctionLoadReplace(ctx context.Context, code string) *StringCmd {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for FunctionLoadReplace")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionLoadReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionLoadReplace'
type MockUniversalClient_FunctionLoadReplace_Call struct {
	*mock.Call
}

// FunctionLoadReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockUniversalClient_Expecter) FunctionLoadReplace(ctx interface{}, code interface{}) *MockUniversalClient_FunctionLoadReplace_Call {
	return &MockUniversalClient_FunctionLoadReplace_Call{Call: _e.mock.On("FunctionLoadReplace", ctx, code)}
}

func (_c *MockUniversalClient_FunctionLoadReplace_Call) Run(run func(ctx context.Context, code string)) *MockUniversalClient_FunctionLoadReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionLoadReplace_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionLoadReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionLoadReplace_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_FunctionLoadReplace_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionRestore provides a mock function with given fields: ctx, libDump
func (_m *MockUniversalClient) FunctionRestore(ctx context.Context, libDump string) *StringCmd {
	ret := _m.Called(ctx, libDump)

	if len(ret) == 0 {
		panic("no return value specified for FunctionRestore")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, libDump)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionRestore'
type MockUniversalClient_FunctionRestore_Call struct {
	*mock.Call
}

// FunctionRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - libDump string
func (_e *MockUniversalClient_Expecter) FunctionRestore(ctx interface{}, libDump interface{}) *MockUniversalClient_FunctionRestore_Call {
	return &MockUniversalClient_FunctionRestore_Call{Call: _e.mock.On("FunctionRestore", ctx, libDump)}
}

func (_c *MockUniversalClient_FunctionRestore_Call) Run(run func(ctx context.Context, libDump string)) *MockUniversalClient_FunctionRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionRestore_Call) Return(_a0 *StringCmd) *MockUniversalClient_FunctionRestore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionRestore_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_FunctionRestore_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionStats provides a mock function with given fields: ctx
func (_m *MockUniversalClient) FunctionStats(ctx context.Context) *FunctionStatsCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FunctionStats")
	}

	var r0 *FunctionStatsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *FunctionStatsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FunctionStatsCmd)
		}
	}

	return r0
}

// MockUniversalClient_FunctionStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionStats'
type MockUniversalClient_FunctionStats_Call struct {
	*mock.Call
}

// FunctionStats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) FunctionStats(ctx interface{}) *MockUniversalClient_FunctionStats_Call {
	return &MockUniversalClient_FunctionStats_Call{Call: _e.mock.On("FunctionStats", ctx)}
}

func (_c *MockUniversalClient_FunctionStats_Call) Run(run func(ctx context.Context)) *MockUniversalClient_FunctionStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_FunctionStats_Call) Return(_a0 *FunctionStatsCmd) *MockUniversalClient_FunctionStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_FunctionStats_Call) RunAndReturn(run func(context.Context) *FunctionStatsCmd) *MockUniversalClient_FunctionStats_Call {
	_c.Call.Return(run)
	return _c
}

// GeoAdd provides a mock function with given fields: ctx, key, geoLocation
func (_m *MockUniversalClient) GeoAdd(ctx context.Context, key string, geoLocation ...*GeoLocation) *IntCmd {
	_va := make([]interface{}, len(geoLocation))
	for _i := range geoLocation {
		_va[_i] = geoLocation[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GeoAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*GeoLocation) *IntCmd); ok {
		r0 = rf(ctx, key, geoLocation...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoAdd'
type MockUniversalClient_GeoAdd_Call struct {
	*mock.Call
}

// GeoAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - geoLocation ...*GeoLocation
func (_e *MockUniversalClient_Expecter) GeoAdd(ctx interface{}, key interface{}, geoLocation ...interface{}) *MockUniversalClient_GeoAdd_Call {
	return &MockUniversalClient_GeoAdd_Call{Call: _e.mock.On("GeoAdd",
		append([]interface{}{ctx, key}, geoLocation...)...)}
}

func (_c *MockUniversalClient_GeoAdd_Call) Run(run func(ctx context.Context, key string, geoLocation ...*GeoLocation)) *MockUniversalClient_GeoAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*GeoLocation, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*GeoLocation)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_GeoAdd_Call) Return(_a0 *IntCmd) *MockUniversalClient_GeoAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoAdd_Call) RunAndReturn(run func(context.Context, string, ...*GeoLocation) *IntCmd) *MockUniversalClient_GeoAdd_Call {
	_c.Call.Return(run)
	return _c
}

// GeoDist provides a mock function with given fields: ctx, key, member1, member2, unit
func (_m *MockUniversalClient) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *FloatCmd {
	ret := _m.Called(ctx, key, member1, member2, unit)

	if len(ret) == 0 {
		panic("no return value specified for GeoDist")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *FloatCmd); ok {
		r0 = rf(ctx, key, member1, member2, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoDist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoDist'
type MockUniversalClient_GeoDist_Call struct {
	*mock.Call
}

// GeoDist is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member1 string
//   - member2 string
//   - unit string
func (_e *MockUniversalClient_Expecter) GeoDist(ctx interface{}, key interface{}, member1 interface{}, member2 interface{}, unit interface{}) *MockUniversalClient_GeoDist_Call {
	return &MockUniversalClient_GeoDist_Call{Call: _e.mock.On("GeoDist", ctx, key, member1, member2, unit)}
}

func (_c *MockUniversalClient_GeoDist_Call) Run(run func(ctx context.Context, key string, member1 string, member2 string, unit string)) *MockUniversalClient_GeoDist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockUniversalClient_GeoDist_Call) Return(_a0 *FloatCmd) *MockUniversalClient_GeoDist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoDist_Call) RunAndReturn(run func(context.Context, string, string, string, string) *FloatCmd) *MockUniversalClient_GeoDist_Call {
	_c.Call.Return(run)
	return _c
}

// GeoHash provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) GeoHash(ctx context.Context, key string, members ...string) *StringSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GeoHash")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoHash'
type MockUniversalClient_GeoHash_Call struct {
	*mock.Call
}

// GeoHash is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *MockUniversalClient_Expecter) GeoHash(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_GeoHash_Call {
	return &MockUniversalClient_GeoHash_Call{Call: _e.mock.On("GeoHash",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_GeoHash_Call) Run(run func(ctx context.Context, key string, members ...string)) *MockUniversalClient_GeoHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_GeoHash_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_GeoHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoHash_Call) RunAndReturn(run func(context.Context, string, ...string) *StringSliceCmd) *MockUniversalClient_GeoHash_Call {
	_c.Call.Return(run)
	return _c
}

// GeoPos provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) GeoPos(ctx context.Context, key string, members ...string) *GeoPosCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GeoPos")
	}

	var r0 *GeoPosCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *GeoPosCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GeoPosCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoPos'
type MockUniversalClient_GeoPos_Call struct {
	*mock.Call
}

// GeoPos is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *MockUniversalClient_Expecter) GeoPos(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_GeoPos_Call {
	return &MockUniversalClient_GeoPos_Call{Call: _e.mock.On("GeoPos",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_GeoPos_Call) Run(run func(ctx context.Context, key string, members ...string)) *MockUniversalClient_GeoPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_GeoPos_Call) Return(_a0 *GeoPosCmd) *MockUniversalClient_GeoPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoPos_Call) RunAndReturn(run func(context.Context, string, ...string) *GeoPosCmd) *MockUniversalClient_GeoPos_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadius provides a mock function with given fields: ctx, key, longitude, latitude, query
func (_m *MockUniversalClient) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *GeoRadiusQuery) *GeoLocationCmd {
	ret := _m.Called(ctx, key, longitude, latitude, query)

	if len(ret) == 0 {
		panic("no return value specified for GeoRadius")
	}

	var r0 *GeoLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, *GeoRadiusQuery) *GeoLocationCmd); ok {
		r0 = rf(ctx, key, longitude, latitude, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GeoLocationCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoRadius_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadius'
type MockUniversalClient_GeoRadius_Call struct {
	*mock.Call
}

// GeoRadius is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - longitude float64
//   - latitude float64
//   - query *GeoRadiusQuery
func (_e *MockUniversalClient_Expecter) GeoRadius(ctx interface{}, key interface{}, longitude interface{}, latitude interface{}, query interface{}) *MockUniversalClient_GeoRadius_Call {
	return &MockUniversalClient_GeoRadius_Call{Call: _e.mock.On("GeoRadius", ctx, key, longitude, latitude, query)}
}

func (_c *MockUniversalClient_GeoRadius_Call) Run(run func(ctx context.Context, key string, longitude float64, latitude float64, query *GeoRadiusQuery)) *MockUniversalClient_GeoRadius_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64), args[4].(*GeoRadiusQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoRadius_Call) Return(_a0 *GeoLocationCmd) *MockUniversalClient_GeoRadius_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoRadius_Call) RunAndReturn(run func(context.Context, string, float64, float64, *GeoRadiusQuery) *GeoLocationCmd) *MockUniversalClient_GeoRadius_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadiusByMember provides a mock function with given fields: ctx, key, member, query
func (_m *MockUniversalClient) GeoRadiusByMember(ctx context.Context, key string, member string, query *GeoRadiusQuery) *GeoLocationCmd {
	ret := _m.Called(ctx, key, member, query)

	if len(ret) == 0 {
		panic("no return value specified for GeoRadiusByMember")
	}

	var r0 *GeoLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *GeoRadiusQuery) *GeoLocationCmd); ok {
		r0 = rf(ctx, key, member, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GeoLocationCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoRadiusByMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadiusByMember'
type MockUniversalClient_GeoRadiusByMember_Call struct {
	*mock.Call
}

// GeoRadiusByMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
//   - query *GeoRadiusQuery
func (_e *MockUniversalClient_Expecter) GeoRadiusByMember(ctx interface{}, key interface{}, member interface{}, query interface{}) *MockUniversalClient_GeoRadiusByMember_Call {
	return &MockUniversalClient_GeoRadiusByMember_Call{Call: _e.mock.On("GeoRadiusByMember", ctx, key, member, query)}
}

func (_c *MockUniversalClient_GeoRadiusByMember_Call) Run(run func(ctx context.Context, key string, member string, query *GeoRadiusQuery)) *MockUniversalClient_GeoRadiusByMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*GeoRadiusQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoRadiusByMember_Call) Return(_a0 *GeoLocationCmd) *MockUniversalClient_GeoRadiusByMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoRadiusByMember_Call) RunAndReturn(run func(context.Context, string, string, *GeoRadiusQuery) *GeoLocationCmd) *MockUniversalClient_GeoRadiusByMember_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadiusByMemberStore provides a mock function with given fields: ctx, key, member, query
func (_m *MockUniversalClient) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *GeoRadiusQuery) *IntCmd {
	ret := _m.Called(ctx, key, member, query)

	if len(ret) == 0 {
		panic("no return value specified for GeoRadiusByMemberStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *GeoRadiusQuery) *IntCmd); ok {
		r0 = rf(ctx, key, member, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoRadiusByMemberStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadiusByMemberStore'
type MockUniversalClient_GeoRadiusByMemberStore_Call struct {
	*mock.Call
}

// GeoRadiusByMemberStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
//   - query *GeoRadiusQuery
func (_e *MockUniversalClient_Expecter) GeoRadiusByMemberStore(ctx interface{}, key interface{}, member interface{}, query interface{}) *MockUniversalClient_GeoRadiusByMemberStore_Call {
	return &MockUniversalClient_GeoRadiusByMemberStore_Call{Call: _e.mock.On("GeoRadiusByMemberStore", ctx, key, member, query)}
}

func (_c *MockUniversalClient_GeoRadiusByMemberStore_Call) Run(run func(ctx context.Context, key string, member string, query *GeoRadiusQuery)) *MockUniversalClient_GeoRadiusByMemberStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*GeoRadiusQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoRadiusByMemberStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_GeoRadiusByMemberStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoRadiusByMemberStore_Call) RunAndReturn(run func(context.Context, string, string, *GeoRadiusQuery) *IntCmd) *MockUniversalClient_GeoRadiusByMemberStore_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadiusStore provides a mock function with given fields: ctx, key, longitude, latitude, query
func (_m *MockUniversalClient) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *GeoRadiusQuery) *IntCmd {
	ret := _m.Called(ctx, key, longitude, latitude, query)

	if len(ret) == 0 {
		panic("no return value specified for GeoRadiusStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, *GeoRadiusQuery) *IntCmd); ok {
		r0 = rf(ctx, key, longitude, latitude, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoRadiusStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadiusStore'
type MockUniversalClient_GeoRadiusStore_Call struct {
	*mock.Call
}

// GeoRadiusStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - longitude float64
//   - latitude float64
//   - query *GeoRadiusQuery
func (_e *MockUniversalClient_Expecter) GeoRadiusStore(ctx interface{}, key interface{}, longitude interface{}, latitude interface{}, query interface{}) *MockUniversalClient_GeoRadiusStore_Call {
	return &MockUniversalClient_GeoRadiusStore_Call{Call: _e.mock.On("GeoRadiusStore", ctx, key, longitude, latitude, query)}
}

func (_c *MockUniversalClient_GeoRadiusStore_Call) Run(run func(ctx context.Context, key string, longitude float64, latitude float64, query *GeoRadiusQuery)) *MockUniversalClient_GeoRadiusStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64), args[4].(*GeoRadiusQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoRadiusStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_GeoRadiusStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoRadiusStore_Call) RunAndReturn(run func(context.Context, string, float64, float64, *GeoRadiusQuery) *IntCmd) *MockUniversalClient_GeoRadiusStore_Call {
	_c.Call.Return(run)
	return _c
}

// GeoSearch provides a mock function with given fields: ctx, key, q
func (_m *MockUniversalClient) GeoSearch(ctx context.Context, key string, q *GeoSearchQuery) *StringSliceCmd {
	ret := _m.Called(ctx, key, q)

	if len(ret) == 0 {
		panic("no return value specified for GeoSearch")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *GeoSearchQuery) *StringSliceCmd); ok {
		r0 = rf(ctx, key, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoSearch'
type MockUniversalClient_GeoSearch_Call struct {
	*mock.Call
}

// GeoSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - q *GeoSearchQuery
func (_e *MockUniversalClient_Expecter) GeoSearch(ctx interface{}, key interface{}, q interface{}) *MockUniversalClient_GeoSearch_Call {
	return &MockUniversalClient_GeoSearch_Call{Call: _e.mock.On("GeoSearch", ctx, key, q)}
}

func (_c *MockUniversalClient_GeoSearch_Call) Run(run func(ctx context.Context, key string, q *GeoSearchQuery)) *MockUniversalClient_GeoSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*GeoSearchQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoSearch_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_GeoSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoSearch_Call) RunAndReturn(run func(context.Context, string, *GeoSearchQuery) *StringSliceCmd) *MockUniversalClient_GeoSearch_Call {
	_c.Call.Return(run)
	return _c
}

// GeoSearchLocation provides a mock function with given fields: ctx, key, q
func (_m *MockUniversalClient) GeoSearchLocation(ctx context.Context, key string, q *GeoSearchLocationQuery) *GeoSearchLocationCmd {
	ret := _m.Called(ctx, key, q)

	if len(ret) == 0 {
		panic("no return value specified for GeoSearchLocation")
	}

	var r0 *GeoSearchLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *GeoSearchLocationQuery) *GeoSearchLocationCmd); ok {
		r0 = rf(ctx, key, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GeoSearchLocationCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoSearchLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoSearchLocation'
type MockUniversalClient_GeoSearchLocation_Call struct {
	*mock.Call
}

// GeoSearchLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - q *GeoSearchLocationQuery
func (_e *MockUniversalClient_Expecter) GeoSearchLocation(ctx interface{}, key interface{}, q interface{}) *MockUniversalClient_GeoSearchLocation_Call {
	return &MockUniversalClient_GeoSearchLocation_Call{Call: _e.mock.On("GeoSearchLocation", ctx, key, q)}
}

func (_c *MockUniversalClient_GeoSearchLocation_Call) Run(run func(ctx context.Context, key string, q *GeoSearchLocationQuery)) *MockUniversalClient_GeoSearchLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*GeoSearchLocationQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoSearchLocation_Call) Return(_a0 *GeoSearchLocationCmd) *MockUniversalClient_GeoSearchLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoSearchLocation_Call) RunAndReturn(run func(context.Context, string, *GeoSearchLocationQuery) *GeoSearchLocationCmd) *MockUniversalClient_GeoSearchLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GeoSearchStore provides a mock function with given fields: ctx, key, store, q
func (_m *MockUniversalClient) GeoSearchStore(ctx context.Context, key string, store string, q *GeoSearchStoreQuery) *IntCmd {
	ret := _m.Called(ctx, key, store, q)

	if len(ret) == 0 {
		panic("no return value specified for GeoSearchStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *GeoSearchStoreQuery) *IntCmd); ok {
		r0 = rf(ctx, key, store, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_GeoSearchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoSearchStore'
type MockUniversalClient_GeoSearchStore_Call struct {
	*mock.Call
}

// GeoSearchStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - store string
//   - q *GeoSearchStoreQuery
func (_e *MockUniversalClient_Expecter) GeoSearchStore(ctx interface{}, key interface{}, store interface{}, q interface{}) *MockUniversalClient_GeoSearchStore_Call {
	return &MockUniversalClient_GeoSearchStore_Call{Call: _e.mock.On("GeoSearchStore", ctx, key, store, q)}
}

func (_c *MockUniversalClient_GeoSearchStore_Call) Run(run func(ctx context.Context, key string, store string, q *GeoSearchStoreQuery)) *MockUniversalClient_GeoSearchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*GeoSearchStoreQuery))
	})
	return _c
}

func (_c *MockUniversalClient_GeoSearchStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_GeoSearchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GeoSearchStore_Call) RunAndReturn(run func(context.Context, string, string, *GeoSearchStoreQuery) *IntCmd) *MockUniversalClient_GeoSearchStore_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) Get(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUniversalClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) Get(ctx interface{}, key interface{}) *MockUniversalClient_Get_Call {
	return &MockUniversalClient_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockUniversalClient_Get_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Get_Call) Return(_a0 *StringCmd) *MockUniversalClient_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Get_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBit provides a mock function with given fields: ctx, key, offset
func (_m *MockUniversalClient) GetBit(ctx context.Context, key string, offset int64) *IntCmd {
	ret := _m.Called(ctx, key, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBit")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_GetBit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBit'
type MockUniversalClient_GetBit_Call struct {
	*mock.Call
}

// GetBit is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - offset int64
func (_e *MockUniversalClient_Expecter) GetBit(ctx interface{}, key interface{}, offset interface{}) *MockUniversalClient_GetBit_Call {
	return &MockUniversalClient_GetBit_Call{Call: _e.mock.On("GetBit", ctx, key, offset)}
}

func (_c *MockUniversalClient_GetBit_Call) Run(run func(ctx context.Context, key string, offset int64)) *MockUniversalClient_GetBit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_GetBit_Call) Return(_a0 *IntCmd) *MockUniversalClient_GetBit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GetBit_Call) RunAndReturn(run func(context.Context, string, int64) *IntCmd) *MockUniversalClient_GetBit_Call {
	_c.Call.Return(run)
	return _c
}

// GetDel provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) GetDel(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetDel")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_GetDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDel'
type MockUniversalClient_GetDel_Call struct {
	*mock.Call
}

// GetDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) GetDel(ctx interface{}, key interface{}) *MockUniversalClient_GetDel_Call {
	return &MockUniversalClient_GetDel_Call{Call: _e.mock.On("GetDel", ctx, key)}
}

func (_c *MockUniversalClient_GetDel_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_GetDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_GetDel_Call) Return(_a0 *StringCmd) *MockUniversalClient_GetDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GetDel_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_GetDel_Call {
	_c.Call.Return(run)
	return _c
}

// GetEx provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) GetEx(ctx context.Context, key string, expiration time.Duration) *StringCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for GetEx")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *StringCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_GetEx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEx'
type MockUniversalClient_GetEx_Call struct {
	*mock.Call
}

// GetEx is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) GetEx(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_GetEx_Call {
	return &MockUniversalClient_GetEx_Call{Call: _e.mock.On("GetEx", ctx, key, expiration)}
}

func (_c *MockUniversalClient_GetEx_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_GetEx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_GetEx_Call) Return(_a0 *StringCmd) *MockUniversalClient_GetEx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GetEx_Call) RunAndReturn(run func(context.Context, string, time.Duration) *StringCmd) *MockUniversalClient_GetEx_Call {
	_c.Call.Return(run)
	return _c
}

// GetRange provides a mock function with given fields: ctx, key, start, end
func (_m *MockUniversalClient) GetRange(ctx context.Context, key string, start int64, end int64) *StringCmd {
	ret := _m.Called(ctx, key, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetRange")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StringCmd); ok {
		r0 = rf(ctx, key, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_GetRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRange'
type MockUniversalClient_GetRange_Call struct {
	*mock.Call
}

// GetRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - end int64
func (_e *MockUniversalClient_Expecter) GetRange(ctx interface{}, key interface{}, start interface{}, end interface{}) *MockUniversalClient_GetRange_Call {
	return &MockUniversalClient_GetRange_Call{Call: _e.mock.On("GetRange", ctx, key, start, end)}
}

func (_c *MockUniversalClient_GetRange_Call) Run(run func(ctx context.Context, key string, start int64, end int64)) *MockUniversalClient_GetRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_GetRange_Call) Return(_a0 *StringCmd) *MockUniversalClient_GetRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GetRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StringCmd) *MockUniversalClient_GetRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetSet provides a mock function with given fields: ctx, key, value
func (_m *MockUniversalClient) GetSet(ctx context.Context, key string, value interface{}) *StringCmd {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for GetSet")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *StringCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_GetSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSet'
type MockUniversalClient_GetSet_Call struct {
	*mock.Call
}

// GetSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
func (_e *MockUniversalClient_Expecter) GetSet(ctx interface{}, key interface{}, value interface{}) *MockUniversalClient_GetSet_Call {
	return &MockUniversalClient_GetSet_Call{Call: _e.mock.On("GetSet", ctx, key, value)}
}

func (_c *MockUniversalClient_GetSet_Call) Run(run func(ctx context.Context, key string, value interface{})) *MockUniversalClient_GetSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_GetSet_Call) Return(_a0 *StringCmd) *MockUniversalClient_GetSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_GetSet_Call) RunAndReturn(run func(context.Context, string, interface{}) *StringCmd) *MockUniversalClient_GetSet_Call {
	_c.Call.Return(run)
	return _c
}

// HDel provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HDel(ctx context.Context, key string, fields ...string) *IntCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_HDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HDel'
type MockUniversalClient_HDel_Call struct {
	*mock.Call
}

// HDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HDel(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HDel_Call {
	return &MockUniversalClient_HDel_Call{Call: _e.mock.On("HDel",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HDel_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HDel_Call) Return(_a0 *IntCmd) *MockUniversalClient_HDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HDel_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_HDel_Call {
	_c.Call.Return(run)
	return _c
}

// HExists provides a mock function with given fields: ctx, key, field
func (_m *MockUniversalClient) HExists(ctx context.Context, key string, field string) *BoolCmd {
	ret := _m.Called(ctx, key, field)

	if len(ret) == 0 {
		panic("no return value specified for HExists")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *BoolCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_HExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExists'
type MockUniversalClient_HExists_Call struct {
	*mock.Call
}

// HExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
func (_e *MockUniversalClient_Expecter) HExists(ctx interface{}, key interface{}, field interface{}) *MockUniversalClient_HExists_Call {
	return &MockUniversalClient_HExists_Call{Call: _e.mock.On("HExists", ctx, key, field)}
}

func (_c *MockUniversalClient_HExists_Call) Run(run func(ctx context.Context, key string, field string)) *MockUniversalClient_HExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HExists_Call) Return(_a0 *BoolCmd) *MockUniversalClient_HExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HExists_Call) RunAndReturn(run func(context.Context, string, string) *BoolCmd) *MockUniversalClient_HExists_Call {
	_c.Call.Return(run)
	return _c
}

// HExpire provides a mock function with given fields: ctx, key, expiration, fields
func (_m *MockUniversalClient) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, expiration)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HExpire")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, expiration, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HExpire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExpire'
type MockUniversalClient_HExpire_Call struct {
	*mock.Call
}

// HExpire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HExpire(ctx interface{}, key interface{}, expiration interface{}, fields ...interface{}) *MockUniversalClient_HExpire_Call {
	return &MockUniversalClient_HExpire_Call{Call: _e.mock.On("HExpire",
		append([]interface{}{ctx, key, expiration}, fields...)...)}
}

func (_c *MockUniversalClient_HExpire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration, fields ...string)) *MockUniversalClient_HExpire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HExpire_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HExpire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HExpire_Call) RunAndReturn(run func(context.Context, string, time.Duration, ...string) *IntSliceCmd) *MockUniversalClient_HExpire_Call {
	_c.Call.Return(run)
	return _c
}

// HExpireAt provides a mock function with given fields: ctx, key, tm, fields
func (_m *MockUniversalClient) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, tm)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HExpireAt")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, tm, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExpireAt'
type MockUniversalClient_HExpireAt_Call struct {
	*mock.Call
}

// HExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HExpireAt(ctx interface{}, key interface{}, tm interface{}, fields ...interface{}) *MockUniversalClient_HExpireAt_Call {
	return &MockUniversalClient_HExpireAt_Call{Call: _e.mock.On("HExpireAt",
		append([]interface{}{ctx, key, tm}, fields...)...)}
}

func (_c *MockUniversalClient_HExpireAt_Call) Run(run func(ctx context.Context, key string, tm time.Time, fields ...string)) *MockUniversalClient_HExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HExpireAt_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HExpireAt_Call) RunAndReturn(run func(context.Context, string, time.Time, ...string) *IntSliceCmd) *MockUniversalClient_HExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// HExpireAtWithArgs provides a mock function with given fields: ctx, key, tm, expirationArgs, fields
func (_m *MockUniversalClient) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, tm, expirationArgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HExpireAtWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, HExpireArgs, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, tm, expirationArgs, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HExpireAtWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExpireAtWithArgs'
type MockUniversalClient_HExpireAtWithArgs_Call struct {
	*mock.Call
}

// HExpireAtWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
//   - expirationArgs HExpireArgs
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HExpireAtWithArgs(ctx interface{}, key interface{}, tm interface{}, expirationArgs interface{}, fields ...interface{}) *MockUniversalClient_HExpireAtWithArgs_Call {
	return &MockUniversalClient_HExpireAtWithArgs_Call{Call: _e.mock.On("HExpireAtWithArgs",
		append([]interface{}{ctx, key, tm, expirationArgs}, fields...)...)}
}

func (_c *MockUniversalClient_HExpireAtWithArgs_Call) Run(run func(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string)) *MockUniversalClient_HExpireAtWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(HExpireArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HExpireAtWithArgs_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HExpireAtWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HExpireAtWithArgs_Call) RunAndReturn(run func(context.Context, string, time.Time, HExpireArgs, ...string) *IntSliceCmd) *MockUniversalClient_HExpireAtWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// HExpireTime provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HExpireTime(ctx context.Context, key string, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HExpireTime")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HExpireTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExpireTime'
type MockUniversalClient_HExpireTime_Call struct {
	*mock.Call
}

// HExpireTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HExpireTime(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HExpireTime_Call {
	return &MockUniversalClient_HExpireTime_Call{Call: _e.mock.On("HExpireTime",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HExpireTime_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HExpireTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HExpireTime_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HExpireTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HExpireTime_Call) RunAndReturn(run func(context.Context, string, ...string) *IntSliceCmd) *MockUniversalClient_HExpireTime_Call {
	_c.Call.Return(run)
	return _c
}

// HExpireWithArgs provides a mock function with given fields: ctx, key, expiration, expirationArgs, fields
func (_m *MockUniversalClient) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, expiration, expirationArgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HExpireWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, HExpireArgs, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, expiration, expirationArgs, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HExpireWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExpireWithArgs'
type MockUniversalClient_HExpireWithArgs_Call struct {
	*mock.Call
}

// HExpireWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
//   - expirationArgs HExpireArgs
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HExpireWithArgs(ctx interface{}, key interface{}, expiration interface{}, expirationArgs interface{}, fields ...interface{}) *MockUniversalClient_HExpireWithArgs_Call {
	return &MockUniversalClient_HExpireWithArgs_Call{Call: _e.mock.On("HExpireWithArgs",
		append([]interface{}{ctx, key, expiration, expirationArgs}, fields...)...)}
}

func (_c *MockUniversalClient_HExpireWithArgs_Call) Run(run func(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string)) *MockUniversalClient_HExpireWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(HExpireArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HExpireWithArgs_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HExpireWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HExpireWithArgs_Call) RunAndReturn(run func(context.Context, string, time.Duration, HExpireArgs, ...string) *IntSliceCmd) *MockUniversalClient_HExpireWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// HGet provides a mock function with given fields: ctx, key, field
func (_m *MockUniversalClient) HGet(ctx context.Context, key string, field string) *StringCmd {
	ret := _m.Called(ctx, key, field)

	if len(ret) == 0 {
		panic("no return value specified for HGet")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StringCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_HGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGet'
type MockUniversalClient_HGet_Call struct {
	*mock.Call
}

// HGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
func (_e *MockUniversalClient_Expecter) HGet(ctx interface{}, key interface{}, field interface{}) *MockUniversalClient_HGet_Call {
	return &MockUniversalClient_HGet_Call{Call: _e.mock.On("HGet", ctx, key, field)}
}

func (_c *MockUniversalClient_HGet_Call) Run(run func(ctx context.Context, key string, field string)) *MockUniversalClient_HGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HGet_Call) Return(_a0 *StringCmd) *MockUniversalClient_HGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HGet_Call) RunAndReturn(run func(context.Context, string, string) *StringCmd) *MockUniversalClient_HGet_Call {
	_c.Call.Return(run)
	return _c
}

// HGetAll provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) HGetAll(ctx context.Context, key string) *MapStringStringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for HGetAll")
	}

	var r0 *MapStringStringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapStringStringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringStringCmd)
		}
	}

	return r0
}

// MockUniversalClient_HGetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGetAll'
type MockUniversalClient_HGetAll_Call struct {
	*mock.Call
}

// HGetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) HGetAll(ctx interface{}, key interface{}) *MockUniversalClient_HGetAll_Call {
	return &MockUniversalClient_HGetAll_Call{Call: _e.mock.On("HGetAll", ctx, key)}
}

func (_c *MockUniversalClient_HGetAll_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_HGetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HGetAll_Call) Return(_a0 *MapStringStringCmd) *MockUniversalClient_HGetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HGetAll_Call) RunAndReturn(run func(context.Context, string) *MapStringStringCmd) *MockUniversalClient_HGetAll_Call {
	_c.Call.Return(run)
	return _c
}

// HIncrBy provides a mock function with given fields: ctx, key, field, incr
func (_m *MockUniversalClient) HIncrBy(ctx context.Context, key string, field string, incr int64) *IntCmd {
	ret := _m.Called(ctx, key, field, incr)

	if len(ret) == 0 {
		panic("no return value specified for HIncrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, field, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_HIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HIncrBy'
type MockUniversalClient_HIncrBy_Call struct {
	*mock.Call
}

// HIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - incr int64
func (_e *MockUniversalClient_Expecter) HIncrBy(ctx interface{}, key interface{}, field interface{}, incr interface{}) *MockUniversalClient_HIncrBy_Call {
	return &MockUniversalClient_HIncrBy_Call{Call: _e.mock.On("HIncrBy", ctx, key, field, incr)}
}

func (_c *MockUniversalClient_HIncrBy_Call) Run(run func(ctx context.Context, key string, field string, incr int64)) *MockUniversalClient_HIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_HIncrBy_Call) Return(_a0 *IntCmd) *MockUniversalClient_HIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HIncrBy_Call) RunAndReturn(run func(context.Context, string, string, int64) *IntCmd) *MockUniversalClient_HIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// HIncrByFloat provides a mock function with given fields: ctx, key, field, incr
func (_m *MockUniversalClient) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *FloatCmd {
	ret := _m.Called(ctx, key, field, incr)

	if len(ret) == 0 {
		panic("no return value specified for HIncrByFloat")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *FloatCmd); ok {
		r0 = rf(ctx, key, field, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_HIncrByFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HIncrByFloat'
type MockUniversalClient_HIncrByFloat_Call struct {
	*mock.Call
}

// HIncrByFloat is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - incr float64
func (_e *MockUniversalClient_Expecter) HIncrByFloat(ctx interface{}, key interface{}, field interface{}, incr interface{}) *MockUniversalClient_HIncrByFloat_Call {
	return &MockUniversalClient_HIncrByFloat_Call{Call: _e.mock.On("HIncrByFloat", ctx, key, field, incr)}
}

func (_c *MockUniversalClient_HIncrByFloat_Call) Run(run func(ctx context.Context, key string, field string, incr float64)) *MockUniversalClient_HIncrByFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_HIncrByFloat_Call) Return(_a0 *FloatCmd) *MockUniversalClient_HIncrByFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HIncrByFloat_Call) RunAndReturn(run func(context.Context, string, string, float64) *FloatCmd) *MockUniversalClient_HIncrByFloat_Call {
	_c.Call.Return(run)
	return _c
}

// HKeys provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) HKeys(ctx context.Context, key string) *StringSliceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for HKeys")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HKeys'
type MockUniversalClient_HKeys_Call struct {
	*mock.Call
}

// HKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) HKeys(ctx interface{}, key interface{}) *MockUniversalClient_HKeys_Call {
	return &MockUniversalClient_HKeys_Call{Call: _e.mock.On("HKeys", ctx, key)}
}

func (_c *MockUniversalClient_HKeys_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_HKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HKeys_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_HKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HKeys_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_HKeys_Call {
	_c.Call.Return(run)
	return _c
}

// HLen provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) HLen(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for HLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_HLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HLen'
type MockUniversalClient_HLen_Call struct {
	*mock.Call
}

// HLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) HLen(ctx interface{}, key interface{}) *MockUniversalClient_HLen_Call {
	return &MockUniversalClient_HLen_Call{Call: _e.mock.On("HLen", ctx, key)}
}

func (_c *MockUniversalClient_HLen_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_HLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HLen_Call) Return(_a0 *IntCmd) *MockUniversalClient_HLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HLen_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_HLen_Call {
	_c.Call.Return(run)
	return _c
}

// HMGet provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HMGet(ctx context.Context, key string, fields ...string) *SliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HMGet")
	}

	var r0 *SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *SliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HMGet'
type MockUniversalClient_HMGet_Call struct {
	*mock.Call
}

// HMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HMGet(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HMGet_Call {
	return &MockUniversalClient_HMGet_Call{Call: _e.mock.On("HMGet",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HMGet_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HMGet_Call) Return(_a0 *SliceCmd) *MockUniversalClient_HMGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HMGet_Call) RunAndReturn(run func(context.Context, string, ...string) *SliceCmd) *MockUniversalClient_HMGet_Call {
	_c.Call.Return(run)
	return _c
}

// HMSet provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) HMSet(ctx context.Context, key string, values ...interface{}) *BoolCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HMSet")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_HMSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HMSet'
type MockUniversalClient_HMSet_Call struct {
	*mock.Call
}

// HMSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) HMSet(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_HMSet_Call {
	return &MockUniversalClient_HMSet_Call{Call: _e.mock.On("HMSet",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_HMSet_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_HMSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HMSet_Call) Return(_a0 *BoolCmd) *MockUniversalClient_HMSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HMSet_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolCmd) *MockUniversalClient_HMSet_Call {
	_c.Call.Return(run)
	return _c
}

// HPExpire provides a mock function with given fields: ctx, key, expiration, fields
func (_m *MockUniversalClient) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, expiration)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPExpire")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, expiration, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPExpire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPExpire'
type MockUniversalClient_HPExpire_Call struct {
	*mock.Call
}

// HPExpire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPExpire(ctx interface{}, key interface{}, expiration interface{}, fields ...interface{}) *MockUniversalClient_HPExpire_Call {
	return &MockUniversalClient_HPExpire_Call{Call: _e.mock.On("HPExpire",
		append([]interface{}{ctx, key, expiration}, fields...)...)}
}

func (_c *MockUniversalClient_HPExpire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration, fields ...string)) *MockUniversalClient_HPExpire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPExpire_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPExpire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPExpire_Call) RunAndReturn(run func(context.Context, string, time.Duration, ...string) *IntSliceCmd) *MockUniversalClient_HPExpire_Call {
	_c.Call.Return(run)
	return _c
}

// HPExpireAt provides a mock function with given fields: ctx, key, tm, fields
func (_m *MockUniversalClient) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, tm)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPExpireAt")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, tm, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPExpireAt'
type MockUniversalClient_HPExpireAt_Call struct {
	*mock.Call
}

// HPExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPExpireAt(ctx interface{}, key interface{}, tm interface{}, fields ...interface{}) *MockUniversalClient_HPExpireAt_Call {
	return &MockUniversalClient_HPExpireAt_Call{Call: _e.mock.On("HPExpireAt",
		append([]interface{}{ctx, key, tm}, fields...)...)}
}

func (_c *MockUniversalClient_HPExpireAt_Call) Run(run func(ctx context.Context, key string, tm time.Time, fields ...string)) *MockUniversalClient_HPExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPExpireAt_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPExpireAt_Call) RunAndReturn(run func(context.Context, string, time.Time, ...string) *IntSliceCmd) *MockUniversalClient_HPExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// HPExpireAtWithArgs provides a mock function with given fields: ctx, key, tm, expirationArgs, fields
func (_m *MockUniversalClient) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, tm, expirationArgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPExpireAtWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, HExpireArgs, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, tm, expirationArgs, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPExpireAtWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPExpireAtWithArgs'
type MockUniversalClient_HPExpireAtWithArgs_Call struct {
	*mock.Call
}

// HPExpireAtWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
//   - expirationArgs HExpireArgs
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPExpireAtWithArgs(ctx interface{}, key interface{}, tm interface{}, expirationArgs interface{}, fields ...interface{}) *MockUniversalClient_HPExpireAtWithArgs_Call {
	return &MockUniversalClient_HPExpireAtWithArgs_Call{Call: _e.mock.On("HPExpireAtWithArgs",
		append([]interface{}{ctx, key, tm, expirationArgs}, fields...)...)}
}

func (_c *MockUniversalClient_HPExpireAtWithArgs_Call) Run(run func(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string)) *MockUniversalClient_HPExpireAtWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(HExpireArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPExpireAtWithArgs_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPExpireAtWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPExpireAtWithArgs_Call) RunAndReturn(run func(context.Context, string, time.Time, HExpireArgs, ...string) *IntSliceCmd) *MockUniversalClient_HPExpireAtWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// HPExpireTime provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HPExpireTime(ctx context.Context, key string, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPExpireTime")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPExpireTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPExpireTime'
type MockUniversalClient_HPExpireTime_Call struct {
	*mock.Call
}

// HPExpireTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPExpireTime(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HPExpireTime_Call {
	return &MockUniversalClient_HPExpireTime_Call{Call: _e.mock.On("HPExpireTime",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HPExpireTime_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HPExpireTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPExpireTime_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPExpireTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPExpireTime_Call) RunAndReturn(run func(context.Context, string, ...string) *IntSliceCmd) *MockUniversalClient_HPExpireTime_Call {
	_c.Call.Return(run)
	return _c
}

// HPExpireWithArgs provides a mock function with given fields: ctx, key, expiration, expirationArgs, fields
func (_m *MockUniversalClient) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, expiration, expirationArgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPExpireWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, HExpireArgs, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, expiration, expirationArgs, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPExpireWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPExpireWithArgs'
type MockUniversalClient_HPExpireWithArgs_Call struct {
	*mock.Call
}

// HPExpireWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
//   - expirationArgs HExpireArgs
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPExpireWithArgs(ctx interface{}, key interface{}, expiration interface{}, expirationArgs interface{}, fields ...interface{}) *MockUniversalClient_HPExpireWithArgs_Call {
	return &MockUniversalClient_HPExpireWithArgs_Call{Call: _e.mock.On("HPExpireWithArgs",
		append([]interface{}{ctx, key, expiration, expirationArgs}, fields...)...)}
}

func (_c *MockUniversalClient_HPExpireWithArgs_Call) Run(run func(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string)) *MockUniversalClient_HPExpireWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(HExpireArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPExpireWithArgs_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPExpireWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPExpireWithArgs_Call) RunAndReturn(run func(context.Context, string, time.Duration, HExpireArgs, ...string) *IntSliceCmd) *MockUniversalClient_HPExpireWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// HPTTL provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HPTTL(ctx context.Context, key string, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPTTL")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPTTL'
type MockUniversalClient_HPTTL_Call struct {
	*mock.Call
}

// HPTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPTTL(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HPTTL_Call {
	return &MockUniversalClient_HPTTL_Call{Call: _e.mock.On("HPTTL",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HPTTL_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HPTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPTTL_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPTTL_Call) RunAndReturn(run func(context.Context, string, ...string) *IntSliceCmd) *MockUniversalClient_HPTTL_Call {
	_c.Call.Return(run)
	return _c
}

// HPersist provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HPersist(ctx context.Context, key string, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HPersist")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HPersist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HPersist'
type MockUniversalClient_HPersist_Call struct {
	*mock.Call
}

// HPersist is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HPersist(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HPersist_Call {
	return &MockUniversalClient_HPersist_Call{Call: _e.mock.On("HPersist",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HPersist_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HPersist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HPersist_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HPersist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HPersist_Call) RunAndReturn(run func(context.Context, string, ...string) *IntSliceCmd) *MockUniversalClient_HPersist_Call {
	_c.Call.Return(run)
	return _c
}

// HRandField provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) HRandField(ctx context.Context, key string, count int) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for HRandField")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HRandField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HRandField'
type MockUniversalClient_HRandField_Call struct {
	*mock.Call
}

// HRandField is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) HRandField(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_HRandField_Call {
	return &MockUniversalClient_HRandField_Call{Call: _e.mock.On("HRandField", ctx, key, count)}
}

func (_c *MockUniversalClient_HRandField_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_HRandField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_HRandField_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_HRandField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HRandField_Call) RunAndReturn(run func(context.Context, string, int) *StringSliceCmd) *MockUniversalClient_HRandField_Call {
	_c.Call.Return(run)
	return _c
}

// HRandFieldWithValues provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) HRandFieldWithValues(ctx context.Context, key string, count int) *KeyValueSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for HRandFieldWithValues")
	}

	var r0 *KeyValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *KeyValueSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KeyValueSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HRandFieldWithValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HRandFieldWithValues'
type MockUniversalClient_HRandFieldWithValues_Call struct {
	*mock.Call
}

// HRandFieldWithValues is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) HRandFieldWithValues(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_HRandFieldWithValues_Call {
	return &MockUniversalClient_HRandFieldWithValues_Call{Call: _e.mock.On("HRandFieldWithValues", ctx, key, count)}
}

func (_c *MockUniversalClient_HRandFieldWithValues_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_HRandFieldWithValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_HRandFieldWithValues_Call) Return(_a0 *KeyValueSliceCmd) *MockUniversalClient_HRandFieldWithValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HRandFieldWithValues_Call) RunAndReturn(run func(context.Context, string, int) *KeyValueSliceCmd) *MockUniversalClient_HRandFieldWithValues_Call {
	_c.Call.Return(run)
	return _c
}

// HScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *MockUniversalClient) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for HScan")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockUniversalClient_HScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HScan'
type MockUniversalClient_HScan_Call struct {
	*mock.Call
}

// HScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *MockUniversalClient_Expecter) HScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *MockUniversalClient_HScan_Call {
	return &MockUniversalClient_HScan_Call{Call: _e.mock.On("HScan", ctx, key, cursor, match, count)}
}

func (_c *MockUniversalClient_HScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *MockUniversalClient_HScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_HScan_Call) Return(_a0 *ScanCmd) *MockUniversalClient_HScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *ScanCmd) *MockUniversalClient_HScan_Call {
	_c.Call.Return(run)
	return _c
}

// HScanNoValues provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *MockUniversalClient) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for HScanNoValues")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockUniversalClient_HScanNoValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HScanNoValues'
type MockUniversalClient_HScanNoValues_Call struct {
	*mock.Call
}

// HScanNoValues is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *MockUniversalClient_Expecter) HScanNoValues(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *MockUniversalClient_HScanNoValues_Call {
	return &MockUniversalClient_HScanNoValues_Call{Call: _e.mock.On("HScanNoValues", ctx, key, cursor, match, count)}
}

func (_c *MockUniversalClient_HScanNoValues_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *MockUniversalClient_HScanNoValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_HScanNoValues_Call) Return(_a0 *ScanCmd) *MockUniversalClient_HScanNoValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HScanNoValues_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *ScanCmd) *MockUniversalClient_HScanNoValues_Call {
	_c.Call.Return(run)
	return _c
}

// HSet provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) HSet(ctx context.Context, key string, values ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HSet")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_HSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSet'
type MockUniversalClient_HSet_Call struct {
	*mock.Call
}

// HSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) HSet(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_HSet_Call {
	return &MockUniversalClient_HSet_Call{Call: _e.mock.On("HSet",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_HSet_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_HSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HSet_Call) Return(_a0 *IntCmd) *MockUniversalClient_HSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HSet_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_HSet_Call {
	_c.Call.Return(run)
	return _c
}

// HSetNX provides a mock function with given fields: ctx, key, field, value
func (_m *MockUniversalClient) HSetNX(ctx context.Context, key string, field string, value interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, field, value)

	if len(ret) == 0 {
		panic("no return value specified for HSetNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_HSetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSetNX'
type MockUniversalClient_HSetNX_Call struct {
	*mock.Call
}

// HSetNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - value interface{}
func (_e *MockUniversalClient_Expecter) HSetNX(ctx interface{}, key interface{}, field interface{}, value interface{}) *MockUniversalClient_HSetNX_Call {
	return &MockUniversalClient_HSetNX_Call{Call: _e.mock.On("HSetNX", ctx, key, field, value)}
}

func (_c *MockUniversalClient_HSetNX_Call) Run(run func(ctx context.Context, key string, field string, value interface{})) *MockUniversalClient_HSetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_HSetNX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_HSetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HSetNX_Call) RunAndReturn(run func(context.Context, string, string, interface{}) *BoolCmd) *MockUniversalClient_HSetNX_Call {
	_c.Call.Return(run)
	return _c
}

// HStrLen provides a mock function with given fields: ctx, key, field
func (_m *MockUniversalClient) HStrLen(ctx context.Context, key string, field string) *IntCmd {
	ret := _m.Called(ctx, key, field)

	if len(ret) == 0 {
		panic("no return value specified for HStrLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_HStrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HStrLen'
type MockUniversalClient_HStrLen_Call struct {
	*mock.Call
}

// HStrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
func (_e *MockUniversalClient_Expecter) HStrLen(ctx interface{}, key interface{}, field interface{}) *MockUniversalClient_HStrLen_Call {
	return &MockUniversalClient_HStrLen_Call{Call: _e.mock.On("HStrLen", ctx, key, field)}
}

func (_c *MockUniversalClient_HStrLen_Call) Run(run func(ctx context.Context, key string, field string)) *MockUniversalClient_HStrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HStrLen_Call) Return(_a0 *IntCmd) *MockUniversalClient_HStrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HStrLen_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_HStrLen_Call {
	_c.Call.Return(run)
	return _c
}

// HTTL provides a mock function with given fields: ctx, key, fields
func (_m *MockUniversalClient) HTTL(ctx context.Context, key string, fields ...string) *IntSliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HTTL")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTL'
type MockUniversalClient_HTTL_Call struct {
	*mock.Call
}

// HTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockUniversalClient_Expecter) HTTL(ctx interface{}, key interface{}, fields ...interface{}) *MockUniversalClient_HTTL_Call {
	return &MockUniversalClient_HTTL_Call{Call: _e.mock.On("HTTL",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockUniversalClient_HTTL_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockUniversalClient_HTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_HTTL_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_HTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HTTL_Call) RunAndReturn(run func(context.Context, string, ...string) *IntSliceCmd) *MockUniversalClient_HTTL_Call {
	_c.Call.Return(run)
	return _c
}

// HVals provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) HVals(ctx context.Context, key string) *StringSliceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for HVals")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_HVals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HVals'
type MockUniversalClient_HVals_Call struct {
	*mock.Call
}

// HVals is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) HVals(ctx interface{}, key interface{}) *MockUniversalClient_HVals_Call {
	return &MockUniversalClient_HVals_Call{Call: _e.mock.On("HVals", ctx, key)}
}

func (_c *MockUniversalClient_HVals_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_HVals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_HVals_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_HVals_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_HVals_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_HVals_Call {
	_c.Call.Return(run)
	return _c
}

// Incr provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) Incr(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Incr")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Incr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incr'
type MockUniversalClient_Incr_Call struct {
	*mock.Call
}

// Incr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) Incr(ctx interface{}, key interface{}) *MockUniversalClient_Incr_Call {
	return &MockUniversalClient_Incr_Call{Call: _e.mock.On("Incr", ctx, key)}
}

func (_c *MockUniversalClient_Incr_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_Incr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Incr_Call) Return(_a0 *IntCmd) *MockUniversalClient_Incr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Incr_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_Incr_Call {
	_c.Call.Return(run)
	return _c
}

// IncrBy provides a mock function with given fields: ctx, key, value
func (_m *MockUniversalClient) IncrBy(ctx context.Context, key string, value int64) *IntCmd {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_IncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrBy'
type MockUniversalClient_IncrBy_Call struct {
	*mock.Call
}

// IncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value int64
func (_e *MockUniversalClient_Expecter) IncrBy(ctx interface{}, key interface{}, value interface{}) *MockUniversalClient_IncrBy_Call {
	return &MockUniversalClient_IncrBy_Call{Call: _e.mock.On("IncrBy", ctx, key, value)}
}

func (_c *MockUniversalClient_IncrBy_Call) Run(run func(ctx context.Context, key string, value int64)) *MockUniversalClient_IncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_IncrBy_Call) Return(_a0 *IntCmd) *MockUniversalClient_IncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_IncrBy_Call) RunAndReturn(run func(context.Context, string, int64) *IntCmd) *MockUniversalClient_IncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// IncrByFloat provides a mock function with given fields: ctx, key, value
func (_m *MockUniversalClient) IncrByFloat(ctx context.Context, key string, value float64) *FloatCmd {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrByFloat")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *FloatCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_IncrByFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrByFloat'
type MockUniversalClient_IncrByFloat_Call struct {
	*mock.Call
}

// IncrByFloat is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value float64
func (_e *MockUniversalClient_Expecter) IncrByFloat(ctx interface{}, key interface{}, value interface{}) *MockUniversalClient_IncrByFloat_Call {
	return &MockUniversalClient_IncrByFloat_Call{Call: _e.mock.On("IncrByFloat", ctx, key, value)}
}

func (_c *MockUniversalClient_IncrByFloat_Call) Run(run func(ctx context.Context, key string, value float64)) *MockUniversalClient_IncrByFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_IncrByFloat_Call) Return(_a0 *FloatCmd) *MockUniversalClient_IncrByFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_IncrByFloat_Call) RunAndReturn(run func(context.Context, string, float64) *FloatCmd) *MockUniversalClient_IncrByFloat_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx, section
func (_m *MockUniversalClient) Info(ctx context.Context, section ...string) *StringCmd {
	_va := make([]interface{}, len(section))
	for _i := range section {
		_va[_i] = section[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *StringCmd); ok {
		r0 = rf(ctx, section...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockUniversalClient_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - section ...string
func (_e *MockUniversalClient_Expecter) Info(ctx interface{}, section ...interface{}) *MockUniversalClient_Info_Call {
	return &MockUniversalClient_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx}, section...)...)}
}

func (_c *MockUniversalClient_Info_Call) Run(run func(ctx context.Context, section ...string)) *MockUniversalClient_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Info_Call) Return(_a0 *StringCmd) *MockUniversalClient_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Info_Call) RunAndReturn(run func(context.Context, ...string) *StringCmd) *MockUniversalClient_Info_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrAppend provides a mock function with given fields: ctx, key, path, values
func (_m *MockUniversalClient) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrAppend")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrAppend'
type MockUniversalClient_JSONArrAppend_Call struct {
	*mock.Call
}

// JSONArrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) JSONArrAppend(ctx interface{}, key interface{}, path interface{}, values ...interface{}) *MockUniversalClient_JSONArrAppend_Call {
	return &MockUniversalClient_JSONArrAppend_Call{Call: _e.mock.On("JSONArrAppend",
		append([]interface{}{ctx, key, path}, values...)...)}
}

func (_c *MockUniversalClient_JSONArrAppend_Call) Run(run func(ctx context.Context, key string, path string, values ...interface{})) *MockUniversalClient_JSONArrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrAppend_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrAppend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrAppend_Call) RunAndReturn(run func(context.Context, string, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_JSONArrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrIndex provides a mock function with given fields: ctx, key, path, value
func (_m *MockUniversalClient) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrIndex")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrIndex'
type MockUniversalClient_JSONArrIndex_Call struct {
	*mock.Call
}

// JSONArrIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value ...interface{}
func (_e *MockUniversalClient_Expecter) JSONArrIndex(ctx interface{}, key interface{}, path interface{}, value ...interface{}) *MockUniversalClient_JSONArrIndex_Call {
	return &MockUniversalClient_JSONArrIndex_Call{Call: _e.mock.On("JSONArrIndex",
		append([]interface{}{ctx, key, path}, value...)...)}
}

func (_c *MockUniversalClient_JSONArrIndex_Call) Run(run func(ctx context.Context, key string, path string, value ...interface{})) *MockUniversalClient_JSONArrIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrIndex_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrIndex_Call) RunAndReturn(run func(context.Context, string, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_JSONArrIndex_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrIndexWithArgs provides a mock function with given fields: ctx, key, path, options, value
func (_m *MockUniversalClient) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *JSONArrIndexArgs, value ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path, options)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrIndexWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *JSONArrIndexArgs, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, options, value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrIndexWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrIndexWithArgs'
type MockUniversalClient_JSONArrIndexWithArgs_Call struct {
	*mock.Call
}

// JSONArrIndexWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - options *JSONArrIndexArgs
//   - value ...interface{}
func (_e *MockUniversalClient_Expecter) JSONArrIndexWithArgs(ctx interface{}, key interface{}, path interface{}, options interface{}, value ...interface{}) *MockUniversalClient_JSONArrIndexWithArgs_Call {
	return &MockUniversalClient_JSONArrIndexWithArgs_Call{Call: _e.mock.On("JSONArrIndexWithArgs",
		append([]interface{}{ctx, key, path, options}, value...)...)}
}

func (_c *MockUniversalClient_JSONArrIndexWithArgs_Call) Run(run func(ctx context.Context, key string, path string, options *JSONArrIndexArgs, value ...interface{})) *MockUniversalClient_JSONArrIndexWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*JSONArrIndexArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrIndexWithArgs_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrIndexWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrIndexWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *JSONArrIndexArgs, ...interface{}) *IntSliceCmd) *MockUniversalClient_JSONArrIndexWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrInsert provides a mock function with given fields: ctx, key, path, index, values
func (_m *MockUniversalClient) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path, index)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrInsert")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, index, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrInsert'
type MockUniversalClient_JSONArrInsert_Call struct {
	*mock.Call
}

// JSONArrInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int64
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) JSONArrInsert(ctx interface{}, key interface{}, path interface{}, index interface{}, values ...interface{}) *MockUniversalClient_JSONArrInsert_Call {
	return &MockUniversalClient_JSONArrInsert_Call{Call: _e.mock.On("JSONArrInsert",
		append([]interface{}{ctx, key, path, index}, values...)...)}
}

func (_c *MockUniversalClient_JSONArrInsert_Call) Run(run func(ctx context.Context, key string, path string, index int64, values ...interface{})) *MockUniversalClient_JSONArrInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrInsert_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrInsert_Call) RunAndReturn(run func(context.Context, string, string, int64, ...interface{}) *IntSliceCmd) *MockUniversalClient_JSONArrInsert_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrLen provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONArrLen(ctx context.Context, key string, path string) *IntSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrLen")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrLen'
type MockUniversalClient_JSONArrLen_Call struct {
	*mock.Call
}

// JSONArrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONArrLen(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONArrLen_Call {
	return &MockUniversalClient_JSONArrLen_Call{Call: _e.mock.On("JSONArrLen", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONArrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONArrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrLen_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrLen_Call) RunAndReturn(run func(context.Context, string, string) *IntSliceCmd) *MockUniversalClient_JSONArrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrPop provides a mock function with given fields: ctx, key, path, index
func (_m *MockUniversalClient) JSONArrPop(ctx context.Context, key string, path string, index int) *StringSliceCmd {
	ret := _m.Called(ctx, key, path, index)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrPop")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, path, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrPop'
type MockUniversalClient_JSONArrPop_Call struct {
	*mock.Call
}

// JSONArrPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int
func (_e *MockUniversalClient_Expecter) JSONArrPop(ctx interface{}, key interface{}, path interface{}, index interface{}) *MockUniversalClient_JSONArrPop_Call {
	return &MockUniversalClient_JSONArrPop_Call{Call: _e.mock.On("JSONArrPop", ctx, key, path, index)}
}

func (_c *MockUniversalClient_JSONArrPop_Call) Run(run func(ctx context.Context, key string, path string, index int)) *MockUniversalClient_JSONArrPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrPop_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_JSONArrPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrPop_Call) RunAndReturn(run func(context.Context, string, string, int) *StringSliceCmd) *MockUniversalClient_JSONArrPop_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrTrim provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONArrTrim(ctx context.Context, key string, path string) *IntSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrTrim")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrTrim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrTrim'
type MockUniversalClient_JSONArrTrim_Call struct {
	*mock.Call
}

// JSONArrTrim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONArrTrim(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONArrTrim_Call {
	return &MockUniversalClient_JSONArrTrim_Call{Call: _e.mock.On("JSONArrTrim", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONArrTrim_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONArrTrim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrTrim_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrTrim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrTrim_Call) RunAndReturn(run func(context.Context, string, string) *IntSliceCmd) *MockUniversalClient_JSONArrTrim_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrTrimWithArgs provides a mock function with given fields: ctx, key, path, options
func (_m *MockUniversalClient) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *JSONArrTrimArgs) *IntSliceCmd {
	ret := _m.Called(ctx, key, path, options)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrTrimWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *JSONArrTrimArgs) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONArrTrimWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrTrimWithArgs'
type MockUniversalClient_JSONArrTrimWithArgs_Call struct {
	*mock.Call
}

// JSONArrTrimWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - options *JSONArrTrimArgs
func (_e *MockUniversalClient_Expecter) JSONArrTrimWithArgs(ctx interface{}, key interface{}, path interface{}, options interface{}) *MockUniversalClient_JSONArrTrimWithArgs_Call {
	return &MockUniversalClient_JSONArrTrimWithArgs_Call{Call: _e.mock.On("JSONArrTrimWithArgs", ctx, key, path, options)}
}

func (_c *MockUniversalClient_JSONArrTrimWithArgs_Call) Run(run func(ctx context.Context, key string, path string, options *JSONArrTrimArgs)) *MockUniversalClient_JSONArrTrimWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*JSONArrTrimArgs))
	})
	return _c
}

func (_c *MockUniversalClient_JSONArrTrimWithArgs_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_JSONArrTrimWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONArrTrimWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *JSONArrTrimArgs) *IntSliceCmd) *MockUniversalClient_JSONArrTrimWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONClear provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONClear(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONClear")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONClear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONClear'
type MockUniversalClient_JSONClear_Call struct {
	*mock.Call
}

// JSONClear is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONClear(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONClear_Call {
	return &MockUniversalClient_JSONClear_Call{Call: _e.mock.On("JSONClear", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONClear_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONClear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONClear_Call) Return(_a0 *IntCmd) *MockUniversalClient_JSONClear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONClear_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_JSONClear_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDebugMemory provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONDebugMemory(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDebugMemory")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONDebugMemory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDebugMemory'
type MockUniversalClient_JSONDebugMemory_Call struct {
	*mock.Call
}

// JSONDebugMemory is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONDebugMemory(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONDebugMemory_Call {
	return &MockUniversalClient_JSONDebugMemory_Call{Call: _e.mock.On("JSONDebugMemory", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONDebugMemory_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONDebugMemory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONDebugMemory_Call) Return(_a0 *IntCmd) *MockUniversalClient_JSONDebugMemory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONDebugMemory_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_JSONDebugMemory_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDel provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONDel(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDel'
type MockUniversalClient_JSONDel_Call struct {
	*mock.Call
}

// JSONDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONDel(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONDel_Call {
	return &MockUniversalClient_JSONDel_Call{Call: _e.mock.On("JSONDel", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONDel_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONDel_Call) Return(_a0 *IntCmd) *MockUniversalClient_JSONDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONDel_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_JSONDel_Call {
	_c.Call.Return(run)
	return _c
}

// JSONForget provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONForget(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONForget")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONForget'
type MockUniversalClient_JSONForget_Call struct {
	*mock.Call
}

// JSONForget is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONForget(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONForget_Call {
	return &MockUniversalClient_JSONForget_Call{Call: _e.mock.On("JSONForget", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONForget_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONForget_Call) Return(_a0 *IntCmd) *MockUniversalClient_JSONForget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONForget_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_JSONForget_Call {
	_c.Call.Return(run)
	return _c
}

// JSONGet provides a mock function with given fields: ctx, key, paths
func (_m *MockUniversalClient) JSONGet(ctx context.Context, key string, paths ...string) *JSONCmd {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONGet")
	}

	var r0 *JSONCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *JSONCmd); ok {
		r0 = rf(ctx, key, paths...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONGet'
type MockUniversalClient_JSONGet_Call struct {
	*mock.Call
}

// JSONGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - paths ...string
func (_e *MockUniversalClient_Expecter) JSONGet(ctx interface{}, key interface{}, paths ...interface{}) *MockUniversalClient_JSONGet_Call {
	return &MockUniversalClient_JSONGet_Call{Call: _e.mock.On("JSONGet",
		append([]interface{}{ctx, key}, paths...)...)}
}

func (_c *MockUniversalClient_JSONGet_Call) Run(run func(ctx context.Context, key string, paths ...string)) *MockUniversalClient_JSONGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONGet_Call) Return(_a0 *JSONCmd) *MockUniversalClient_JSONGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONGet_Call) RunAndReturn(run func(context.Context, string, ...string) *JSONCmd) *MockUniversalClient_JSONGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONGetWithArgs provides a mock function with given fields: ctx, key, options, paths
func (_m *MockUniversalClient) JSONGetWithArgs(ctx context.Context, key string, options *JSONGetArgs, paths ...string) *JSONCmd {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONGetWithArgs")
	}

	var r0 *JSONCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *JSONGetArgs, ...string) *JSONCmd); ok {
		r0 = rf(ctx, key, options, paths...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONGetWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONGetWithArgs'
type MockUniversalClient_JSONGetWithArgs_Call struct {
	*mock.Call
}

// JSONGetWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *JSONGetArgs
//   - paths ...string
func (_e *MockUniversalClient_Expecter) JSONGetWithArgs(ctx interface{}, key interface{}, options interface{}, paths ...interface{}) *MockUniversalClient_JSONGetWithArgs_Call {
	return &MockUniversalClient_JSONGetWithArgs_Call{Call: _e.mock.On("JSONGetWithArgs",
		append([]interface{}{ctx, key, options}, paths...)...)}
}

func (_c *MockUniversalClient_JSONGetWithArgs_Call) Run(run func(ctx context.Context, key string, options *JSONGetArgs, paths ...string)) *MockUniversalClient_JSONGetWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*JSONGetArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONGetWithArgs_Call) Return(_a0 *JSONCmd) *MockUniversalClient_JSONGetWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONGetWithArgs_Call) RunAndReturn(run func(context.Context, string, *JSONGetArgs, ...string) *JSONCmd) *MockUniversalClient_JSONGetWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMGet provides a mock function with given fields: ctx, path, keys
func (_m *MockUniversalClient) JSONMGet(ctx context.Context, path string, keys ...string) *JSONSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONMGet")
	}

	var r0 *JSONSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *JSONSliceCmd); ok {
		r0 = rf(ctx, path, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMGet'
type MockUniversalClient_JSONMGet_Call struct {
	*mock.Call
}

// JSONMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) JSONMGet(ctx interface{}, path interface{}, keys ...interface{}) *MockUniversalClient_JSONMGet_Call {
	return &MockUniversalClient_JSONMGet_Call{Call: _e.mock.On("JSONMGet",
		append([]interface{}{ctx, path}, keys...)...)}
}

func (_c *MockUniversalClient_JSONMGet_Call) Run(run func(ctx context.Context, path string, keys ...string)) *MockUniversalClient_JSONMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONMGet_Call) Return(_a0 *JSONSliceCmd) *MockUniversalClient_JSONMGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONMGet_Call) RunAndReturn(run func(context.Context, string, ...string) *JSONSliceCmd) *MockUniversalClient_JSONMGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMSet provides a mock function with given fields: ctx, params
func (_m *MockUniversalClient) JSONMSet(ctx context.Context, params ...interface{}) *StatusCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONMSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *StatusCmd); ok {
		r0 = rf(ctx, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONMSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMSet'
type MockUniversalClient_JSONMSet_Call struct {
	*mock.Call
}

// JSONMSet is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...interface{}
func (_e *MockUniversalClient_Expecter) JSONMSet(ctx interface{}, params ...interface{}) *MockUniversalClient_JSONMSet_Call {
	return &MockUniversalClient_JSONMSet_Call{Call: _e.mock.On("JSONMSet",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *MockUniversalClient_JSONMSet_Call) Run(run func(ctx context.Context, params ...interface{})) *MockUniversalClient_JSONMSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_JSONMSet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_JSONMSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONMSet_Call) RunAndReturn(run func(context.Context, ...interface{}) *StatusCmd) *MockUniversalClient_JSONMSet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMSetArgs provides a mock function with given fields: ctx, docs
func (_m *MockUniversalClient) JSONMSetArgs(ctx context.Context, docs []JSONSetArgs) *StatusCmd {
	ret := _m.Called(ctx, docs)

	if len(ret) == 0 {
		panic("no return value specified for JSONMSetArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, []JSONSetArgs) *StatusCmd); ok {
		r0 = rf(ctx, docs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONMSetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMSetArgs'
type MockUniversalClient_JSONMSetArgs_Call struct {
	*mock.Call
}

// JSONMSetArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - docs []JSONSetArgs
func (_e *MockUniversalClient_Expecter) JSONMSetArgs(ctx interface{}, docs interface{}) *MockUniversalClient_JSONMSetArgs_Call {
	return &MockUniversalClient_JSONMSetArgs_Call{Call: _e.mock.On("JSONMSetArgs", ctx, docs)}
}

func (_c *MockUniversalClient_JSONMSetArgs_Call) Run(run func(ctx context.Context, docs []JSONSetArgs)) *MockUniversalClient_JSONMSetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]JSONSetArgs))
	})
	return _c
}

func (_c *MockUniversalClient_JSONMSetArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_JSONMSetArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONMSetArgs_Call) RunAndReturn(run func(context.Context, []JSONSetArgs) *StatusCmd) *MockUniversalClient_JSONMSetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMerge provides a mock function with given fields: ctx, key, path, value
func (_m *MockUniversalClient) JSONMerge(ctx context.Context, key string, path string, value string) *StatusCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMerge'
type MockUniversalClient_JSONMerge_Call struct {
	*mock.Call
}

// JSONMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value string
func (_e *MockUniversalClient_Expecter) JSONMerge(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockUniversalClient_JSONMerge_Call {
	return &MockUniversalClient_JSONMerge_Call{Call: _e.mock.On("JSONMerge", ctx, key, path, value)}
}

func (_c *MockUniversalClient_JSONMerge_Call) Run(run func(ctx context.Context, key string, path string, value string)) *MockUniversalClient_JSONMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONMerge_Call) Return(_a0 *StatusCmd) *MockUniversalClient_JSONMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONMerge_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockUniversalClient_JSONMerge_Call {
	_c.Call.Return(run)
	return _c
}

// JSONNumIncrBy provides a mock function with given fields: ctx, key, path, value
func (_m *MockUniversalClient) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *JSONCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONNumIncrBy")
	}

	var r0 *JSONCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *JSONCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONNumIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONNumIncrBy'
type MockUniversalClient_JSONNumIncrBy_Call struct {
	*mock.Call
}

// JSONNumIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value float64
func (_e *MockUniversalClient_Expecter) JSONNumIncrBy(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockUniversalClient_JSONNumIncrBy_Call {
	return &MockUniversalClient_JSONNumIncrBy_Call{Call: _e.mock.On("JSONNumIncrBy", ctx, key, path, value)}
}

func (_c *MockUniversalClient_JSONNumIncrBy_Call) Run(run func(ctx context.Context, key string, path string, value float64)) *MockUniversalClient_JSONNumIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_JSONNumIncrBy_Call) Return(_a0 *JSONCmd) *MockUniversalClient_JSONNumIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONNumIncrBy_Call) RunAndReturn(run func(context.Context, string, string, float64) *JSONCmd) *MockUniversalClient_JSONNumIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjKeys provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONObjKeys(ctx context.Context, key string, path string) *SliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjKeys")
	}

	var r0 *SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *SliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONObjKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjKeys'
type MockUniversalClient_JSONObjKeys_Call struct {
	*mock.Call
}

// JSONObjKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONObjKeys(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONObjKeys_Call {
	return &MockUniversalClient_JSONObjKeys_Call{Call: _e.mock.On("JSONObjKeys", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONObjKeys_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONObjKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONObjKeys_Call) Return(_a0 *SliceCmd) *MockUniversalClient_JSONObjKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONObjKeys_Call) RunAndReturn(run func(context.Context, string, string) *SliceCmd) *MockUniversalClient_JSONObjKeys_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjLen provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONObjLen(ctx context.Context, key string, path string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjLen")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONObjLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjLen'
type MockUniversalClient_JSONObjLen_Call struct {
	*mock.Call
}

// JSONObjLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONObjLen(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONObjLen_Call {
	return &MockUniversalClient_JSONObjLen_Call{Call: _e.mock.On("JSONObjLen", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONObjLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONObjLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONObjLen_Call) Return(_a0 *IntPointerSliceCmd) *MockUniversalClient_JSONObjLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONObjLen_Call) RunAndReturn(run func(context.Context, string, string) *IntPointerSliceCmd) *MockUniversalClient_JSONObjLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONSet provides a mock function with given fields: ctx, key, path, value
func (_m *MockUniversalClient) JSONSet(ctx context.Context, key string, path string, value interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONSet'
type MockUniversalClient_JSONSet_Call struct {
	*mock.Call
}

// JSONSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value interface{}
func (_e *MockUniversalClient_Expecter) JSONSet(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockUniversalClient_JSONSet_Call {
	return &MockUniversalClient_JSONSet_Call{Call: _e.mock.On("JSONSet", ctx, key, path, value)}
}

func (_c *MockUniversalClient_JSONSet_Call) Run(run func(ctx context.Context, key string, path string, value interface{})) *MockUniversalClient_JSONSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_JSONSet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_JSONSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONSet_Call) RunAndReturn(run func(context.Context, string, string, interface{}) *StatusCmd) *MockUniversalClient_JSONSet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONSetMode provides a mock function with given fields: ctx, key, path, value, mode
func (_m *MockUniversalClient) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *StatusCmd {
	ret := _m.Called(ctx, key, path, value, mode)

	if len(ret) == 0 {
		panic("no return value specified for JSONSetMode")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, string) *StatusCmd); ok {
		r0 = rf(ctx, key, path, value, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONSetMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONSetMode'
type MockUniversalClient_JSONSetMode_Call struct {
	*mock.Call
}

// JSONSetMode is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value interface{}
//   - mode string
func (_e *MockUniversalClient_Expecter) JSONSetMode(ctx interface{}, key interface{}, path interface{}, value interface{}, mode interface{}) *MockUniversalClient_JSONSetMode_Call {
	return &MockUniversalClient_JSONSetMode_Call{Call: _e.mock.On("JSONSetMode", ctx, key, path, value, mode)}
}

func (_c *MockUniversalClient_JSONSetMode_Call) Run(run func(ctx context.Context, key string, path string, value interface{}, mode string)) *MockUniversalClient_JSONSetMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONSetMode_Call) Return(_a0 *StatusCmd) *MockUniversalClient_JSONSetMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONSetMode_Call) RunAndReturn(run func(context.Context, string, string, interface{}, string) *StatusCmd) *MockUniversalClient_JSONSetMode_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrAppend provides a mock function with given fields: ctx, key, path, value
func (_m *MockUniversalClient) JSONStrAppend(ctx context.Context, key string, path string, value string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrAppend")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONStrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrAppend'
type MockUniversalClient_JSONStrAppend_Call struct {
	*mock.Call
}

// JSONStrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value string
func (_e *MockUniversalClient_Expecter) JSONStrAppend(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockUniversalClient_JSONStrAppend_Call {
	return &MockUniversalClient_JSONStrAppend_Call{Call: _e.mock.On("JSONStrAppend", ctx, key, path, value)}
}

func (_c *MockUniversalClient_JSONStrAppend_Call) Run(run func(ctx context.Context, key string, path string, value string)) *MockUniversalClient_JSONStrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONStrAppend_Call) Return(_a0 *IntPointerSliceCmd) *MockUniversalClient_JSONStrAppend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONStrAppend_Call) RunAndReturn(run func(context.Context, string, string, string) *IntPointerSliceCmd) *MockUniversalClient_JSONStrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrLen provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONStrLen(ctx context.Context, key string, path string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrLen")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONStrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrLen'
type MockUniversalClient_JSONStrLen_Call struct {
	*mock.Call
}

// JSONStrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONStrLen(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONStrLen_Call {
	return &MockUniversalClient_JSONStrLen_Call{Call: _e.mock.On("JSONStrLen", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONStrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONStrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONStrLen_Call) Return(_a0 *IntPointerSliceCmd) *MockUniversalClient_JSONStrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONStrLen_Call) RunAndReturn(run func(context.Context, string, string) *IntPointerSliceCmd) *MockUniversalClient_JSONStrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONToggle provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONToggle(ctx context.Context, key string, path string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONToggle")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONToggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONToggle'
type MockUniversalClient_JSONToggle_Call struct {
	*mock.Call
}

// JSONToggle is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONToggle(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONToggle_Call {
	return &MockUniversalClient_JSONToggle_Call{Call: _e.mock.On("JSONToggle", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONToggle_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONToggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONToggle_Call) Return(_a0 *IntPointerSliceCmd) *MockUniversalClient_JSONToggle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONToggle_Call) RunAndReturn(run func(context.Context, string, string) *IntPointerSliceCmd) *MockUniversalClient_JSONToggle_Call {
	_c.Call.Return(run)
	return _c
}

// JSONType provides a mock function with given fields: ctx, key, path
func (_m *MockUniversalClient) JSONType(ctx context.Context, key string, path string) *JSONSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONType")
	}

	var r0 *JSONSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *JSONSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_JSONType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONType'
type MockUniversalClient_JSONType_Call struct {
	*mock.Call
}

// JSONType is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockUniversalClient_Expecter) JSONType(ctx interface{}, key interface{}, path interface{}) *MockUniversalClient_JSONType_Call {
	return &MockUniversalClient_JSONType_Call{Call: _e.mock.On("JSONType", ctx, key, path)}
}

func (_c *MockUniversalClient_JSONType_Call) Run(run func(ctx context.Context, key string, path string)) *MockUniversalClient_JSONType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_JSONType_Call) Return(_a0 *JSONSliceCmd) *MockUniversalClient_JSONType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_JSONType_Call) RunAndReturn(run func(context.Context, string, string) *JSONSliceCmd) *MockUniversalClient_JSONType_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields: ctx, pattern
func (_m *MockUniversalClient) Keys(ctx context.Context, pattern string) *StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockUniversalClient_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
//   - ctx context.Context
//   - pattern string
func (_e *MockUniversalClient_Expecter) Keys(ctx interface{}, pattern interface{}) *MockUniversalClient_Keys_Call {
	return &MockUniversalClient_Keys_Call{Call: _e.mock.On("Keys", ctx, pattern)}
}

func (_c *MockUniversalClient_Keys_Call) Run(run func(ctx context.Context, pattern string)) *MockUniversalClient_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Keys_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_Keys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Keys_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// LCS provides a mock function with given fields: ctx, q
func (_m *MockUniversalClient) LCS(ctx context.Context, q *LCSQuery) *LCSCmd {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for LCS")
	}

	var r0 *LCSCmd
	if rf, ok := ret.Get(0).(func(context.Context, *LCSQuery) *LCSCmd); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LCSCmd)
		}
	}

	return r0
}

// MockUniversalClient_LCS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LCS'
type MockUniversalClient_LCS_Call struct {
	*mock.Call
}

// LCS is a helper method to define mock.On call
//   - ctx context.Context
//   - q *LCSQuery
func (_e *MockUniversalClient_Expecter) LCS(ctx interface{}, q interface{}) *MockUniversalClient_LCS_Call {
	return &MockUniversalClient_LCS_Call{Call: _e.mock.On("LCS", ctx, q)}
}

func (_c *MockUniversalClient_LCS_Call) Run(run func(ctx context.Context, q *LCSQuery)) *MockUniversalClient_LCS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*LCSQuery))
	})
	return _c
}

func (_c *MockUniversalClient_LCS_Call) Return(_a0 *LCSCmd) *MockUniversalClient_LCS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LCS_Call) RunAndReturn(run func(context.Context, *LCSQuery) *LCSCmd) *MockUniversalClient_LCS_Call {
	_c.Call.Return(run)
	return _c
}

// LIndex provides a mock function with given fields: ctx, key, index
func (_m *MockUniversalClient) LIndex(ctx context.Context, key string, index int64) *StringCmd {
	ret := _m.Called(ctx, key, index)

	if len(ret) == 0 {
		panic("no return value specified for LIndex")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StringCmd); ok {
		r0 = rf(ctx, key, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_LIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LIndex'
type MockUniversalClient_LIndex_Call struct {
	*mock.Call
}

// LIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - index int64
func (_e *MockUniversalClient_Expecter) LIndex(ctx interface{}, key interface{}, index interface{}) *MockUniversalClient_LIndex_Call {
	return &MockUniversalClient_LIndex_Call{Call: _e.mock.On("LIndex", ctx, key, index)}
}

func (_c *MockUniversalClient_LIndex_Call) Run(run func(ctx context.Context, key string, index int64)) *MockUniversalClient_LIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_LIndex_Call) Return(_a0 *StringCmd) *MockUniversalClient_LIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LIndex_Call) RunAndReturn(run func(context.Context, string, int64) *StringCmd) *MockUniversalClient_LIndex_Call {
	_c.Call.Return(run)
	return _c
}

// LInsert provides a mock function with given fields: ctx, key, op, pivot, value
func (_m *MockUniversalClient) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *IntCmd {
	ret := _m.Called(ctx, key, op, pivot, value)

	if len(ret) == 0 {
		panic("no return value specified for LInsert")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, op, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LInsert'
type MockUniversalClient_LInsert_Call struct {
	*mock.Call
}

// LInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - op string
//   - pivot interface{}
//   - value interface{}
func (_e *MockUniversalClient_Expecter) LInsert(ctx interface{}, key interface{}, op interface{}, pivot interface{}, value interface{}) *MockUniversalClient_LInsert_Call {
	return &MockUniversalClient_LInsert_Call{Call: _e.mock.On("LInsert", ctx, key, op, pivot, value)}
}

func (_c *MockUniversalClient_LInsert_Call) Run(run func(ctx context.Context, key string, op string, pivot interface{}, value interface{})) *MockUniversalClient_LInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_LInsert_Call) Return(_a0 *IntCmd) *MockUniversalClient_LInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LInsert_Call) RunAndReturn(run func(context.Context, string, string, interface{}, interface{}) *IntCmd) *MockUniversalClient_LInsert_Call {
	_c.Call.Return(run)
	return _c
}

// LInsertAfter provides a mock function with given fields: ctx, key, pivot, value
func (_m *MockUniversalClient) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *IntCmd {
	ret := _m.Called(ctx, key, pivot, value)

	if len(ret) == 0 {
		panic("no return value specified for LInsertAfter")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LInsertAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LInsertAfter'
type MockUniversalClient_LInsertAfter_Call struct {
	*mock.Call
}

// LInsertAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - pivot interface{}
//   - value interface{}
func (_e *MockUniversalClient_Expecter) LInsertAfter(ctx interface{}, key interface{}, pivot interface{}, value interface{}) *MockUniversalClient_LInsertAfter_Call {
	return &MockUniversalClient_LInsertAfter_Call{Call: _e.mock.On("LInsertAfter", ctx, key, pivot, value)}
}

func (_c *MockUniversalClient_LInsertAfter_Call) Run(run func(ctx context.Context, key string, pivot interface{}, value interface{})) *MockUniversalClient_LInsertAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_LInsertAfter_Call) Return(_a0 *IntCmd) *MockUniversalClient_LInsertAfter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LInsertAfter_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) *IntCmd) *MockUniversalClient_LInsertAfter_Call {
	_c.Call.Return(run)
	return _c
}

// LInsertBefore provides a mock function with given fields: ctx, key, pivot, value
func (_m *MockUniversalClient) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *IntCmd {
	ret := _m.Called(ctx, key, pivot, value)

	if len(ret) == 0 {
		panic("no return value specified for LInsertBefore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LInsertBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LInsertBefore'
type MockUniversalClient_LInsertBefore_Call struct {
	*mock.Call
}

// LInsertBefore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - pivot interface{}
//   - value interface{}
func (_e *MockUniversalClient_Expecter) LInsertBefore(ctx interface{}, key interface{}, pivot interface{}, value interface{}) *MockUniversalClient_LInsertBefore_Call {
	return &MockUniversalClient_LInsertBefore_Call{Call: _e.mock.On("LInsertBefore", ctx, key, pivot, value)}
}

func (_c *MockUniversalClient_LInsertBefore_Call) Run(run func(ctx context.Context, key string, pivot interface{}, value interface{})) *MockUniversalClient_LInsertBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_LInsertBefore_Call) Return(_a0 *IntCmd) *MockUniversalClient_LInsertBefore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LInsertBefore_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) *IntCmd) *MockUniversalClient_LInsertBefore_Call {
	_c.Call.Return(run)
	return _c
}

// LLen provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) LLen(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for LLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LLen'
type MockUniversalClient_LLen_Call struct {
	*mock.Call
}

// LLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) LLen(ctx interface{}, key interface{}) *MockUniversalClient_LLen_Call {
	return &MockUniversalClient_LLen_Call{Call: _e.mock.On("LLen", ctx, key)}
}

func (_c *MockUniversalClient_LLen_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_LLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_LLen_Call) Return(_a0 *IntCmd) *MockUniversalClient_LLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LLen_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_LLen_Call {
	_c.Call.Return(run)
	return _c
}

// LMPop provides a mock function with given fields: ctx, direction, count, keys
func (_m *MockUniversalClient) LMPop(ctx context.Context, direction string, count int64, keys ...string) *KeyValuesCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, direction, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LMPop")
	}

	var r0 *KeyValuesCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...string) *KeyValuesCmd); ok {
		r0 = rf(ctx, direction, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KeyValuesCmd)
		}
	}

	return r0
}

// MockUniversalClient_LMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LMPop'
type MockUniversalClient_LMPop_Call struct {
	*mock.Call
}

// LMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - direction string
//   - count int64
//   - keys ...string
func (_e *MockUniversalClient_Expecter) LMPop(ctx interface{}, direction interface{}, count interface{}, keys ...interface{}) *MockUniversalClient_LMPop_Call {
	return &MockUniversalClient_LMPop_Call{Call: _e.mock.On("LMPop",
		append([]interface{}{ctx, direction, count}, keys...)...)}
}

func (_c *MockUniversalClient_LMPop_Call) Run(run func(ctx context.Context, direction string, count int64, keys ...string)) *MockUniversalClient_LMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_LMPop_Call) Return(_a0 *KeyValuesCmd) *MockUniversalClient_LMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LMPop_Call) RunAndReturn(run func(context.Context, string, int64, ...string) *KeyValuesCmd) *MockUniversalClient_LMPop_Call {
	_c.Call.Return(run)
	return _c
}

// LMove provides a mock function with given fields: ctx, source, destination, srcpos, destpos
func (_m *MockUniversalClient) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *StringCmd {
	ret := _m.Called(ctx, source, destination, srcpos, destpos)

	if len(ret) == 0 {
		panic("no return value specified for LMove")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *StringCmd); ok {
		r0 = rf(ctx, source, destination, srcpos, destpos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_LMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LMove'
type MockUniversalClient_LMove_Call struct {
	*mock.Call
}

// LMove is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - srcpos string
//   - destpos string
func (_e *MockUniversalClient_Expecter) LMove(ctx interface{}, source interface{}, destination interface{}, srcpos interface{}, destpos interface{}) *MockUniversalClient_LMove_Call {
	return &MockUniversalClient_LMove_Call{Call: _e.mock.On("LMove", ctx, source, destination, srcpos, destpos)}
}

func (_c *MockUniversalClient_LMove_Call) Run(run func(ctx context.Context, source string, destination string, srcpos string, destpos string)) *MockUniversalClient_LMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockUniversalClient_LMove_Call) Return(_a0 *StringCmd) *MockUniversalClient_LMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LMove_Call) RunAndReturn(run func(context.Context, string, string, string, string) *StringCmd) *MockUniversalClient_LMove_Call {
	_c.Call.Return(run)
	return _c
}

// LPop provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) LPop(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for LPop")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_LPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPop'
type MockUniversalClient_LPop_Call struct {
	*mock.Call
}

// LPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) LPop(ctx interface{}, key interface{}) *MockUniversalClient_LPop_Call {
	return &MockUniversalClient_LPop_Call{Call: _e.mock.On("LPop", ctx, key)}
}

func (_c *MockUniversalClient_LPop_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_LPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_LPop_Call) Return(_a0 *StringCmd) *MockUniversalClient_LPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LPop_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_LPop_Call {
	_c.Call.Return(run)
	return _c
}

// LPopCount provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) LPopCount(ctx context.Context, key string, count int) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for LPopCount")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_LPopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPopCount'
type MockUniversalClient_LPopCount_Call struct {
	*mock.Call
}

// LPopCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) LPopCount(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_LPopCount_Call {
	return &MockUniversalClient_LPopCount_Call{Call: _e.mock.On("LPopCount", ctx, key, count)}
}

func (_c *MockUniversalClient_LPopCount_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_LPopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_LPopCount_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_LPopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LPopCount_Call) RunAndReturn(run func(context.Context, string, int) *StringSliceCmd) *MockUniversalClient_LPopCount_Call {
	_c.Call.Return(run)
	return _c
}

// LPos provides a mock function with given fields: ctx, key, value, args
func (_m *MockUniversalClient) LPos(ctx context.Context, key string, value string, args LPosArgs) *IntCmd {
	ret := _m.Called(ctx, key, value, args)

	if len(ret) == 0 {
		panic("no return value specified for LPos")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, LPosArgs) *IntCmd); ok {
		r0 = rf(ctx, key, value, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPos'
type MockUniversalClient_LPos_Call struct {
	*mock.Call
}

// LPos is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
//   - args LPosArgs
func (_e *MockUniversalClient_Expecter) LPos(ctx interface{}, key interface{}, value interface{}, args interface{}) *MockUniversalClient_LPos_Call {
	return &MockUniversalClient_LPos_Call{Call: _e.mock.On("LPos", ctx, key, value, args)}
}

func (_c *MockUniversalClient_LPos_Call) Run(run func(ctx context.Context, key string, value string, args LPosArgs)) *MockUniversalClient_LPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(LPosArgs))
	})
	return _c
}

func (_c *MockUniversalClient_LPos_Call) Return(_a0 *IntCmd) *MockUniversalClient_LPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LPos_Call) RunAndReturn(run func(context.Context, string, string, LPosArgs) *IntCmd) *MockUniversalClient_LPos_Call {
	_c.Call.Return(run)
	return _c
}

// LPosCount provides a mock function with given fields: ctx, key, value, count, args
func (_m *MockUniversalClient) LPosCount(ctx context.Context, key string, value string, count int64, args LPosArgs) *IntSliceCmd {
	ret := _m.Called(ctx, key, value, count, args)

	if len(ret) == 0 {
		panic("no return value specified for LPosCount")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, LPosArgs) *IntSliceCmd); ok {
		r0 = rf(ctx, key, value, count, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_LPosCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPosCount'
type MockUniversalClient_LPosCount_Call struct {
	*mock.Call
}

// LPosCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
//   - count int64
//   - args LPosArgs
func (_e *MockUniversalClient_Expecter) LPosCount(ctx interface{}, key interface{}, value interface{}, count interface{}, args interface{}) *MockUniversalClient_LPosCount_Call {
	return &MockUniversalClient_LPosCount_Call{Call: _e.mock.On("LPosCount", ctx, key, value, count, args)}
}

func (_c *MockUniversalClient_LPosCount_Call) Run(run func(ctx context.Context, key string, value string, count int64, args LPosArgs)) *MockUniversalClient_LPosCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(LPosArgs))
	})
	return _c
}

func (_c *MockUniversalClient_LPosCount_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_LPosCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LPosCount_Call) RunAndReturn(run func(context.Context, string, string, int64, LPosArgs) *IntSliceCmd) *MockUniversalClient_LPosCount_Call {
	_c.Call.Return(run)
	return _c
}

// LPush provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) LPush(ctx context.Context, key string, values ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LPush")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPush'
type MockUniversalClient_LPush_Call struct {
	*mock.Call
}

// LPush is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) LPush(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_LPush_Call {
	return &MockUniversalClient_LPush_Call{Call: _e.mock.On("LPush",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_LPush_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_LPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_LPush_Call) Return(_a0 *IntCmd) *MockUniversalClient_LPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LPush_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_LPush_Call {
	_c.Call.Return(run)
	return _c
}

// LPushX provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) LPushX(ctx context.Context, key string, values ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LPushX")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LPushX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPushX'
type MockUniversalClient_LPushX_Call struct {
	*mock.Call
}

// LPushX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) LPushX(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_LPushX_Call {
	return &MockUniversalClient_LPushX_Call{Call: _e.mock.On("LPushX",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_LPushX_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_LPushX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_LPushX_Call) Return(_a0 *IntCmd) *MockUniversalClient_LPushX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LPushX_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_LPushX_Call {
	_c.Call.Return(run)
	return _c
}

// LRange provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) LRange(ctx context.Context, key string, start int64, stop int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for LRange")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_LRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LRange'
type MockUniversalClient_LRange_Call struct {
	*mock.Call
}

// LRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) LRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_LRange_Call {
	return &MockUniversalClient_LRange_Call{Call: _e.mock.On("LRange", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_LRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_LRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_LRange_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_LRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StringSliceCmd) *MockUniversalClient_LRange_Call {
	_c.Call.Return(run)
	return _c
}

// LRem provides a mock function with given fields: ctx, key, count, value
func (_m *MockUniversalClient) LRem(ctx context.Context, key string, count int64, value interface{}) *IntCmd {
	ret := _m.Called(ctx, key, count, value)

	if len(ret) == 0 {
		panic("no return value specified for LRem")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, count, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LRem'
type MockUniversalClient_LRem_Call struct {
	*mock.Call
}

// LRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int64
//   - value interface{}
func (_e *MockUniversalClient_Expecter) LRem(ctx interface{}, key interface{}, count interface{}, value interface{}) *MockUniversalClient_LRem_Call {
	return &MockUniversalClient_LRem_Call{Call: _e.mock.On("LRem", ctx, key, count, value)}
}

func (_c *MockUniversalClient_LRem_Call) Run(run func(ctx context.Context, key string, count int64, value interface{})) *MockUniversalClient_LRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_LRem_Call) Return(_a0 *IntCmd) *MockUniversalClient_LRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LRem_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *IntCmd) *MockUniversalClient_LRem_Call {
	_c.Call.Return(run)
	return _c
}

// LSet provides a mock function with given fields: ctx, key, index, value
func (_m *MockUniversalClient) LSet(ctx context.Context, key string, index int64, value interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, index, value)

	if len(ret) == 0 {
		panic("no return value specified for LSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, index, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_LSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LSet'
type MockUniversalClient_LSet_Call struct {
	*mock.Call
}

// LSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - index int64
//   - value interface{}
func (_e *MockUniversalClient_Expecter) LSet(ctx interface{}, key interface{}, index interface{}, value interface{}) *MockUniversalClient_LSet_Call {
	return &MockUniversalClient_LSet_Call{Call: _e.mock.On("LSet", ctx, key, index, value)}
}

func (_c *MockUniversalClient_LSet_Call) Run(run func(ctx context.Context, key string, index int64, value interface{})) *MockUniversalClient_LSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_LSet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_LSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LSet_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *StatusCmd) *MockUniversalClient_LSet_Call {
	_c.Call.Return(run)
	return _c
}

// LTrim provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) LTrim(ctx context.Context, key string, start int64, stop int64) *StatusCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for LTrim")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_LTrim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LTrim'
type MockUniversalClient_LTrim_Call struct {
	*mock.Call
}

// LTrim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) LTrim(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_LTrim_Call {
	return &MockUniversalClient_LTrim_Call{Call: _e.mock.On("LTrim", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_LTrim_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_LTrim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_LTrim_Call) Return(_a0 *StatusCmd) *MockUniversalClient_LTrim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LTrim_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StatusCmd) *MockUniversalClient_LTrim_Call {
	_c.Call.Return(run)
	return _c
}

// LastSave provides a mock function with given fields: ctx
func (_m *MockUniversalClient) LastSave(ctx context.Context) *IntCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LastSave")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_LastSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastSave'
type MockUniversalClient_LastSave_Call struct {
	*mock.Call
}

// LastSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) LastSave(ctx interface{}) *MockUniversalClient_LastSave_Call {
	return &MockUniversalClient_LastSave_Call{Call: _e.mock.On("LastSave", ctx)}
}

func (_c *MockUniversalClient_LastSave_Call) Run(run func(ctx context.Context)) *MockUniversalClient_LastSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_LastSave_Call) Return(_a0 *IntCmd) *MockUniversalClient_LastSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_LastSave_Call) RunAndReturn(run func(context.Context) *IntCmd) *MockUniversalClient_LastSave_Call {
	_c.Call.Return(run)
	return _c
}

// MGet provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) MGet(ctx context.Context, keys ...string) *SliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MGet")
	}

	var r0 *SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *SliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_MGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MGet'
type MockUniversalClient_MGet_Call struct {
	*mock.Call
}

// MGet is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) MGet(ctx interface{}, keys ...interface{}) *MockUniversalClient_MGet_Call {
	return &MockUniversalClient_MGet_Call{Call: _e.mock.On("MGet",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_MGet_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_MGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_MGet_Call) Return(_a0 *SliceCmd) *MockUniversalClient_MGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_MGet_Call) RunAndReturn(run func(context.Context, ...string) *SliceCmd) *MockUniversalClient_MGet_Call {
	_c.Call.Return(run)
	return _c
}

// MSet provides a mock function with given fields: ctx, values
func (_m *MockUniversalClient) MSet(ctx context.Context, values ...interface{}) *StatusCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *StatusCmd); ok {
		r0 = rf(ctx, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_MSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSet'
type MockUniversalClient_MSet_Call struct {
	*mock.Call
}

// MSet is a helper method to define mock.On call
//   - ctx context.Context
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) MSet(ctx interface{}, values ...interface{}) *MockUniversalClient_MSet_Call {
	return &MockUniversalClient_MSet_Call{Call: _e.mock.On("MSet",
		append([]interface{}{ctx}, values...)...)}
}

func (_c *MockUniversalClient_MSet_Call) Run(run func(ctx context.Context, values ...interface{})) *MockUniversalClient_MSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_MSet_Call) Return(_a0 *StatusCmd) *MockUniversalClient_MSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_MSet_Call) RunAndReturn(run func(context.Context, ...interface{}) *StatusCmd) *MockUniversalClient_MSet_Call {
	_c.Call.Return(run)
	return _c
}

// MSetNX provides a mock function with given fields: ctx, values
func (_m *MockUniversalClient) MSetNX(ctx context.Context, values ...interface{}) *BoolCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MSetNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *BoolCmd); ok {
		r0 = rf(ctx, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_MSetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSetNX'
type MockUniversalClient_MSetNX_Call struct {
	*mock.Call
}

// MSetNX is a helper method to define mock.On call
//   - ctx context.Context
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) MSetNX(ctx interface{}, values ...interface{}) *MockUniversalClient_MSetNX_Call {
	return &MockUniversalClient_MSetNX_Call{Call: _e.mock.On("MSetNX",
		append([]interface{}{ctx}, values...)...)}
}

func (_c *MockUniversalClient_MSetNX_Call) Run(run func(ctx context.Context, values ...interface{})) *MockUniversalClient_MSetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_MSetNX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_MSetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_MSetNX_Call) RunAndReturn(run func(context.Context, ...interface{}) *BoolCmd) *MockUniversalClient_MSetNX_Call {
	_c.Call.Return(run)
	return _c
}

// MemoryUsage provides a mock function with given fields: ctx, key, samples
func (_m *MockUniversalClient) MemoryUsage(ctx context.Context, key string, samples ...int) *IntCmd {
	_va := make([]interface{}, len(samples))
	for _i := range samples {
		_va[_i] = samples[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MemoryUsage")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int) *IntCmd); ok {
		r0 = rf(ctx, key, samples...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_MemoryUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemoryUsage'
type MockUniversalClient_MemoryUsage_Call struct {
	*mock.Call
}

// MemoryUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - samples ...int
func (_e *MockUniversalClient_Expecter) MemoryUsage(ctx interface{}, key interface{}, samples ...interface{}) *MockUniversalClient_MemoryUsage_Call {
	return &MockUniversalClient_MemoryUsage_Call{Call: _e.mock.On("MemoryUsage",
		append([]interface{}{ctx, key}, samples...)...)}
}

func (_c *MockUniversalClient_MemoryUsage_Call) Run(run func(ctx context.Context, key string, samples ...int)) *MockUniversalClient_MemoryUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_MemoryUsage_Call) Return(_a0 *IntCmd) *MockUniversalClient_MemoryUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_MemoryUsage_Call) RunAndReturn(run func(context.Context, string, ...int) *IntCmd) *MockUniversalClient_MemoryUsage_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields: ctx, host, port, key, db, timeout
func (_m *MockUniversalClient) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *StatusCmd {
	ret := _m.Called(ctx, host, port, key, db, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, time.Duration) *StatusCmd); ok {
		r0 = rf(ctx, host, port, key, db, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockUniversalClient_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
//   - key string
//   - db int
//   - timeout time.Duration
func (_e *MockUniversalClient_Expecter) Migrate(ctx interface{}, host interface{}, port interface{}, key interface{}, db interface{}, timeout interface{}) *MockUniversalClient_Migrate_Call {
	return &MockUniversalClient_Migrate_Call{Call: _e.mock.On("Migrate", ctx, host, port, key, db, timeout)}
}

func (_c *MockUniversalClient_Migrate_Call) Run(run func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration)) *MockUniversalClient_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int), args[5].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_Migrate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Migrate_Call) RunAndReturn(run func(context.Context, string, string, string, int, time.Duration) *StatusCmd) *MockUniversalClient_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// ModuleLoadex provides a mock function with given fields: ctx, conf
func (_m *MockUniversalClient) ModuleLoadex(ctx context.Context, conf *ModuleLoadexConfig) *StringCmd {
	ret := _m.Called(ctx, conf)

	if len(ret) == 0 {
		panic("no return value specified for ModuleLoadex")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, *ModuleLoadexConfig) *StringCmd); ok {
		r0 = rf(ctx, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ModuleLoadex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModuleLoadex'
type MockUniversalClient_ModuleLoadex_Call struct {
	*mock.Call
}

// ModuleLoadex is a helper method to define mock.On call
//   - ctx context.Context
//   - conf *ModuleLoadexConfig
func (_e *MockUniversalClient_Expecter) ModuleLoadex(ctx interface{}, conf interface{}) *MockUniversalClient_ModuleLoadex_Call {
	return &MockUniversalClient_ModuleLoadex_Call{Call: _e.mock.On("ModuleLoadex", ctx, conf)}
}

func (_c *MockUniversalClient_ModuleLoadex_Call) Run(run func(ctx context.Context, conf *ModuleLoadexConfig)) *MockUniversalClient_ModuleLoadex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ModuleLoadexConfig))
	})
	return _c
}

func (_c *MockUniversalClient_ModuleLoadex_Call) Return(_a0 *StringCmd) *MockUniversalClient_ModuleLoadex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ModuleLoadex_Call) RunAndReturn(run func(context.Context, *ModuleLoadexConfig) *StringCmd) *MockUniversalClient_ModuleLoadex_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: ctx, key, db
func (_m *MockUniversalClient) Move(ctx context.Context, key string, db int) *BoolCmd {
	ret := _m.Called(ctx, key, db)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *BoolCmd); ok {
		r0 = rf(ctx, key, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockUniversalClient_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - db int
func (_e *MockUniversalClient_Expecter) Move(ctx interface{}, key interface{}, db interface{}) *MockUniversalClient_Move_Call {
	return &MockUniversalClient_Move_Call{Call: _e.mock.On("Move", ctx, key, db)}
}

func (_c *MockUniversalClient_Move_Call) Run(run func(ctx context.Context, key string, db int)) *MockUniversalClient_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_Move_Call) Return(_a0 *BoolCmd) *MockUniversalClient_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Move_Call) RunAndReturn(run func(context.Context, string, int) *BoolCmd) *MockUniversalClient_Move_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectEncoding provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ObjectEncoding(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ObjectEncoding")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ObjectEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectEncoding'
type MockUniversalClient_ObjectEncoding_Call struct {
	*mock.Call
}

// ObjectEncoding is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ObjectEncoding(ctx interface{}, key interface{}) *MockUniversalClient_ObjectEncoding_Call {
	return &MockUniversalClient_ObjectEncoding_Call{Call: _e.mock.On("ObjectEncoding", ctx, key)}
}

func (_c *MockUniversalClient_ObjectEncoding_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ObjectEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ObjectEncoding_Call) Return(_a0 *StringCmd) *MockUniversalClient_ObjectEncoding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ObjectEncoding_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_ObjectEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectFreq provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ObjectFreq(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ObjectFreq")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ObjectFreq_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectFreq'
type MockUniversalClient_ObjectFreq_Call struct {
	*mock.Call
}

// ObjectFreq is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ObjectFreq(ctx interface{}, key interface{}) *MockUniversalClient_ObjectFreq_Call {
	return &MockUniversalClient_ObjectFreq_Call{Call: _e.mock.On("ObjectFreq", ctx, key)}
}

func (_c *MockUniversalClient_ObjectFreq_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ObjectFreq_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ObjectFreq_Call) Return(_a0 *IntCmd) *MockUniversalClient_ObjectFreq_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ObjectFreq_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_ObjectFreq_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectIdleTime provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ObjectIdleTime(ctx context.Context, key string) *DurationCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ObjectIdleTime")
	}

	var r0 *DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DurationCmd)
		}
	}

	return r0
}

// MockUniversalClient_ObjectIdleTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectIdleTime'
type MockUniversalClient_ObjectIdleTime_Call struct {
	*mock.Call
}

// ObjectIdleTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ObjectIdleTime(ctx interface{}, key interface{}) *MockUniversalClient_ObjectIdleTime_Call {
	return &MockUniversalClient_ObjectIdleTime_Call{Call: _e.mock.On("ObjectIdleTime", ctx, key)}
}

func (_c *MockUniversalClient_ObjectIdleTime_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ObjectIdleTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ObjectIdleTime_Call) Return(_a0 *DurationCmd) *MockUniversalClient_ObjectIdleTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ObjectIdleTime_Call) RunAndReturn(run func(context.Context, string) *DurationCmd) *MockUniversalClient_ObjectIdleTime_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectRefCount provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ObjectRefCount(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ObjectRefCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ObjectRefCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectRefCount'
type MockUniversalClient_ObjectRefCount_Call struct {
	*mock.Call
}

// ObjectRefCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ObjectRefCount(ctx interface{}, key interface{}) *MockUniversalClient_ObjectRefCount_Call {
	return &MockUniversalClient_ObjectRefCount_Call{Call: _e.mock.On("ObjectRefCount", ctx, key)}
}

func (_c *MockUniversalClient_ObjectRefCount_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ObjectRefCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ObjectRefCount_Call) Return(_a0 *IntCmd) *MockUniversalClient_ObjectRefCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ObjectRefCount_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_ObjectRefCount_Call {
	_c.Call.Return(run)
	return _c
}

// PExpire provides a mock function with given fields: ctx, key, expiration
func (_m *MockUniversalClient) PExpire(ctx context.Context, key string, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for PExpire")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_PExpire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PExpire'
type MockUniversalClient_PExpire_Call struct {
	*mock.Call
}

// PExpire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) PExpire(ctx interface{}, key interface{}, expiration interface{}) *MockUniversalClient_PExpire_Call {
	return &MockUniversalClient_PExpire_Call{Call: _e.mock.On("PExpire", ctx, key, expiration)}
}

func (_c *MockUniversalClient_PExpire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockUniversalClient_PExpire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_PExpire_Call) Return(_a0 *BoolCmd) *MockUniversalClient_PExpire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PExpire_Call) RunAndReturn(run func(context.Context, string, time.Duration) *BoolCmd) *MockUniversalClient_PExpire_Call {
	_c.Call.Return(run)
	return _c
}

// PExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *MockUniversalClient) PExpireAt(ctx context.Context, key string, tm time.Time) *BoolCmd {
	ret := _m.Called(ctx, key, tm)

	if len(ret) == 0 {
		panic("no return value specified for PExpireAt")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *BoolCmd); ok {
		r0 = rf(ctx, key, tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_PExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PExpireAt'
type MockUniversalClient_PExpireAt_Call struct {
	*mock.Call
}

// PExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
func (_e *MockUniversalClient_Expecter) PExpireAt(ctx interface{}, key interface{}, tm interface{}) *MockUniversalClient_PExpireAt_Call {
	return &MockUniversalClient_PExpireAt_Call{Call: _e.mock.On("PExpireAt", ctx, key, tm)}
}

func (_c *MockUniversalClient_PExpireAt_Call) Run(run func(ctx context.Context, key string, tm time.Time)) *MockUniversalClient_PExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockUniversalClient_PExpireAt_Call) Return(_a0 *BoolCmd) *MockUniversalClient_PExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PExpireAt_Call) RunAndReturn(run func(context.Context, string, time.Time) *BoolCmd) *MockUniversalClient_PExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// PExpireTime provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) PExpireTime(ctx context.Context, key string) *DurationCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for PExpireTime")
	}

	var r0 *DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DurationCmd)
		}
	}

	return r0
}

// MockUniversalClient_PExpireTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PExpireTime'
type MockUniversalClient_PExpireTime_Call struct {
	*mock.Call
}

// PExpireTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) PExpireTime(ctx interface{}, key interface{}) *MockUniversalClient_PExpireTime_Call {
	return &MockUniversalClient_PExpireTime_Call{Call: _e.mock.On("PExpireTime", ctx, key)}
}

func (_c *MockUniversalClient_PExpireTime_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_PExpireTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_PExpireTime_Call) Return(_a0 *DurationCmd) *MockUniversalClient_PExpireTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PExpireTime_Call) RunAndReturn(run func(context.Context, string) *DurationCmd) *MockUniversalClient_PExpireTime_Call {
	_c.Call.Return(run)
	return _c
}

// PFAdd provides a mock function with given fields: ctx, key, els
func (_m *MockUniversalClient) PFAdd(ctx context.Context, key string, els ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, els...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PFAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, els...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_PFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFAdd'
type MockUniversalClient_PFAdd_Call struct {
	*mock.Call
}

// PFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - els ...interface{}
func (_e *MockUniversalClient_Expecter) PFAdd(ctx interface{}, key interface{}, els ...interface{}) *MockUniversalClient_PFAdd_Call {
	return &MockUniversalClient_PFAdd_Call{Call: _e.mock.On("PFAdd",
		append([]interface{}{ctx, key}, els...)...)}
}

func (_c *MockUniversalClient_PFAdd_Call) Run(run func(ctx context.Context, key string, els ...interface{})) *MockUniversalClient_PFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_PFAdd_Call) Return(_a0 *IntCmd) *MockUniversalClient_PFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PFAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_PFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// PFCount provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) PFCount(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PFCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_PFCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFCount'
type MockUniversalClient_PFCount_Call struct {
	*mock.Call
}

// PFCount is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) PFCount(ctx interface{}, keys ...interface{}) *MockUniversalClient_PFCount_Call {
	return &MockUniversalClient_PFCount_Call{Call: _e.mock.On("PFCount",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_PFCount_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_PFCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_PFCount_Call) Return(_a0 *IntCmd) *MockUniversalClient_PFCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PFCount_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockUniversalClient_PFCount_Call {
	_c.Call.Return(run)
	return _c
}

// PFMerge provides a mock function with given fields: ctx, dest, keys
func (_m *MockUniversalClient) PFMerge(ctx context.Context, dest string, keys ...string) *StatusCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PFMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *StatusCmd); ok {
		r0 = rf(ctx, dest, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_PFMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFMerge'
type MockUniversalClient_PFMerge_Call struct {
	*mock.Call
}

// PFMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) PFMerge(ctx interface{}, dest interface{}, keys ...interface{}) *MockUniversalClient_PFMerge_Call {
	return &MockUniversalClient_PFMerge_Call{Call: _e.mock.On("PFMerge",
		append([]interface{}{ctx, dest}, keys...)...)}
}

func (_c *MockUniversalClient_PFMerge_Call) Run(run func(ctx context.Context, dest string, keys ...string)) *MockUniversalClient_PFMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_PFMerge_Call) Return(_a0 *StatusCmd) *MockUniversalClient_PFMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PFMerge_Call) RunAndReturn(run func(context.Context, string, ...string) *StatusCmd) *MockUniversalClient_PFMerge_Call {
	_c.Call.Return(run)
	return _c
}

// PSubscribe provides a mock function with given fields: ctx, channels
func (_m *MockUniversalClient) PSubscribe(ctx context.Context, channels ...string) *PubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PSubscribe")
	}

	var r0 *PubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *PubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PubSub)
		}
	}

	return r0
}

// MockUniversalClient_PSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PSubscribe'
type MockUniversalClient_PSubscribe_Call struct {
	*mock.Call
}

// PSubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *MockUniversalClient_Expecter) PSubscribe(ctx interface{}, channels ...interface{}) *MockUniversalClient_PSubscribe_Call {
	return &MockUniversalClient_PSubscribe_Call{Call: _e.mock.On("PSubscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockUniversalClient_PSubscribe_Call) Run(run func(ctx context.Context, channels ...string)) *MockUniversalClient_PSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_PSubscribe_Call) Return(_a0 *PubSub) *MockUniversalClient_PSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PSubscribe_Call) RunAndReturn(run func(context.Context, ...string) *PubSub) *MockUniversalClient_PSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// PTTL provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) PTTL(ctx context.Context, key string) *DurationCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for PTTL")
	}

	var r0 *DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DurationCmd)
		}
	}

	return r0
}

// MockUniversalClient_PTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PTTL'
type MockUniversalClient_PTTL_Call struct {
	*mock.Call
}

// PTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) PTTL(ctx interface{}, key interface{}) *MockUniversalClient_PTTL_Call {
	return &MockUniversalClient_PTTL_Call{Call: _e.mock.On("PTTL", ctx, key)}
}

func (_c *MockUniversalClient_PTTL_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_PTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_PTTL_Call) Return(_a0 *DurationCmd) *MockUniversalClient_PTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PTTL_Call) RunAndReturn(run func(context.Context, string) *DurationCmd) *MockUniversalClient_PTTL_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) Persist(ctx context.Context, key string) *BoolCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Persist")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *BoolCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type MockUniversalClient_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) Persist(ctx interface{}, key interface{}) *MockUniversalClient_Persist_Call {
	return &MockUniversalClient_Persist_Call{Call: _e.mock.On("Persist", ctx, key)}
}

func (_c *MockUniversalClient_Persist_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Persist_Call) Return(_a0 *BoolCmd) *MockUniversalClient_Persist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Persist_Call) RunAndReturn(run func(context.Context, string) *BoolCmd) *MockUniversalClient_Persist_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockUniversalClient) Ping(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockUniversalClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) Ping(ctx interface{}) *MockUniversalClient_Ping_Call {
	return &MockUniversalClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockUniversalClient_Ping_Call) Run(run func(ctx context.Context)) *MockUniversalClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_Ping_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Ping_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Pipeline provides a mock function with no fields
func (_m *MockUniversalClient) Pipeline() Pipeliner {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pipeline")
	}

	var r0 Pipeliner
	if rf, ok := ret.Get(0).(func() Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeliner)
		}
	}

	return r0
}

// MockUniversalClient_Pipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pipeline'
type MockUniversalClient_Pipeline_Call struct {
	*mock.Call
}

// Pipeline is a helper method to define mock.On call
func (_e *MockUniversalClient_Expecter) Pipeline() *MockUniversalClient_Pipeline_Call {
	return &MockUniversalClient_Pipeline_Call{Call: _e.mock.On("Pipeline")}
}

func (_c *MockUniversalClient_Pipeline_Call) Run(run func()) *MockUniversalClient_Pipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUniversalClient_Pipeline_Call) Return(_a0 Pipeliner) *MockUniversalClient_Pipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Pipeline_Call) RunAndReturn(run func() Pipeliner) *MockUniversalClient_Pipeline_Call {
	_c.Call.Return(run)
	return _c
}

// Pipelined provides a mock function with given fields: ctx, fn
func (_m *MockUniversalClient) Pipelined(ctx context.Context, fn func(Pipeliner) error) ([]Cmder, error) {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Pipelined")
	}

	var r0 []Cmder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(Pipeliner) error) ([]Cmder, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(Pipeliner) error) []Cmder); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Cmder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(Pipeliner) error) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUniversalClient_Pipelined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pipelined'
type MockUniversalClient_Pipelined_Call struct {
	*mock.Call
}

// Pipelined is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(Pipeliner) error
func (_e *MockUniversalClient_Expecter) Pipelined(ctx interface{}, fn interface{}) *MockUniversalClient_Pipelined_Call {
	return &MockUniversalClient_Pipelined_Call{Call: _e.mock.On("Pipelined", ctx, fn)}
}

func (_c *MockUniversalClient_Pipelined_Call) Run(run func(ctx context.Context, fn func(Pipeliner) error)) *MockUniversalClient_Pipelined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(Pipeliner) error))
	})
	return _c
}

func (_c *MockUniversalClient_Pipelined_Call) Return(_a0 []Cmder, _a1 error) *MockUniversalClient_Pipelined_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUniversalClient_Pipelined_Call) RunAndReturn(run func(context.Context, func(Pipeliner) error) ([]Cmder, error)) *MockUniversalClient_Pipelined_Call {
	_c.Call.Return(run)
	return _c
}

// PoolStats provides a mock function with no fields
func (_m *MockUniversalClient) PoolStats() *PoolStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PoolStats")
	}

	var r0 *PoolStats
	if rf, ok := ret.Get(0).(func() *PoolStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PoolStats)
		}
	}

	return r0
}

// MockUniversalClient_PoolStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PoolStats'
type MockUniversalClient_PoolStats_Call struct {
	*mock.Call
}

// PoolStats is a helper method to define mock.On call
func (_e *MockUniversalClient_Expecter) PoolStats() *MockUniversalClient_PoolStats_Call {
	return &MockUniversalClient_PoolStats_Call{Call: _e.mock.On("PoolStats")}
}

func (_c *MockUniversalClient_PoolStats_Call) Run(run func()) *MockUniversalClient_PoolStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUniversalClient_PoolStats_Call) Return(_a0 *PoolStats) *MockUniversalClient_PoolStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PoolStats_Call) RunAndReturn(run func() *PoolStats) *MockUniversalClient_PoolStats_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, cmd
func (_m *MockUniversalClient) Process(ctx context.Context, cmd Cmder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Cmder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUniversalClient_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockUniversalClient_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd Cmder
func (_e *MockUniversalClient_Expecter) Process(ctx interface{}, cmd interface{}) *MockUniversalClient_Process_Call {
	return &MockUniversalClient_Process_Call{Call: _e.mock.On("Process", ctx, cmd)}
}

func (_c *MockUniversalClient_Process_Call) Run(run func(ctx context.Context, cmd Cmder)) *MockUniversalClient_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Cmder))
	})
	return _c
}

func (_c *MockUniversalClient_Process_Call) Return(_a0 error) *MockUniversalClient_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Process_Call) RunAndReturn(run func(context.Context, Cmder) error) *MockUniversalClient_Process_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubChannels provides a mock function with given fields: ctx, pattern
func (_m *MockUniversalClient) PubSubChannels(ctx context.Context, pattern string) *StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for PubSubChannels")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_PubSubChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubChannels'
type MockUniversalClient_PubSubChannels_Call struct {
	*mock.Call
}

// PubSubChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - pattern string
func (_e *MockUniversalClient_Expecter) PubSubChannels(ctx interface{}, pattern interface{}) *MockUniversalClient_PubSubChannels_Call {
	return &MockUniversalClient_PubSubChannels_Call{Call: _e.mock.On("PubSubChannels", ctx, pattern)}
}

func (_c *MockUniversalClient_PubSubChannels_Call) Run(run func(ctx context.Context, pattern string)) *MockUniversalClient_PubSubChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_PubSubChannels_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_PubSubChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PubSubChannels_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_PubSubChannels_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubNumPat provides a mock function with given fields: ctx
func (_m *MockUniversalClient) PubSubNumPat(ctx context.Context) *IntCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PubSubNumPat")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_PubSubNumPat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubNumPat'
type MockUniversalClient_PubSubNumPat_Call struct {
	*mock.Call
}

// PubSubNumPat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) PubSubNumPat(ctx interface{}) *MockUniversalClient_PubSubNumPat_Call {
	return &MockUniversalClient_PubSubNumPat_Call{Call: _e.mock.On("PubSubNumPat", ctx)}
}

func (_c *MockUniversalClient_PubSubNumPat_Call) Run(run func(ctx context.Context)) *MockUniversalClient_PubSubNumPat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_PubSubNumPat_Call) Return(_a0 *IntCmd) *MockUniversalClient_PubSubNumPat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PubSubNumPat_Call) RunAndReturn(run func(context.Context) *IntCmd) *MockUniversalClient_PubSubNumPat_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubNumSub provides a mock function with given fields: ctx, channels
func (_m *MockUniversalClient) PubSubNumSub(ctx context.Context, channels ...string) *MapStringIntCmd {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PubSubNumSub")
	}

	var r0 *MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *MapStringIntCmd); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringIntCmd)
		}
	}

	return r0
}

// MockUniversalClient_PubSubNumSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubNumSub'
type MockUniversalClient_PubSubNumSub_Call struct {
	*mock.Call
}

// PubSubNumSub is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *MockUniversalClient_Expecter) PubSubNumSub(ctx interface{}, channels ...interface{}) *MockUniversalClient_PubSubNumSub_Call {
	return &MockUniversalClient_PubSubNumSub_Call{Call: _e.mock.On("PubSubNumSub",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockUniversalClient_PubSubNumSub_Call) Run(run func(ctx context.Context, channels ...string)) *MockUniversalClient_PubSubNumSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_PubSubNumSub_Call) Return(_a0 *MapStringIntCmd) *MockUniversalClient_PubSubNumSub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PubSubNumSub_Call) RunAndReturn(run func(context.Context, ...string) *MapStringIntCmd) *MockUniversalClient_PubSubNumSub_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubShardChannels provides a mock function with given fields: ctx, pattern
func (_m *MockUniversalClient) PubSubShardChannels(ctx context.Context, pattern string) *StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for PubSubShardChannels")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_PubSubShardChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubShardChannels'
type MockUniversalClient_PubSubShardChannels_Call struct {
	*mock.Call
}

// PubSubShardChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - pattern string
func (_e *MockUniversalClient_Expecter) PubSubShardChannels(ctx interface{}, pattern interface{}) *MockUniversalClient_PubSubShardChannels_Call {
	return &MockUniversalClient_PubSubShardChannels_Call{Call: _e.mock.On("PubSubShardChannels", ctx, pattern)}
}

func (_c *MockUniversalClient_PubSubShardChannels_Call) Run(run func(ctx context.Context, pattern string)) *MockUniversalClient_PubSubShardChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_PubSubShardChannels_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_PubSubShardChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PubSubShardChannels_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_PubSubShardChannels_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubShardNumSub provides a mock function with given fields: ctx, channels
func (_m *MockUniversalClient) PubSubShardNumSub(ctx context.Context, channels ...string) *MapStringIntCmd {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PubSubShardNumSub")
	}

	var r0 *MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *MapStringIntCmd); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringIntCmd)
		}
	}

	return r0
}

// MockUniversalClient_PubSubShardNumSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubShardNumSub'
type MockUniversalClient_PubSubShardNumSub_Call struct {
	*mock.Call
}

// PubSubShardNumSub is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *MockUniversalClient_Expecter) PubSubShardNumSub(ctx interface{}, channels ...interface{}) *MockUniversalClient_PubSubShardNumSub_Call {
	return &MockUniversalClient_PubSubShardNumSub_Call{Call: _e.mock.On("PubSubShardNumSub",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockUniversalClient_PubSubShardNumSub_Call) Run(run func(ctx context.Context, channels ...string)) *MockUniversalClient_PubSubShardNumSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_PubSubShardNumSub_Call) Return(_a0 *MapStringIntCmd) *MockUniversalClient_PubSubShardNumSub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_PubSubShardNumSub_Call) RunAndReturn(run func(context.Context, ...string) *MapStringIntCmd) *MockUniversalClient_PubSubShardNumSub_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, channel, message
func (_m *MockUniversalClient) Publish(ctx context.Context, channel string, message interface{}) *IntCmd {
	ret := _m.Called(ctx, channel, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *IntCmd); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockUniversalClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - message interface{}
func (_e *MockUniversalClient_Expecter) Publish(ctx interface{}, channel interface{}, message interface{}) *MockUniversalClient_Publish_Call {
	return &MockUniversalClient_Publish_Call{Call: _e.mock.On("Publish", ctx, channel, message)}
}

func (_c *MockUniversalClient_Publish_Call) Run(run func(ctx context.Context, channel string, message interface{})) *MockUniversalClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_Publish_Call) Return(_a0 *IntCmd) *MockUniversalClient_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Publish_Call) RunAndReturn(run func(context.Context, string, interface{}) *IntCmd) *MockUniversalClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Quit provides a mock function with given fields: ctx
func (_m *MockUniversalClient) Quit(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Quit")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Quit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quit'
type MockUniversalClient_Quit_Call struct {
	*mock.Call
}

// Quit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) Quit(ctx interface{}) *MockUniversalClient_Quit_Call {
	return &MockUniversalClient_Quit_Call{Call: _e.mock.On("Quit", ctx)}
}

func (_c *MockUniversalClient_Quit_Call) Run(run func(ctx context.Context)) *MockUniversalClient_Quit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_Quit_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Quit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Quit_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_Quit_Call {
	_c.Call.Return(run)
	return _c
}

// RPop provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) RPop(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for RPop")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_RPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPop'
type MockUniversalClient_RPop_Call struct {
	*mock.Call
}

// RPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) RPop(ctx interface{}, key interface{}) *MockUniversalClient_RPop_Call {
	return &MockUniversalClient_RPop_Call{Call: _e.mock.On("RPop", ctx, key)}
}

func (_c *MockUniversalClient_RPop_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_RPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_RPop_Call) Return(_a0 *StringCmd) *MockUniversalClient_RPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RPop_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_RPop_Call {
	_c.Call.Return(run)
	return _c
}

// RPopCount provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) RPopCount(ctx context.Context, key string, count int) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for RPopCount")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_RPopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPopCount'
type MockUniversalClient_RPopCount_Call struct {
	*mock.Call
}

// RPopCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) RPopCount(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_RPopCount_Call {
	return &MockUniversalClient_RPopCount_Call{Call: _e.mock.On("RPopCount", ctx, key, count)}
}

func (_c *MockUniversalClient_RPopCount_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_RPopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_RPopCount_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_RPopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RPopCount_Call) RunAndReturn(run func(context.Context, string, int) *StringSliceCmd) *MockUniversalClient_RPopCount_Call {
	_c.Call.Return(run)
	return _c
}

// RPopLPush provides a mock function with given fields: ctx, source, destination
func (_m *MockUniversalClient) RPopLPush(ctx context.Context, source string, destination string) *StringCmd {
	ret := _m.Called(ctx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for RPopLPush")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StringCmd); ok {
		r0 = rf(ctx, source, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_RPopLPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPopLPush'
type MockUniversalClient_RPopLPush_Call struct {
	*mock.Call
}

// RPopLPush is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
func (_e *MockUniversalClient_Expecter) RPopLPush(ctx interface{}, source interface{}, destination interface{}) *MockUniversalClient_RPopLPush_Call {
	return &MockUniversalClient_RPopLPush_Call{Call: _e.mock.On("RPopLPush", ctx, source, destination)}
}

func (_c *MockUniversalClient_RPopLPush_Call) Run(run func(ctx context.Context, source string, destination string)) *MockUniversalClient_RPopLPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_RPopLPush_Call) Return(_a0 *StringCmd) *MockUniversalClient_RPopLPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RPopLPush_Call) RunAndReturn(run func(context.Context, string, string) *StringCmd) *MockUniversalClient_RPopLPush_Call {
	_c.Call.Return(run)
	return _c
}

// RPush provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) RPush(ctx context.Context, key string, values ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RPush")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_RPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPush'
type MockUniversalClient_RPush_Call struct {
	*mock.Call
}

// RPush is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) RPush(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_RPush_Call {
	return &MockUniversalClient_RPush_Call{Call: _e.mock.On("RPush",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_RPush_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_RPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_RPush_Call) Return(_a0 *IntCmd) *MockUniversalClient_RPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RPush_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_RPush_Call {
	_c.Call.Return(run)
	return _c
}

// RPushX provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) RPushX(ctx context.Context, key string, values ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RPushX")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_RPushX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPushX'
type MockUniversalClient_RPushX_Call struct {
	*mock.Call
}

// RPushX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *MockUniversalClient_Expecter) RPushX(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_RPushX_Call {
	return &MockUniversalClient_RPushX_Call{Call: _e.mock.On("RPushX",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_RPushX_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockUniversalClient_RPushX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_RPushX_Call) Return(_a0 *IntCmd) *MockUniversalClient_RPushX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RPushX_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_RPushX_Call {
	_c.Call.Return(run)
	return _c
}

// RandomKey provides a mock function with given fields: ctx
func (_m *MockUniversalClient) RandomKey(ctx context.Context) *StringCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RandomKey")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_RandomKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomKey'
type MockUniversalClient_RandomKey_Call struct {
	*mock.Call
}

// RandomKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) RandomKey(ctx interface{}) *MockUniversalClient_RandomKey_Call {
	return &MockUniversalClient_RandomKey_Call{Call: _e.mock.On("RandomKey", ctx)}
}

func (_c *MockUniversalClient_RandomKey_Call) Run(run func(ctx context.Context)) *MockUniversalClient_RandomKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_RandomKey_Call) Return(_a0 *StringCmd) *MockUniversalClient_RandomKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RandomKey_Call) RunAndReturn(run func(context.Context) *StringCmd) *MockUniversalClient_RandomKey_Call {
	_c.Call.Return(run)
	return _c
}

// ReadOnly provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ReadOnly(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadOnly")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOnly'
type MockUniversalClient_ReadOnly_Call struct {
	*mock.Call
}

// ReadOnly is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ReadOnly(ctx interface{}) *MockUniversalClient_ReadOnly_Call {
	return &MockUniversalClient_ReadOnly_Call{Call: _e.mock.On("ReadOnly", ctx)}
}

func (_c *MockUniversalClient_ReadOnly_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ReadOnly_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ReadOnly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ReadOnly_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWrite provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ReadWrite(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadWrite")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ReadWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWrite'
type MockUniversalClient_ReadWrite_Call struct {
	*mock.Call
}

// ReadWrite is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ReadWrite(ctx interface{}) *MockUniversalClient_ReadWrite_Call {
	return &MockUniversalClient_ReadWrite_Call{Call: _e.mock.On("ReadWrite", ctx)}
}

func (_c *MockUniversalClient_ReadWrite_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ReadWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ReadWrite_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ReadWrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ReadWrite_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ReadWrite_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: ctx, key, newkey
func (_m *MockUniversalClient) Rename(ctx context.Context, key string, newkey string) *StatusCmd {
	ret := _m.Called(ctx, key, newkey)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, key, newkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type MockUniversalClient_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - newkey string
func (_e *MockUniversalClient_Expecter) Rename(ctx interface{}, key interface{}, newkey interface{}) *MockUniversalClient_Rename_Call {
	return &MockUniversalClient_Rename_Call{Call: _e.mock.On("Rename", ctx, key, newkey)}
}

func (_c *MockUniversalClient_Rename_Call) Run(run func(ctx context.Context, key string, newkey string)) *MockUniversalClient_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Rename_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Rename_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// RenameNX provides a mock function with given fields: ctx, key, newkey
func (_m *MockUniversalClient) RenameNX(ctx context.Context, key string, newkey string) *BoolCmd {
	ret := _m.Called(ctx, key, newkey)

	if len(ret) == 0 {
		panic("no return value specified for RenameNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *BoolCmd); ok {
		r0 = rf(ctx, key, newkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_RenameNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameNX'
type MockUniversalClient_RenameNX_Call struct {
	*mock.Call
}

// RenameNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - newkey string
func (_e *MockUniversalClient_Expecter) RenameNX(ctx interface{}, key interface{}, newkey interface{}) *MockUniversalClient_RenameNX_Call {
	return &MockUniversalClient_RenameNX_Call{Call: _e.mock.On("RenameNX", ctx, key, newkey)}
}

func (_c *MockUniversalClient_RenameNX_Call) Run(run func(ctx context.Context, key string, newkey string)) *MockUniversalClient_RenameNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_RenameNX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_RenameNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RenameNX_Call) RunAndReturn(run func(context.Context, string, string) *BoolCmd) *MockUniversalClient_RenameNX_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: ctx, key, ttl, value
func (_m *MockUniversalClient) Restore(ctx context.Context, key string, ttl time.Duration, value string) *StatusCmd {
	ret := _m.Called(ctx, key, ttl, value)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *StatusCmd); ok {
		r0 = rf(ctx, key, ttl, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockUniversalClient_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl time.Duration
//   - value string
func (_e *MockUniversalClient_Expecter) Restore(ctx interface{}, key interface{}, ttl interface{}, value interface{}) *MockUniversalClient_Restore_Call {
	return &MockUniversalClient_Restore_Call{Call: _e.mock.On("Restore", ctx, key, ttl, value)}
}

func (_c *MockUniversalClient_Restore_Call) Run(run func(ctx context.Context, key string, ttl time.Duration, value string)) *MockUniversalClient_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Restore_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Restore_Call) RunAndReturn(run func(context.Context, string, time.Duration, string) *StatusCmd) *MockUniversalClient_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreReplace provides a mock function with given fields: ctx, key, ttl, value
func (_m *MockUniversalClient) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *StatusCmd {
	ret := _m.Called(ctx, key, ttl, value)

	if len(ret) == 0 {
		panic("no return value specified for RestoreReplace")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *StatusCmd); ok {
		r0 = rf(ctx, key, ttl, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_RestoreReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreReplace'
type MockUniversalClient_RestoreReplace_Call struct {
	*mock.Call
}

// RestoreReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl time.Duration
//   - value string
func (_e *MockUniversalClient_Expecter) RestoreReplace(ctx interface{}, key interface{}, ttl interface{}, value interface{}) *MockUniversalClient_RestoreReplace_Call {
	return &MockUniversalClient_RestoreReplace_Call{Call: _e.mock.On("RestoreReplace", ctx, key, ttl, value)}
}

func (_c *MockUniversalClient_RestoreReplace_Call) Run(run func(ctx context.Context, key string, ttl time.Duration, value string)) *MockUniversalClient_RestoreReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_RestoreReplace_Call) Return(_a0 *StatusCmd) *MockUniversalClient_RestoreReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_RestoreReplace_Call) RunAndReturn(run func(context.Context, string, time.Duration, string) *StatusCmd) *MockUniversalClient_RestoreReplace_Call {
	_c.Call.Return(run)
	return _c
}

// SAdd provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) SAdd(ctx context.Context, key string, members ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SAdd'
type MockUniversalClient_SAdd_Call struct {
	*mock.Call
}

// SAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *MockUniversalClient_Expecter) SAdd(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_SAdd_Call {
	return &MockUniversalClient_SAdd_Call{Call: _e.mock.On("SAdd",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_SAdd_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *MockUniversalClient_SAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SAdd_Call) Return(_a0 *IntCmd) *MockUniversalClient_SAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_SAdd_Call {
	_c.Call.Return(run)
	return _c
}

// SCard provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) SCard(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SCard'
type MockUniversalClient_SCard_Call struct {
	*mock.Call
}

// SCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) SCard(ctx interface{}, key interface{}) *MockUniversalClient_SCard_Call {
	return &MockUniversalClient_SCard_Call{Call: _e.mock.On("SCard", ctx, key)}
}

func (_c *MockUniversalClient_SCard_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_SCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SCard_Call) Return(_a0 *IntCmd) *MockUniversalClient_SCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SCard_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_SCard_Call {
	_c.Call.Return(run)
	return _c
}

// SDiff provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) SDiff(ctx context.Context, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SDiff")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SDiff'
type MockUniversalClient_SDiff_Call struct {
	*mock.Call
}

// SDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SDiff(ctx interface{}, keys ...interface{}) *MockUniversalClient_SDiff_Call {
	return &MockUniversalClient_SDiff_Call{Call: _e.mock.On("SDiff",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_SDiff_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_SDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SDiff_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SDiff_Call) RunAndReturn(run func(context.Context, ...string) *StringSliceCmd) *MockUniversalClient_SDiff_Call {
	_c.Call.Return(run)
	return _c
}

// SDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *MockUniversalClient) SDiffStore(ctx context.Context, destination string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SDiffStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SDiffStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SDiffStore'
type MockUniversalClient_SDiffStore_Call struct {
	*mock.Call
}

// SDiffStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SDiffStore(ctx interface{}, destination interface{}, keys ...interface{}) *MockUniversalClient_SDiffStore_Call {
	return &MockUniversalClient_SDiffStore_Call{Call: _e.mock.On("SDiffStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *MockUniversalClient_SDiffStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *MockUniversalClient_SDiffStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SDiffStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_SDiffStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SDiffStore_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_SDiffStore_Call {
	_c.Call.Return(run)
	return _c
}

// SInter provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) SInter(ctx context.Context, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SInter")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SInter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SInter'
type MockUniversalClient_SInter_Call struct {
	*mock.Call
}

// SInter is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SInter(ctx interface{}, keys ...interface{}) *MockUniversalClient_SInter_Call {
	return &MockUniversalClient_SInter_Call{Call: _e.mock.On("SInter",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_SInter_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_SInter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SInter_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SInter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SInter_Call) RunAndReturn(run func(context.Context, ...string) *StringSliceCmd) *MockUniversalClient_SInter_Call {
	_c.Call.Return(run)
	return _c
}

// SInterCard provides a mock function with given fields: ctx, limit, keys
func (_m *MockUniversalClient) SInterCard(ctx context.Context, limit int64, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SInterCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) *IntCmd); ok {
		r0 = rf(ctx, limit, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SInterCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SInterCard'
type MockUniversalClient_SInterCard_Call struct {
	*mock.Call
}

// SInterCard is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SInterCard(ctx interface{}, limit interface{}, keys ...interface{}) *MockUniversalClient_SInterCard_Call {
	return &MockUniversalClient_SInterCard_Call{Call: _e.mock.On("SInterCard",
		append([]interface{}{ctx, limit}, keys...)...)}
}

func (_c *MockUniversalClient_SInterCard_Call) Run(run func(ctx context.Context, limit int64, keys ...string)) *MockUniversalClient_SInterCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SInterCard_Call) Return(_a0 *IntCmd) *MockUniversalClient_SInterCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SInterCard_Call) RunAndReturn(run func(context.Context, int64, ...string) *IntCmd) *MockUniversalClient_SInterCard_Call {
	_c.Call.Return(run)
	return _c
}

// SInterStore provides a mock function with given fields: ctx, destination, keys
func (_m *MockUniversalClient) SInterStore(ctx context.Context, destination string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SInterStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SInterStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SInterStore'
type MockUniversalClient_SInterStore_Call struct {
	*mock.Call
}

// SInterStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SInterStore(ctx interface{}, destination interface{}, keys ...interface{}) *MockUniversalClient_SInterStore_Call {
	return &MockUniversalClient_SInterStore_Call{Call: _e.mock.On("SInterStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *MockUniversalClient_SInterStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *MockUniversalClient_SInterStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SInterStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_SInterStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SInterStore_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_SInterStore_Call {
	_c.Call.Return(run)
	return _c
}

// SIsMember provides a mock function with given fields: ctx, key, member
func (_m *MockUniversalClient) SIsMember(ctx context.Context, key string, member interface{}) *BoolCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for SIsMember")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_SIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SIsMember'
type MockUniversalClient_SIsMember_Call struct {
	*mock.Call
}

// SIsMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member interface{}
func (_e *MockUniversalClient_Expecter) SIsMember(ctx interface{}, key interface{}, member interface{}) *MockUniversalClient_SIsMember_Call {
	return &MockUniversalClient_SIsMember_Call{Call: _e.mock.On("SIsMember", ctx, key, member)}
}

func (_c *MockUniversalClient_SIsMember_Call) Run(run func(ctx context.Context, key string, member interface{})) *MockUniversalClient_SIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_SIsMember_Call) Return(_a0 *BoolCmd) *MockUniversalClient_SIsMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SIsMember_Call) RunAndReturn(run func(context.Context, string, interface{}) *BoolCmd) *MockUniversalClient_SIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// SMIsMember provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) SMIsMember(ctx context.Context, key string, members ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SMIsMember")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SMIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMIsMember'
type MockUniversalClient_SMIsMember_Call struct {
	*mock.Call
}

// SMIsMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *MockUniversalClient_Expecter) SMIsMember(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_SMIsMember_Call {
	return &MockUniversalClient_SMIsMember_Call{Call: _e.mock.On("SMIsMember",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_SMIsMember_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *MockUniversalClient_SMIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SMIsMember_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_SMIsMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SMIsMember_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockUniversalClient_SMIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// SMembers provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) SMembers(ctx context.Context, key string) *StringSliceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SMembers")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMembers'
type MockUniversalClient_SMembers_Call struct {
	*mock.Call
}

// SMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) SMembers(ctx interface{}, key interface{}) *MockUniversalClient_SMembers_Call {
	return &MockUniversalClient_SMembers_Call{Call: _e.mock.On("SMembers", ctx, key)}
}

func (_c *MockUniversalClient_SMembers_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_SMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SMembers_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SMembers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SMembers_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_SMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SMembersMap provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) SMembersMap(ctx context.Context, key string) *StringStructMapCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SMembersMap")
	}

	var r0 *StringStructMapCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringStructMapCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringStructMapCmd)
		}
	}

	return r0
}

// MockUniversalClient_SMembersMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMembersMap'
type MockUniversalClient_SMembersMap_Call struct {
	*mock.Call
}

// SMembersMap is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) SMembersMap(ctx interface{}, key interface{}) *MockUniversalClient_SMembersMap_Call {
	return &MockUniversalClient_SMembersMap_Call{Call: _e.mock.On("SMembersMap", ctx, key)}
}

func (_c *MockUniversalClient_SMembersMap_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_SMembersMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SMembersMap_Call) Return(_a0 *StringStructMapCmd) *MockUniversalClient_SMembersMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SMembersMap_Call) RunAndReturn(run func(context.Context, string) *StringStructMapCmd) *MockUniversalClient_SMembersMap_Call {
	_c.Call.Return(run)
	return _c
}

// SMove provides a mock function with given fields: ctx, source, destination, member
func (_m *MockUniversalClient) SMove(ctx context.Context, source string, destination string, member interface{}) *BoolCmd {
	ret := _m.Called(ctx, source, destination, member)

	if len(ret) == 0 {
		panic("no return value specified for SMove")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *BoolCmd); ok {
		r0 = rf(ctx, source, destination, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_SMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMove'
type MockUniversalClient_SMove_Call struct {
	*mock.Call
}

// SMove is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - member interface{}
func (_e *MockUniversalClient_Expecter) SMove(ctx interface{}, source interface{}, destination interface{}, member interface{}) *MockUniversalClient_SMove_Call {
	return &MockUniversalClient_SMove_Call{Call: _e.mock.On("SMove", ctx, source, destination, member)}
}

func (_c *MockUniversalClient_SMove_Call) Run(run func(ctx context.Context, source string, destination string, member interface{})) *MockUniversalClient_SMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_SMove_Call) Return(_a0 *BoolCmd) *MockUniversalClient_SMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SMove_Call) RunAndReturn(run func(context.Context, string, string, interface{}) *BoolCmd) *MockUniversalClient_SMove_Call {
	_c.Call.Return(run)
	return _c
}

// SPop provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) SPop(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SPop")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_SPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SPop'
type MockUniversalClient_SPop_Call struct {
	*mock.Call
}

// SPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) SPop(ctx interface{}, key interface{}) *MockUniversalClient_SPop_Call {
	return &MockUniversalClient_SPop_Call{Call: _e.mock.On("SPop", ctx, key)}
}

func (_c *MockUniversalClient_SPop_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_SPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SPop_Call) Return(_a0 *StringCmd) *MockUniversalClient_SPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SPop_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_SPop_Call {
	_c.Call.Return(run)
	return _c
}

// SPopN provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) SPopN(ctx context.Context, key string, count int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for SPopN")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SPopN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SPopN'
type MockUniversalClient_SPopN_Call struct {
	*mock.Call
}

// SPopN is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int64
func (_e *MockUniversalClient_Expecter) SPopN(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_SPopN_Call {
	return &MockUniversalClient_SPopN_Call{Call: _e.mock.On("SPopN", ctx, key, count)}
}

func (_c *MockUniversalClient_SPopN_Call) Run(run func(ctx context.Context, key string, count int64)) *MockUniversalClient_SPopN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_SPopN_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SPopN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SPopN_Call) RunAndReturn(run func(context.Context, string, int64) *StringSliceCmd) *MockUniversalClient_SPopN_Call {
	_c.Call.Return(run)
	return _c
}

// SPublish provides a mock function with given fields: ctx, channel, message
func (_m *MockUniversalClient) SPublish(ctx context.Context, channel string, message interface{}) *IntCmd {
	ret := _m.Called(ctx, channel, message)

	if len(ret) == 0 {
		panic("no return value specified for SPublish")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *IntCmd); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SPublish'
type MockUniversalClient_SPublish_Call struct {
	*mock.Call
}

// SPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - message interface{}
func (_e *MockUniversalClient_Expecter) SPublish(ctx interface{}, channel interface{}, message interface{}) *MockUniversalClient_SPublish_Call {
	return &MockUniversalClient_SPublish_Call{Call: _e.mock.On("SPublish", ctx, channel, message)}
}

func (_c *MockUniversalClient_SPublish_Call) Run(run func(ctx context.Context, channel string, message interface{})) *MockUniversalClient_SPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_SPublish_Call) Return(_a0 *IntCmd) *MockUniversalClient_SPublish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SPublish_Call) RunAndReturn(run func(context.Context, string, interface{}) *IntCmd) *MockUniversalClient_SPublish_Call {
	_c.Call.Return(run)
	return _c
}

// SRandMember provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) SRandMember(ctx context.Context, key string) *StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SRandMember")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_SRandMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRandMember'
type MockUniversalClient_SRandMember_Call struct {
	*mock.Call
}

// SRandMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) SRandMember(ctx interface{}, key interface{}) *MockUniversalClient_SRandMember_Call {
	return &MockUniversalClient_SRandMember_Call{Call: _e.mock.On("SRandMember", ctx, key)}
}

func (_c *MockUniversalClient_SRandMember_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_SRandMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SRandMember_Call) Return(_a0 *StringCmd) *MockUniversalClient_SRandMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SRandMember_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_SRandMember_Call {
	_c.Call.Return(run)
	return _c
}

// SRandMemberN provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) SRandMemberN(ctx context.Context, key string, count int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for SRandMemberN")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SRandMemberN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRandMemberN'
type MockUniversalClient_SRandMemberN_Call struct {
	*mock.Call
}

// SRandMemberN is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int64
func (_e *MockUniversalClient_Expecter) SRandMemberN(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_SRandMemberN_Call {
	return &MockUniversalClient_SRandMemberN_Call{Call: _e.mock.On("SRandMemberN", ctx, key, count)}
}

func (_c *MockUniversalClient_SRandMemberN_Call) Run(run func(ctx context.Context, key string, count int64)) *MockUniversalClient_SRandMemberN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_SRandMemberN_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SRandMemberN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SRandMemberN_Call) RunAndReturn(run func(context.Context, string, int64) *StringSliceCmd) *MockUniversalClient_SRandMemberN_Call {
	_c.Call.Return(run)
	return _c
}

// SRem provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) SRem(ctx context.Context, key string, members ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SRem")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRem'
type MockUniversalClient_SRem_Call struct {
	*mock.Call
}

// SRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *MockUniversalClient_Expecter) SRem(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_SRem_Call {
	return &MockUniversalClient_SRem_Call{Call: _e.mock.On("SRem",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_SRem_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *MockUniversalClient_SRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SRem_Call) Return(_a0 *IntCmd) *MockUniversalClient_SRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SRem_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_SRem_Call {
	_c.Call.Return(run)
	return _c
}

// SScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *MockUniversalClient) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for SScan")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockUniversalClient_SScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SScan'
type MockUniversalClient_SScan_Call struct {
	*mock.Call
}

// SScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *MockUniversalClient_Expecter) SScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *MockUniversalClient_SScan_Call {
	return &MockUniversalClient_SScan_Call{Call: _e.mock.On("SScan", ctx, key, cursor, match, count)}
}

func (_c *MockUniversalClient_SScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *MockUniversalClient_SScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_SScan_Call) Return(_a0 *ScanCmd) *MockUniversalClient_SScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *ScanCmd) *MockUniversalClient_SScan_Call {
	_c.Call.Return(run)
	return _c
}

// SSubscribe provides a mock function with given fields: ctx, channels
func (_m *MockUniversalClient) SSubscribe(ctx context.Context, channels ...string) *PubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSubscribe")
	}

	var r0 *PubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *PubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PubSub)
		}
	}

	return r0
}

// MockUniversalClient_SSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSubscribe'
type MockUniversalClient_SSubscribe_Call struct {
	*mock.Call
}

// SSubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *MockUniversalClient_Expecter) SSubscribe(ctx interface{}, channels ...interface{}) *MockUniversalClient_SSubscribe_Call {
	return &MockUniversalClient_SSubscribe_Call{Call: _e.mock.On("SSubscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockUniversalClient_SSubscribe_Call) Run(run func(ctx context.Context, channels ...string)) *MockUniversalClient_SSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SSubscribe_Call) Return(_a0 *PubSub) *MockUniversalClient_SSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SSubscribe_Call) RunAndReturn(run func(context.Context, ...string) *PubSub) *MockUniversalClient_SSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SUnion provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) SUnion(ctx context.Context, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SUnion")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SUnion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SUnion'
type MockUniversalClient_SUnion_Call struct {
	*mock.Call
}

// SUnion is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SUnion(ctx interface{}, keys ...interface{}) *MockUniversalClient_SUnion_Call {
	return &MockUniversalClient_SUnion_Call{Call: _e.mock.On("SUnion",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_SUnion_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_SUnion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SUnion_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SUnion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SUnion_Call) RunAndReturn(run func(context.Context, ...string) *StringSliceCmd) *MockUniversalClient_SUnion_Call {
	_c.Call.Return(run)
	return _c
}

// SUnionStore provides a mock function with given fields: ctx, destination, keys
func (_m *MockUniversalClient) SUnionStore(ctx context.Context, destination string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SUnionStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SUnionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SUnionStore'
type MockUniversalClient_SUnionStore_Call struct {
	*mock.Call
}

// SUnionStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) SUnionStore(ctx interface{}, destination interface{}, keys ...interface{}) *MockUniversalClient_SUnionStore_Call {
	return &MockUniversalClient_SUnionStore_Call{Call: _e.mock.On("SUnionStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *MockUniversalClient_SUnionStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *MockUniversalClient_SUnionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_SUnionStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_SUnionStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SUnionStore_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_SUnionStore_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx
func (_m *MockUniversalClient) Save(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUniversalClient_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) Save(ctx interface{}) *MockUniversalClient_Save_Call {
	return &MockUniversalClient_Save_Call{Call: _e.mock.On("Save", ctx)}
}

func (_c *MockUniversalClient_Save_Call) Run(run func(ctx context.Context)) *MockUniversalClient_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_Save_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Save_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: ctx, cursor, match, count
func (_m *MockUniversalClient) Scan(ctx context.Context, cursor uint64, match string, count int64) *ScanCmd {
	ret := _m.Called(ctx, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64) *ScanCmd); ok {
		r0 = rf(ctx, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockUniversalClient_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockUniversalClient_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor uint64
//   - match string
//   - count int64
func (_e *MockUniversalClient_Expecter) Scan(ctx interface{}, cursor interface{}, match interface{}, count interface{}) *MockUniversalClient_Scan_Call {
	return &MockUniversalClient_Scan_Call{Call: _e.mock.On("Scan", ctx, cursor, match, count)}
}

func (_c *MockUniversalClient_Scan_Call) Run(run func(ctx context.Context, cursor uint64, match string, count int64)) *MockUniversalClient_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_Scan_Call) Return(_a0 *ScanCmd) *MockUniversalClient_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Scan_Call) RunAndReturn(run func(context.Context, uint64, string, int64) *ScanCmd) *MockUniversalClient_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// ScanType provides a mock function with given fields: ctx, cursor, match, count, keyType
func (_m *MockUniversalClient) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *ScanCmd {
	ret := _m.Called(ctx, cursor, match, count, keyType)

	if len(ret) == 0 {
		panic("no return value specified for ScanType")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64, string) *ScanCmd); ok {
		r0 = rf(ctx, cursor, match, count, keyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockUniversalClient_ScanType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanType'
type MockUniversalClient_ScanType_Call struct {
	*mock.Call
}

// ScanType is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor uint64
//   - match string
//   - count int64
//   - keyType string
func (_e *MockUniversalClient_Expecter) ScanType(ctx interface{}, cursor interface{}, match interface{}, count interface{}, keyType interface{}) *MockUniversalClient_ScanType_Call {
	return &MockUniversalClient_ScanType_Call{Call: _e.mock.On("ScanType", ctx, cursor, match, count, keyType)}
}

func (_c *MockUniversalClient_ScanType_Call) Run(run func(ctx context.Context, cursor uint64, match string, count int64, keyType string)) *MockUniversalClient_ScanType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string), args[3].(int64), args[4].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ScanType_Call) Return(_a0 *ScanCmd) *MockUniversalClient_ScanType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ScanType_Call) RunAndReturn(run func(context.Context, uint64, string, int64, string) *ScanCmd) *MockUniversalClient_ScanType_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptExists provides a mock function with given fields: ctx, hashes
func (_m *MockUniversalClient) ScriptExists(ctx context.Context, hashes ...string) *BoolSliceCmd {
	_va := make([]interface{}, len(hashes))
	for _i := range hashes {
		_va[_i] = hashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScriptExists")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *BoolSliceCmd); ok {
		r0 = rf(ctx, hashes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ScriptExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptExists'
type MockUniversalClient_ScriptExists_Call struct {
	*mock.Call
}

// ScriptExists is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes ...string
func (_e *MockUniversalClient_Expecter) ScriptExists(ctx interface{}, hashes ...interface{}) *MockUniversalClient_ScriptExists_Call {
	return &MockUniversalClient_ScriptExists_Call{Call: _e.mock.On("ScriptExists",
		append([]interface{}{ctx}, hashes...)...)}
}

func (_c *MockUniversalClient_ScriptExists_Call) Run(run func(ctx context.Context, hashes ...string)) *MockUniversalClient_ScriptExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ScriptExists_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_ScriptExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ScriptExists_Call) RunAndReturn(run func(context.Context, ...string) *BoolSliceCmd) *MockUniversalClient_ScriptExists_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptFlush provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ScriptFlush(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ScriptFlush")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ScriptFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptFlush'
type MockUniversalClient_ScriptFlush_Call struct {
	*mock.Call
}

// ScriptFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ScriptFlush(ctx interface{}) *MockUniversalClient_ScriptFlush_Call {
	return &MockUniversalClient_ScriptFlush_Call{Call: _e.mock.On("ScriptFlush", ctx)}
}

func (_c *MockUniversalClient_ScriptFlush_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ScriptFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ScriptFlush_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ScriptFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ScriptFlush_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ScriptFlush_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptKill provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ScriptKill(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ScriptKill")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ScriptKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptKill'
type MockUniversalClient_ScriptKill_Call struct {
	*mock.Call
}

// ScriptKill is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ScriptKill(ctx interface{}) *MockUniversalClient_ScriptKill_Call {
	return &MockUniversalClient_ScriptKill_Call{Call: _e.mock.On("ScriptKill", ctx)}
}

func (_c *MockUniversalClient_ScriptKill_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ScriptKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ScriptKill_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ScriptKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ScriptKill_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ScriptKill_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptLoad provides a mock function with given fields: ctx, script
func (_m *MockUniversalClient) ScriptLoad(ctx context.Context, script string) *StringCmd {
	ret := _m.Called(ctx, script)

	if len(ret) == 0 {
		panic("no return value specified for ScriptLoad")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringCmd); ok {
		r0 = rf(ctx, script)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_ScriptLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptLoad'
type MockUniversalClient_ScriptLoad_Call struct {
	*mock.Call
}

// ScriptLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
func (_e *MockUniversalClient_Expecter) ScriptLoad(ctx interface{}, script interface{}) *MockUniversalClient_ScriptLoad_Call {
	return &MockUniversalClient_ScriptLoad_Call{Call: _e.mock.On("ScriptLoad", ctx, script)}
}

func (_c *MockUniversalClient_ScriptLoad_Call) Run(run func(ctx context.Context, script string)) *MockUniversalClient_ScriptLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ScriptLoad_Call) Return(_a0 *StringCmd) *MockUniversalClient_ScriptLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ScriptLoad_Call) RunAndReturn(run func(context.Context, string) *StringCmd) *MockUniversalClient_ScriptLoad_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *MockUniversalClient) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockUniversalClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockUniversalClient_Set_Call {
	return &MockUniversalClient_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *MockUniversalClient_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *MockUniversalClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_Set_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *StatusCmd) *MockUniversalClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetArgs provides a mock function with given fields: ctx, key, value, a
func (_m *MockUniversalClient) SetArgs(ctx context.Context, key string, value interface{}, a SetArgs) *StatusCmd {
	ret := _m.Called(ctx, key, value, a)

	if len(ret) == 0 {
		panic("no return value specified for SetArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, SetArgs) *StatusCmd); ok {
		r0 = rf(ctx, key, value, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_SetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetArgs'
type MockUniversalClient_SetArgs_Call struct {
	*mock.Call
}

// SetArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - a SetArgs
func (_e *MockUniversalClient_Expecter) SetArgs(ctx interface{}, key interface{}, value interface{}, a interface{}) *MockUniversalClient_SetArgs_Call {
	return &MockUniversalClient_SetArgs_Call{Call: _e.mock.On("SetArgs", ctx, key, value, a)}
}

func (_c *MockUniversalClient_SetArgs_Call) Run(run func(ctx context.Context, key string, value interface{}, a SetArgs)) *MockUniversalClient_SetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(SetArgs))
	})
	return _c
}

func (_c *MockUniversalClient_SetArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_SetArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SetArgs_Call) RunAndReturn(run func(context.Context, string, interface{}, SetArgs) *StatusCmd) *MockUniversalClient_SetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// SetBit provides a mock function with given fields: ctx, key, offset, value
func (_m *MockUniversalClient) SetBit(ctx context.Context, key string, offset int64, value int) *IntCmd {
	ret := _m.Called(ctx, key, offset, value)

	if len(ret) == 0 {
		panic("no return value specified for SetBit")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int) *IntCmd); ok {
		r0 = rf(ctx, key, offset, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SetBit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBit'
type MockUniversalClient_SetBit_Call struct {
	*mock.Call
}

// SetBit is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - offset int64
//   - value int
func (_e *MockUniversalClient_Expecter) SetBit(ctx interface{}, key interface{}, offset interface{}, value interface{}) *MockUniversalClient_SetBit_Call {
	return &MockUniversalClient_SetBit_Call{Call: _e.mock.On("SetBit", ctx, key, offset, value)}
}

func (_c *MockUniversalClient_SetBit_Call) Run(run func(ctx context.Context, key string, offset int64, value int)) *MockUniversalClient_SetBit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_SetBit_Call) Return(_a0 *IntCmd) *MockUniversalClient_SetBit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SetBit_Call) RunAndReturn(run func(context.Context, string, int64, int) *IntCmd) *MockUniversalClient_SetBit_Call {
	_c.Call.Return(run)
	return _c
}

// SetEx provides a mock function with given fields: ctx, key, value, expiration
func (_m *MockUniversalClient) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetEx")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_SetEx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEx'
type MockUniversalClient_SetEx_Call struct {
	*mock.Call
}

// SetEx is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) SetEx(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockUniversalClient_SetEx_Call {
	return &MockUniversalClient_SetEx_Call{Call: _e.mock.On("SetEx", ctx, key, value, expiration)}
}

func (_c *MockUniversalClient_SetEx_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *MockUniversalClient_SetEx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_SetEx_Call) Return(_a0 *StatusCmd) *MockUniversalClient_SetEx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SetEx_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *StatusCmd) *MockUniversalClient_SetEx_Call {
	_c.Call.Return(run)
	return _c
}

// SetNX provides a mock function with given fields: ctx, key, value, expiration
func (_m *MockUniversalClient) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetNX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_SetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNX'
type MockUniversalClient_SetNX_Call struct {
	*mock.Call
}

// SetNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) SetNX(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockUniversalClient_SetNX_Call {
	return &MockUniversalClient_SetNX_Call{Call: _e.mock.On("SetNX", ctx, key, value, expiration)}
}

func (_c *MockUniversalClient_SetNX_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *MockUniversalClient_SetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_SetNX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_SetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SetNX_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *BoolCmd) *MockUniversalClient_SetNX_Call {
	_c.Call.Return(run)
	return _c
}

// SetRange provides a mock function with given fields: ctx, key, offset, value
func (_m *MockUniversalClient) SetRange(ctx context.Context, key string, offset int64, value string) *IntCmd {
	ret := _m.Called(ctx, key, offset, value)

	if len(ret) == 0 {
		panic("no return value specified for SetRange")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) *IntCmd); ok {
		r0 = rf(ctx, key, offset, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SetRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRange'
type MockUniversalClient_SetRange_Call struct {
	*mock.Call
}

// SetRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - offset int64
//   - value string
func (_e *MockUniversalClient_Expecter) SetRange(ctx interface{}, key interface{}, offset interface{}, value interface{}) *MockUniversalClient_SetRange_Call {
	return &MockUniversalClient_SetRange_Call{Call: _e.mock.On("SetRange", ctx, key, offset, value)}
}

func (_c *MockUniversalClient_SetRange_Call) Run(run func(ctx context.Context, key string, offset int64, value string)) *MockUniversalClient_SetRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SetRange_Call) Return(_a0 *IntCmd) *MockUniversalClient_SetRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SetRange_Call) RunAndReturn(run func(context.Context, string, int64, string) *IntCmd) *MockUniversalClient_SetRange_Call {
	_c.Call.Return(run)
	return _c
}

// SetXX provides a mock function with given fields: ctx, key, value, expiration
func (_m *MockUniversalClient) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetXX")
	}

	var r0 *BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolCmd)
		}
	}

	return r0
}

// MockUniversalClient_SetXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetXX'
type MockUniversalClient_SetXX_Call struct {
	*mock.Call
}

// SetXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *MockUniversalClient_Expecter) SetXX(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockUniversalClient_SetXX_Call {
	return &MockUniversalClient_SetXX_Call{Call: _e.mock.On("SetXX", ctx, key, value, expiration)}
}

func (_c *MockUniversalClient_SetXX_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *MockUniversalClient_SetXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUniversalClient_SetXX_Call) Return(_a0 *BoolCmd) *MockUniversalClient_SetXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SetXX_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *BoolCmd) *MockUniversalClient_SetXX_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockUniversalClient) Shutdown(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockUniversalClient_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) Shutdown(ctx interface{}) *MockUniversalClient_Shutdown_Call {
	return &MockUniversalClient_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockUniversalClient_Shutdown_Call) Run(run func(ctx context.Context)) *MockUniversalClient_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_Shutdown_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Shutdown_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownNoSave provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ShutdownNoSave(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownNoSave")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ShutdownNoSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownNoSave'
type MockUniversalClient_ShutdownNoSave_Call struct {
	*mock.Call
}

// ShutdownNoSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ShutdownNoSave(ctx interface{}) *MockUniversalClient_ShutdownNoSave_Call {
	return &MockUniversalClient_ShutdownNoSave_Call{Call: _e.mock.On("ShutdownNoSave", ctx)}
}

func (_c *MockUniversalClient_ShutdownNoSave_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ShutdownNoSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ShutdownNoSave_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ShutdownNoSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ShutdownNoSave_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ShutdownNoSave_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownSave provides a mock function with given fields: ctx
func (_m *MockUniversalClient) ShutdownSave(ctx context.Context) *StatusCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownSave")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_ShutdownSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownSave'
type MockUniversalClient_ShutdownSave_Call struct {
	*mock.Call
}

// ShutdownSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) ShutdownSave(ctx interface{}) *MockUniversalClient_ShutdownSave_Call {
	return &MockUniversalClient_ShutdownSave_Call{Call: _e.mock.On("ShutdownSave", ctx)}
}

func (_c *MockUniversalClient_ShutdownSave_Call) Run(run func(ctx context.Context)) *MockUniversalClient_ShutdownSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_ShutdownSave_Call) Return(_a0 *StatusCmd) *MockUniversalClient_ShutdownSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ShutdownSave_Call) RunAndReturn(run func(context.Context) *StatusCmd) *MockUniversalClient_ShutdownSave_Call {
	_c.Call.Return(run)
	return _c
}

// SlaveOf provides a mock function with given fields: ctx, host, port
func (_m *MockUniversalClient) SlaveOf(ctx context.Context, host string, port string) *StatusCmd {
	ret := _m.Called(ctx, host, port)

	if len(ret) == 0 {
		panic("no return value specified for SlaveOf")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_SlaveOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlaveOf'
type MockUniversalClient_SlaveOf_Call struct {
	*mock.Call
}

// SlaveOf is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
func (_e *MockUniversalClient_Expecter) SlaveOf(ctx interface{}, host interface{}, port interface{}) *MockUniversalClient_SlaveOf_Call {
	return &MockUniversalClient_SlaveOf_Call{Call: _e.mock.On("SlaveOf", ctx, host, port)}
}

func (_c *MockUniversalClient_SlaveOf_Call) Run(run func(ctx context.Context, host string, port string)) *MockUniversalClient_SlaveOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_SlaveOf_Call) Return(_a0 *StatusCmd) *MockUniversalClient_SlaveOf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SlaveOf_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_SlaveOf_Call {
	_c.Call.Return(run)
	return _c
}

// SlowLogGet provides a mock function with given fields: ctx, num
func (_m *MockUniversalClient) SlowLogGet(ctx context.Context, num int64) *SlowLogCmd {
	ret := _m.Called(ctx, num)

	if len(ret) == 0 {
		panic("no return value specified for SlowLogGet")
	}

	var r0 *SlowLogCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *SlowLogCmd); ok {
		r0 = rf(ctx, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SlowLogCmd)
		}
	}

	return r0
}

// MockUniversalClient_SlowLogGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlowLogGet'
type MockUniversalClient_SlowLogGet_Call struct {
	*mock.Call
}

// SlowLogGet is a helper method to define mock.On call
//   - ctx context.Context
//   - num int64
func (_e *MockUniversalClient_Expecter) SlowLogGet(ctx interface{}, num interface{}) *MockUniversalClient_SlowLogGet_Call {
	return &MockUniversalClient_SlowLogGet_Call{Call: _e.mock.On("SlowLogGet", ctx, num)}
}

func (_c *MockUniversalClient_SlowLogGet_Call) Run(run func(ctx context.Context, num int64)) *MockUniversalClient_SlowLogGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_SlowLogGet_Call) Return(_a0 *SlowLogCmd) *MockUniversalClient_SlowLogGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SlowLogGet_Call) RunAndReturn(run func(context.Context, int64) *SlowLogCmd) *MockUniversalClient_SlowLogGet_Call {
	_c.Call.Return(run)
	return _c
}

// Sort provides a mock function with given fields: ctx, key, sort
func (_m *MockUniversalClient) Sort(ctx context.Context, key string, sort *Sort) *StringSliceCmd {
	ret := _m.Called(ctx, key, sort)

	if len(ret) == 0 {
		panic("no return value specified for Sort")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *Sort) *StringSliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_Sort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sort'
type MockUniversalClient_Sort_Call struct {
	*mock.Call
}

// Sort is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - sort *Sort
func (_e *MockUniversalClient_Expecter) Sort(ctx interface{}, key interface{}, sort interface{}) *MockUniversalClient_Sort_Call {
	return &MockUniversalClient_Sort_Call{Call: _e.mock.On("Sort", ctx, key, sort)}
}

func (_c *MockUniversalClient_Sort_Call) Run(run func(ctx context.Context, key string, sort *Sort)) *MockUniversalClient_Sort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Sort))
	})
	return _c
}

func (_c *MockUniversalClient_Sort_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_Sort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Sort_Call) RunAndReturn(run func(context.Context, string, *Sort) *StringSliceCmd) *MockUniversalClient_Sort_Call {
	_c.Call.Return(run)
	return _c
}

// SortInterfaces provides a mock function with given fields: ctx, key, sort
func (_m *MockUniversalClient) SortInterfaces(ctx context.Context, key string, sort *Sort) *SliceCmd {
	ret := _m.Called(ctx, key, sort)

	if len(ret) == 0 {
		panic("no return value specified for SortInterfaces")
	}

	var r0 *SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *Sort) *SliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SortInterfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortInterfaces'
type MockUniversalClient_SortInterfaces_Call struct {
	*mock.Call
}

// SortInterfaces is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - sort *Sort
func (_e *MockUniversalClient_Expecter) SortInterfaces(ctx interface{}, key interface{}, sort interface{}) *MockUniversalClient_SortInterfaces_Call {
	return &MockUniversalClient_SortInterfaces_Call{Call: _e.mock.On("SortInterfaces", ctx, key, sort)}
}

func (_c *MockUniversalClient_SortInterfaces_Call) Run(run func(ctx context.Context, key string, sort *Sort)) *MockUniversalClient_SortInterfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Sort))
	})
	return _c
}

func (_c *MockUniversalClient_SortInterfaces_Call) Return(_a0 *SliceCmd) *MockUniversalClient_SortInterfaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SortInterfaces_Call) RunAndReturn(run func(context.Context, string, *Sort) *SliceCmd) *MockUniversalClient_SortInterfaces_Call {
	_c.Call.Return(run)
	return _c
}

// SortRO provides a mock function with given fields: ctx, key, sort
func (_m *MockUniversalClient) SortRO(ctx context.Context, key string, sort *Sort) *StringSliceCmd {
	ret := _m.Called(ctx, key, sort)

	if len(ret) == 0 {
		panic("no return value specified for SortRO")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *Sort) *StringSliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_SortRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortRO'
type MockUniversalClient_SortRO_Call struct {
	*mock.Call
}

// SortRO is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - sort *Sort
func (_e *MockUniversalClient_Expecter) SortRO(ctx interface{}, key interface{}, sort interface{}) *MockUniversalClient_SortRO_Call {
	return &MockUniversalClient_SortRO_Call{Call: _e.mock.On("SortRO", ctx, key, sort)}
}

func (_c *MockUniversalClient_SortRO_Call) Run(run func(ctx context.Context, key string, sort *Sort)) *MockUniversalClient_SortRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Sort))
	})
	return _c
}

func (_c *MockUniversalClient_SortRO_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_SortRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SortRO_Call) RunAndReturn(run func(context.Context, string, *Sort) *StringSliceCmd) *MockUniversalClient_SortRO_Call {
	_c.Call.Return(run)
	return _c
}

// SortStore provides a mock function with given fields: ctx, key, store, sort
func (_m *MockUniversalClient) SortStore(ctx context.Context, key string, store string, sort *Sort) *IntCmd {
	ret := _m.Called(ctx, key, store, sort)

	if len(ret) == 0 {
		panic("no return value specified for SortStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *Sort) *IntCmd); ok {
		r0 = rf(ctx, key, store, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_SortStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortStore'
type MockUniversalClient_SortStore_Call struct {
	*mock.Call
}

// SortStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - store string
//   - sort *Sort
func (_e *MockUniversalClient_Expecter) SortStore(ctx interface{}, key interface{}, store interface{}, sort interface{}) *MockUniversalClient_SortStore_Call {
	return &MockUniversalClient_SortStore_Call{Call: _e.mock.On("SortStore", ctx, key, store, sort)}
}

func (_c *MockUniversalClient_SortStore_Call) Run(run func(ctx context.Context, key string, store string, sort *Sort)) *MockUniversalClient_SortStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*Sort))
	})
	return _c
}

func (_c *MockUniversalClient_SortStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_SortStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_SortStore_Call) RunAndReturn(run func(context.Context, string, string, *Sort) *IntCmd) *MockUniversalClient_SortStore_Call {
	_c.Call.Return(run)
	return _c
}

// StrLen provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) StrLen(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for StrLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_StrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StrLen'
type MockUniversalClient_StrLen_Call struct {
	*mock.Call
}

// StrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) StrLen(ctx interface{}, key interface{}) *MockUniversalClient_StrLen_Call {
	return &MockUniversalClient_StrLen_Call{Call: _e.mock.On("StrLen", ctx, key)}
}

func (_c *MockUniversalClient_StrLen_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_StrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_StrLen_Call) Return(_a0 *IntCmd) *MockUniversalClient_StrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_StrLen_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_StrLen_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, channels
func (_m *MockUniversalClient) Subscribe(ctx context.Context, channels ...string) *PubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *PubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *PubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PubSub)
		}
	}

	return r0
}

// MockUniversalClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockUniversalClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *MockUniversalClient_Expecter) Subscribe(ctx interface{}, channels ...interface{}) *MockUniversalClient_Subscribe_Call {
	return &MockUniversalClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockUniversalClient_Subscribe_Call) Run(run func(ctx context.Context, channels ...string)) *MockUniversalClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Subscribe_Call) Return(_a0 *PubSub) *MockUniversalClient_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Subscribe_Call) RunAndReturn(run func(context.Context, ...string) *PubSub) *MockUniversalClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestAdd provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TDigestAdd(ctx context.Context, key string, elements ...float64) *StatusCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestAdd")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *StatusCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestAdd'
type MockUniversalClient_TDigestAdd_Call struct {
	*mock.Call
}

// TDigestAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *MockUniversalClient_Expecter) TDigestAdd(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TDigestAdd_Call {
	return &MockUniversalClient_TDigestAdd_Call{Call: _e.mock.On("TDigestAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TDigestAdd_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *MockUniversalClient_TDigestAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestAdd_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TDigestAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestAdd_Call) RunAndReturn(run func(context.Context, string, ...float64) *StatusCmd) *MockUniversalClient_TDigestAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestByRank provides a mock function with given fields: ctx, key, rank
func (_m *MockUniversalClient) TDigestByRank(ctx context.Context, key string, rank ...uint64) *FloatSliceCmd {
	_va := make([]interface{}, len(rank))
	for _i := range rank {
		_va[_i] = rank[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestByRank")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, rank...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestByRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestByRank'
type MockUniversalClient_TDigestByRank_Call struct {
	*mock.Call
}

// TDigestByRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rank ...uint64
func (_e *MockUniversalClient_Expecter) TDigestByRank(ctx interface{}, key interface{}, rank ...interface{}) *MockUniversalClient_TDigestByRank_Call {
	return &MockUniversalClient_TDigestByRank_Call{Call: _e.mock.On("TDigestByRank",
		append([]interface{}{ctx, key}, rank...)...)}
}

func (_c *MockUniversalClient_TDigestByRank_Call) Run(run func(ctx context.Context, key string, rank ...uint64)) *MockUniversalClient_TDigestByRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestByRank_Call) Return(_a0 *FloatSliceCmd) *MockUniversalClient_TDigestByRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestByRank_Call) RunAndReturn(run func(context.Context, string, ...uint64) *FloatSliceCmd) *MockUniversalClient_TDigestByRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestByRevRank provides a mock function with given fields: ctx, key, rank
func (_m *MockUniversalClient) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *FloatSliceCmd {
	_va := make([]interface{}, len(rank))
	for _i := range rank {
		_va[_i] = rank[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestByRevRank")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, rank...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestByRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestByRevRank'
type MockUniversalClient_TDigestByRevRank_Call struct {
	*mock.Call
}

// TDigestByRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rank ...uint64
func (_e *MockUniversalClient_Expecter) TDigestByRevRank(ctx interface{}, key interface{}, rank ...interface{}) *MockUniversalClient_TDigestByRevRank_Call {
	return &MockUniversalClient_TDigestByRevRank_Call{Call: _e.mock.On("TDigestByRevRank",
		append([]interface{}{ctx, key}, rank...)...)}
}

func (_c *MockUniversalClient_TDigestByRevRank_Call) Run(run func(ctx context.Context, key string, rank ...uint64)) *MockUniversalClient_TDigestByRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestByRevRank_Call) Return(_a0 *FloatSliceCmd) *MockUniversalClient_TDigestByRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestByRevRank_Call) RunAndReturn(run func(context.Context, string, ...uint64) *FloatSliceCmd) *MockUniversalClient_TDigestByRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCDF provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TDigestCDF(ctx context.Context, key string, elements ...float64) *FloatSliceCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestCDF")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestCDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCDF'
type MockUniversalClient_TDigestCDF_Call struct {
	*mock.Call
}

// TDigestCDF is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *MockUniversalClient_Expecter) TDigestCDF(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TDigestCDF_Call {
	return &MockUniversalClient_TDigestCDF_Call{Call: _e.mock.On("TDigestCDF",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TDigestCDF_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *MockUniversalClient_TDigestCDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestCDF_Call) Return(_a0 *FloatSliceCmd) *MockUniversalClient_TDigestCDF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestCDF_Call) RunAndReturn(run func(context.Context, string, ...float64) *FloatSliceCmd) *MockUniversalClient_TDigestCDF_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCreate provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TDigestCreate(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCreate'
type MockUniversalClient_TDigestCreate_Call struct {
	*mock.Call
}

// TDigestCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TDigestCreate(ctx interface{}, key interface{}) *MockUniversalClient_TDigestCreate_Call {
	return &MockUniversalClient_TDigestCreate_Call{Call: _e.mock.On("TDigestCreate", ctx, key)}
}

func (_c *MockUniversalClient_TDigestCreate_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TDigestCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestCreate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TDigestCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestCreate_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_TDigestCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCreateWithCompression provides a mock function with given fields: ctx, key, compression
func (_m *MockUniversalClient) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *StatusCmd {
	ret := _m.Called(ctx, key, compression)

	if len(ret) == 0 {
		panic("no return value specified for TDigestCreateWithCompression")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, compression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestCreateWithCompression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCreateWithCompression'
type MockUniversalClient_TDigestCreateWithCompression_Call struct {
	*mock.Call
}

// TDigestCreateWithCompression is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - compression int64
func (_e *MockUniversalClient_Expecter) TDigestCreateWithCompression(ctx interface{}, key interface{}, compression interface{}) *MockUniversalClient_TDigestCreateWithCompression_Call {
	return &MockUniversalClient_TDigestCreateWithCompression_Call{Call: _e.mock.On("TDigestCreateWithCompression", ctx, key, compression)}
}

func (_c *MockUniversalClient_TDigestCreateWithCompression_Call) Run(run func(ctx context.Context, key string, compression int64)) *MockUniversalClient_TDigestCreateWithCompression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestCreateWithCompression_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TDigestCreateWithCompression_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestCreateWithCompression_Call) RunAndReturn(run func(context.Context, string, int64) *StatusCmd) *MockUniversalClient_TDigestCreateWithCompression_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestInfo provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TDigestInfo(ctx context.Context, key string) *TDigestInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestInfo")
	}

	var r0 *TDigestInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *TDigestInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TDigestInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestInfo'
type MockUniversalClient_TDigestInfo_Call struct {
	*mock.Call
}

// TDigestInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TDigestInfo(ctx interface{}, key interface{}) *MockUniversalClient_TDigestInfo_Call {
	return &MockUniversalClient_TDigestInfo_Call{Call: _e.mock.On("TDigestInfo", ctx, key)}
}

func (_c *MockUniversalClient_TDigestInfo_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TDigestInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestInfo_Call) Return(_a0 *TDigestInfoCmd) *MockUniversalClient_TDigestInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestInfo_Call) RunAndReturn(run func(context.Context, string) *TDigestInfoCmd) *MockUniversalClient_TDigestInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMax provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TDigestMax(ctx context.Context, key string) *FloatCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestMax")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FloatCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMax'
type MockUniversalClient_TDigestMax_Call struct {
	*mock.Call
}

// TDigestMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TDigestMax(ctx interface{}, key interface{}) *MockUniversalClient_TDigestMax_Call {
	return &MockUniversalClient_TDigestMax_Call{Call: _e.mock.On("TDigestMax", ctx, key)}
}

func (_c *MockUniversalClient_TDigestMax_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TDigestMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestMax_Call) Return(_a0 *FloatCmd) *MockUniversalClient_TDigestMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestMax_Call) RunAndReturn(run func(context.Context, string) *FloatCmd) *MockUniversalClient_TDigestMax_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMerge provides a mock function with given fields: ctx, destKey, options, sourceKeys
func (_m *MockUniversalClient) TDigestMerge(ctx context.Context, destKey string, options *TDigestMergeOptions, sourceKeys ...string) *StatusCmd {
	_va := make([]interface{}, len(sourceKeys))
	for _i := range sourceKeys {
		_va[_i] = sourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TDigestMergeOptions, ...string) *StatusCmd); ok {
		r0 = rf(ctx, destKey, options, sourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMerge'
type MockUniversalClient_TDigestMerge_Call struct {
	*mock.Call
}

// TDigestMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - options *TDigestMergeOptions
//   - sourceKeys ...string
func (_e *MockUniversalClient_Expecter) TDigestMerge(ctx interface{}, destKey interface{}, options interface{}, sourceKeys ...interface{}) *MockUniversalClient_TDigestMerge_Call {
	return &MockUniversalClient_TDigestMerge_Call{Call: _e.mock.On("TDigestMerge",
		append([]interface{}{ctx, destKey, options}, sourceKeys...)...)}
}

func (_c *MockUniversalClient_TDigestMerge_Call) Run(run func(ctx context.Context, destKey string, options *TDigestMergeOptions, sourceKeys ...string)) *MockUniversalClient_TDigestMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*TDigestMergeOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestMerge_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TDigestMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestMerge_Call) RunAndReturn(run func(context.Context, string, *TDigestMergeOptions, ...string) *StatusCmd) *MockUniversalClient_TDigestMerge_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMin provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TDigestMin(ctx context.Context, key string) *FloatCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestMin")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FloatCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMin'
type MockUniversalClient_TDigestMin_Call struct {
	*mock.Call
}

// TDigestMin is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TDigestMin(ctx interface{}, key interface{}) *MockUniversalClient_TDigestMin_Call {
	return &MockUniversalClient_TDigestMin_Call{Call: _e.mock.On("TDigestMin", ctx, key)}
}

func (_c *MockUniversalClient_TDigestMin_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TDigestMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestMin_Call) Return(_a0 *FloatCmd) *MockUniversalClient_TDigestMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestMin_Call) RunAndReturn(run func(context.Context, string) *FloatCmd) *MockUniversalClient_TDigestMin_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestQuantile provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TDigestQuantile(ctx context.Context, key string, elements ...float64) *FloatSliceCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestQuantile")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestQuantile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestQuantile'
type MockUniversalClient_TDigestQuantile_Call struct {
	*mock.Call
}

// TDigestQuantile is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *MockUniversalClient_Expecter) TDigestQuantile(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TDigestQuantile_Call {
	return &MockUniversalClient_TDigestQuantile_Call{Call: _e.mock.On("TDigestQuantile",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TDigestQuantile_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *MockUniversalClient_TDigestQuantile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestQuantile_Call) Return(_a0 *FloatSliceCmd) *MockUniversalClient_TDigestQuantile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestQuantile_Call) RunAndReturn(run func(context.Context, string, ...float64) *FloatSliceCmd) *MockUniversalClient_TDigestQuantile_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestRank provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) TDigestRank(ctx context.Context, key string, values ...float64) *IntSliceCmd {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestRank")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestRank'
type MockUniversalClient_TDigestRank_Call struct {
	*mock.Call
}

// TDigestRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...float64
func (_e *MockUniversalClient_Expecter) TDigestRank(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_TDigestRank_Call {
	return &MockUniversalClient_TDigestRank_Call{Call: _e.mock.On("TDigestRank",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_TDigestRank_Call) Run(run func(ctx context.Context, key string, values ...float64)) *MockUniversalClient_TDigestRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestRank_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_TDigestRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestRank_Call) RunAndReturn(run func(context.Context, string, ...float64) *IntSliceCmd) *MockUniversalClient_TDigestRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestReset provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TDigestReset(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TDigestReset")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestReset'
type MockUniversalClient_TDigestReset_Call struct {
	*mock.Call
}

// TDigestReset is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TDigestReset(ctx interface{}, key interface{}) *MockUniversalClient_TDigestReset_Call {
	return &MockUniversalClient_TDigestReset_Call{Call: _e.mock.On("TDigestReset", ctx, key)}
}

func (_c *MockUniversalClient_TDigestReset_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TDigestReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestReset_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TDigestReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestReset_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_TDigestReset_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestRevRank provides a mock function with given fields: ctx, key, values
func (_m *MockUniversalClient) TDigestRevRank(ctx context.Context, key string, values ...float64) *IntSliceCmd {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TDigestRevRank")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestRevRank'
type MockUniversalClient_TDigestRevRank_Call struct {
	*mock.Call
}

// TDigestRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...float64
func (_e *MockUniversalClient_Expecter) TDigestRevRank(ctx interface{}, key interface{}, values ...interface{}) *MockUniversalClient_TDigestRevRank_Call {
	return &MockUniversalClient_TDigestRevRank_Call{Call: _e.mock.On("TDigestRevRank",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockUniversalClient_TDigestRevRank_Call) Run(run func(ctx context.Context, key string, values ...float64)) *MockUniversalClient_TDigestRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TDigestRevRank_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_TDigestRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestRevRank_Call) RunAndReturn(run func(context.Context, string, ...float64) *IntSliceCmd) *MockUniversalClient_TDigestRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestTrimmedMean provides a mock function with given fields: ctx, key, lowCutQuantile, highCutQuantile
func (_m *MockUniversalClient) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *FloatCmd {
	ret := _m.Called(ctx, key, lowCutQuantile, highCutQuantile)

	if len(ret) == 0 {
		panic("no return value specified for TDigestTrimmedMean")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) *FloatCmd); ok {
		r0 = rf(ctx, key, lowCutQuantile, highCutQuantile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_TDigestTrimmedMean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestTrimmedMean'
type MockUniversalClient_TDigestTrimmedMean_Call struct {
	*mock.Call
}

// TDigestTrimmedMean is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - lowCutQuantile float64
//   - highCutQuantile float64
func (_e *MockUniversalClient_Expecter) TDigestTrimmedMean(ctx interface{}, key interface{}, lowCutQuantile interface{}, highCutQuantile interface{}) *MockUniversalClient_TDigestTrimmedMean_Call {
	return &MockUniversalClient_TDigestTrimmedMean_Call{Call: _e.mock.On("TDigestTrimmedMean", ctx, key, lowCutQuantile, highCutQuantile)}
}

func (_c *MockUniversalClient_TDigestTrimmedMean_Call) Run(run func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64)) *MockUniversalClient_TDigestTrimmedMean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_TDigestTrimmedMean_Call) Return(_a0 *FloatCmd) *MockUniversalClient_TDigestTrimmedMean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TDigestTrimmedMean_Call) RunAndReturn(run func(context.Context, string, float64, float64) *FloatCmd) *MockUniversalClient_TDigestTrimmedMean_Call {
	_c.Call.Return(run)
	return _c
}

// TFCall provides a mock function with given fields: ctx, libName, funcName, numKeys
func (_m *MockUniversalClient) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys)

	if len(ret) == 0 {
		panic("no return value specified for TFCall")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_TFCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCall'
type MockUniversalClient_TFCall_Call struct {
	*mock.Call
}

// TFCall is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
func (_e *MockUniversalClient_Expecter) TFCall(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}) *MockUniversalClient_TFCall_Call {
	return &MockUniversalClient_TFCall_Call{Call: _e.mock.On("TFCall", ctx, libName, funcName, numKeys)}
}

func (_c *MockUniversalClient_TFCall_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int)) *MockUniversalClient_TFCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_TFCall_Call) Return(_a0 *Cmd) *MockUniversalClient_TFCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFCall_Call) RunAndReturn(run func(context.Context, string, string, int) *Cmd) *MockUniversalClient_TFCall_Call {
	_c.Call.Return(run)
	return _c
}

// TFCallASYNC provides a mock function with given fields: ctx, libName, funcName, numKeys
func (_m *MockUniversalClient) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys)

	if len(ret) == 0 {
		panic("no return value specified for TFCallASYNC")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_TFCallASYNC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCallASYNC'
type MockUniversalClient_TFCallASYNC_Call struct {
	*mock.Call
}

// TFCallASYNC is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
func (_e *MockUniversalClient_Expecter) TFCallASYNC(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}) *MockUniversalClient_TFCallASYNC_Call {
	return &MockUniversalClient_TFCallASYNC_Call{Call: _e.mock.On("TFCallASYNC", ctx, libName, funcName, numKeys)}
}

func (_c *MockUniversalClient_TFCallASYNC_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int)) *MockUniversalClient_TFCallASYNC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_TFCallASYNC_Call) Return(_a0 *Cmd) *MockUniversalClient_TFCallASYNC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFCallASYNC_Call) RunAndReturn(run func(context.Context, string, string, int) *Cmd) *MockUniversalClient_TFCallASYNC_Call {
	_c.Call.Return(run)
	return _c
}

// TFCallASYNCArgs provides a mock function with given fields: ctx, libName, funcName, numKeys, options
func (_m *MockUniversalClient) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *TFCallOptions) *Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys, options)

	if len(ret) == 0 {
		panic("no return value specified for TFCallASYNCArgs")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *TFCallOptions) *Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_TFCallASYNCArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCallASYNCArgs'
type MockUniversalClient_TFCallASYNCArgs_Call struct {
	*mock.Call
}

// TFCallASYNCArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
//   - options *TFCallOptions
func (_e *MockUniversalClient_Expecter) TFCallASYNCArgs(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}, options interface{}) *MockUniversalClient_TFCallASYNCArgs_Call {
	return &MockUniversalClient_TFCallASYNCArgs_Call{Call: _e.mock.On("TFCallASYNCArgs", ctx, libName, funcName, numKeys, options)}
}

func (_c *MockUniversalClient_TFCallASYNCArgs_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int, options *TFCallOptions)) *MockUniversalClient_TFCallASYNCArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(*TFCallOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TFCallASYNCArgs_Call) Return(_a0 *Cmd) *MockUniversalClient_TFCallASYNCArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFCallASYNCArgs_Call) RunAndReturn(run func(context.Context, string, string, int, *TFCallOptions) *Cmd) *MockUniversalClient_TFCallASYNCArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TFCallArgs provides a mock function with given fields: ctx, libName, funcName, numKeys, options
func (_m *MockUniversalClient) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *TFCallOptions) *Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys, options)

	if len(ret) == 0 {
		panic("no return value specified for TFCallArgs")
	}

	var r0 *Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *TFCallOptions) *Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cmd)
		}
	}

	return r0
}

// MockUniversalClient_TFCallArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCallArgs'
type MockUniversalClient_TFCallArgs_Call struct {
	*mock.Call
}

// TFCallArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
//   - options *TFCallOptions
func (_e *MockUniversalClient_Expecter) TFCallArgs(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}, options interface{}) *MockUniversalClient_TFCallArgs_Call {
	return &MockUniversalClient_TFCallArgs_Call{Call: _e.mock.On("TFCallArgs", ctx, libName, funcName, numKeys, options)}
}

func (_c *MockUniversalClient_TFCallArgs_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int, options *TFCallOptions)) *MockUniversalClient_TFCallArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(*TFCallOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TFCallArgs_Call) Return(_a0 *Cmd) *MockUniversalClient_TFCallArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFCallArgs_Call) RunAndReturn(run func(context.Context, string, string, int, *TFCallOptions) *Cmd) *MockUniversalClient_TFCallArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionDelete provides a mock function with given fields: ctx, libName
func (_m *MockUniversalClient) TFunctionDelete(ctx context.Context, libName string) *StatusCmd {
	ret := _m.Called(ctx, libName)

	if len(ret) == 0 {
		panic("no return value specified for TFunctionDelete")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, libName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TFunctionDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionDelete'
type MockUniversalClient_TFunctionDelete_Call struct {
	*mock.Call
}

// TFunctionDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
func (_e *MockUniversalClient_Expecter) TFunctionDelete(ctx interface{}, libName interface{}) *MockUniversalClient_TFunctionDelete_Call {
	return &MockUniversalClient_TFunctionDelete_Call{Call: _e.mock.On("TFunctionDelete", ctx, libName)}
}

func (_c *MockUniversalClient_TFunctionDelete_Call) Run(run func(ctx context.Context, libName string)) *MockUniversalClient_TFunctionDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TFunctionDelete_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TFunctionDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFunctionDelete_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_TFunctionDelete_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionList provides a mock function with given fields: ctx
func (_m *MockUniversalClient) TFunctionList(ctx context.Context) *MapStringInterfaceSliceCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TFunctionList")
	}

	var r0 *MapStringInterfaceSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context) *MapStringInterfaceSliceCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TFunctionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionList'
type MockUniversalClient_TFunctionList_Call struct {
	*mock.Call
}

// TFunctionList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) TFunctionList(ctx interface{}) *MockUniversalClient_TFunctionList_Call {
	return &MockUniversalClient_TFunctionList_Call{Call: _e.mock.On("TFunctionList", ctx)}
}

func (_c *MockUniversalClient_TFunctionList_Call) Run(run func(ctx context.Context)) *MockUniversalClient_TFunctionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_TFunctionList_Call) Return(_a0 *MapStringInterfaceSliceCmd) *MockUniversalClient_TFunctionList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFunctionList_Call) RunAndReturn(run func(context.Context) *MapStringInterfaceSliceCmd) *MockUniversalClient_TFunctionList_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionListArgs provides a mock function with given fields: ctx, options
func (_m *MockUniversalClient) TFunctionListArgs(ctx context.Context, options *TFunctionListOptions) *MapStringInterfaceSliceCmd {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for TFunctionListArgs")
	}

	var r0 *MapStringInterfaceSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *TFunctionListOptions) *MapStringInterfaceSliceCmd); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TFunctionListArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionListArgs'
type MockUniversalClient_TFunctionListArgs_Call struct {
	*mock.Call
}

// TFunctionListArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - options *TFunctionListOptions
func (_e *MockUniversalClient_Expecter) TFunctionListArgs(ctx interface{}, options interface{}) *MockUniversalClient_TFunctionListArgs_Call {
	return &MockUniversalClient_TFunctionListArgs_Call{Call: _e.mock.On("TFunctionListArgs", ctx, options)}
}

func (_c *MockUniversalClient_TFunctionListArgs_Call) Run(run func(ctx context.Context, options *TFunctionListOptions)) *MockUniversalClient_TFunctionListArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*TFunctionListOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TFunctionListArgs_Call) Return(_a0 *MapStringInterfaceSliceCmd) *MockUniversalClient_TFunctionListArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFunctionListArgs_Call) RunAndReturn(run func(context.Context, *TFunctionListOptions) *MapStringInterfaceSliceCmd) *MockUniversalClient_TFunctionListArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionLoad provides a mock function with given fields: ctx, lib
func (_m *MockUniversalClient) TFunctionLoad(ctx context.Context, lib string) *StatusCmd {
	ret := _m.Called(ctx, lib)

	if len(ret) == 0 {
		panic("no return value specified for TFunctionLoad")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, lib)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TFunctionLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionLoad'
type MockUniversalClient_TFunctionLoad_Call struct {
	*mock.Call
}

// TFunctionLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - lib string
func (_e *MockUniversalClient_Expecter) TFunctionLoad(ctx interface{}, lib interface{}) *MockUniversalClient_TFunctionLoad_Call {
	return &MockUniversalClient_TFunctionLoad_Call{Call: _e.mock.On("TFunctionLoad", ctx, lib)}
}

func (_c *MockUniversalClient_TFunctionLoad_Call) Run(run func(ctx context.Context, lib string)) *MockUniversalClient_TFunctionLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TFunctionLoad_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TFunctionLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFunctionLoad_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_TFunctionLoad_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionLoadArgs provides a mock function with given fields: ctx, lib, options
func (_m *MockUniversalClient) TFunctionLoadArgs(ctx context.Context, lib string, options *TFunctionLoadOptions) *StatusCmd {
	ret := _m.Called(ctx, lib, options)

	if len(ret) == 0 {
		panic("no return value specified for TFunctionLoadArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TFunctionLoadOptions) *StatusCmd); ok {
		r0 = rf(ctx, lib, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TFunctionLoadArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionLoadArgs'
type MockUniversalClient_TFunctionLoadArgs_Call struct {
	*mock.Call
}

// TFunctionLoadArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - lib string
//   - options *TFunctionLoadOptions
func (_e *MockUniversalClient_Expecter) TFunctionLoadArgs(ctx interface{}, lib interface{}, options interface{}) *MockUniversalClient_TFunctionLoadArgs_Call {
	return &MockUniversalClient_TFunctionLoadArgs_Call{Call: _e.mock.On("TFunctionLoadArgs", ctx, lib, options)}
}

func (_c *MockUniversalClient_TFunctionLoadArgs_Call) Run(run func(ctx context.Context, lib string, options *TFunctionLoadOptions)) *MockUniversalClient_TFunctionLoadArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TFunctionLoadOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TFunctionLoadArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TFunctionLoadArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TFunctionLoadArgs_Call) RunAndReturn(run func(context.Context, string, *TFunctionLoadOptions) *StatusCmd) *MockUniversalClient_TFunctionLoadArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSAdd provides a mock function with given fields: ctx, key, timestamp, value
func (_m *MockUniversalClient) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, value)

	if len(ret) == 0 {
		panic("no return value specified for TSAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, float64) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSAdd'
type MockUniversalClient_TSAdd_Call struct {
	*mock.Call
}

// TSAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp interface{}
//   - value float64
func (_e *MockUniversalClient_Expecter) TSAdd(ctx interface{}, key interface{}, timestamp interface{}, value interface{}) *MockUniversalClient_TSAdd_Call {
	return &MockUniversalClient_TSAdd_Call{Call: _e.mock.On("TSAdd", ctx, key, timestamp, value)}
}

func (_c *MockUniversalClient_TSAdd_Call) Run(run func(ctx context.Context, key string, timestamp interface{}, value float64)) *MockUniversalClient_TSAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_TSAdd_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSAdd_Call) RunAndReturn(run func(context.Context, string, interface{}, float64) *IntCmd) *MockUniversalClient_TSAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TSAddWithArgs provides a mock function with given fields: ctx, key, timestamp, value, options
func (_m *MockUniversalClient) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *TSOptions) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, value, options)

	if len(ret) == 0 {
		panic("no return value specified for TSAddWithArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, float64, *TSOptions) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, value, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSAddWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSAddWithArgs'
type MockUniversalClient_TSAddWithArgs_Call struct {
	*mock.Call
}

// TSAddWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp interface{}
//   - value float64
//   - options *TSOptions
func (_e *MockUniversalClient_Expecter) TSAddWithArgs(ctx interface{}, key interface{}, timestamp interface{}, value interface{}, options interface{}) *MockUniversalClient_TSAddWithArgs_Call {
	return &MockUniversalClient_TSAddWithArgs_Call{Call: _e.mock.On("TSAddWithArgs", ctx, key, timestamp, value, options)}
}

func (_c *MockUniversalClient_TSAddWithArgs_Call) Run(run func(ctx context.Context, key string, timestamp interface{}, value float64, options *TSOptions)) *MockUniversalClient_TSAddWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(float64), args[4].(*TSOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSAddWithArgs_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSAddWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSAddWithArgs_Call) RunAndReturn(run func(context.Context, string, interface{}, float64, *TSOptions) *IntCmd) *MockUniversalClient_TSAddWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSAlter provides a mock function with given fields: ctx, key, options
func (_m *MockUniversalClient) TSAlter(ctx context.Context, key string, options *TSAlterOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSAlter")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSAlterOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSAlter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSAlter'
type MockUniversalClient_TSAlter_Call struct {
	*mock.Call
}

// TSAlter is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSAlterOptions
func (_e *MockUniversalClient_Expecter) TSAlter(ctx interface{}, key interface{}, options interface{}) *MockUniversalClient_TSAlter_Call {
	return &MockUniversalClient_TSAlter_Call{Call: _e.mock.On("TSAlter", ctx, key, options)}
}

func (_c *MockUniversalClient_TSAlter_Call) Run(run func(ctx context.Context, key string, options *TSAlterOptions)) *MockUniversalClient_TSAlter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSAlterOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSAlter_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TSAlter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSAlter_Call) RunAndReturn(run func(context.Context, string, *TSAlterOptions) *StatusCmd) *MockUniversalClient_TSAlter_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreate provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TSCreate(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TSCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreate'
type MockUniversalClient_TSCreate_Call struct {
	*mock.Call
}

// TSCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TSCreate(ctx interface{}, key interface{}) *MockUniversalClient_TSCreate_Call {
	return &MockUniversalClient_TSCreate_Call{Call: _e.mock.On("TSCreate", ctx, key)}
}

func (_c *MockUniversalClient_TSCreate_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TSCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TSCreate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TSCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSCreate_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_TSCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreateRule provides a mock function with given fields: ctx, sourceKey, destKey, aggregator, bucketDuration
func (_m *MockUniversalClient) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int) *StatusCmd {
	ret := _m.Called(ctx, sourceKey, destKey, aggregator, bucketDuration)

	if len(ret) == 0 {
		panic("no return value specified for TSCreateRule")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, Aggregator, int) *StatusCmd); ok {
		r0 = rf(ctx, sourceKey, destKey, aggregator, bucketDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSCreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreateRule'
type MockUniversalClient_TSCreateRule_Call struct {
	*mock.Call
}

// TSCreateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
//   - aggregator Aggregator
//   - bucketDuration int
func (_e *MockUniversalClient_Expecter) TSCreateRule(ctx interface{}, sourceKey interface{}, destKey interface{}, aggregator interface{}, bucketDuration interface{}) *MockUniversalClient_TSCreateRule_Call {
	return &MockUniversalClient_TSCreateRule_Call{Call: _e.mock.On("TSCreateRule", ctx, sourceKey, destKey, aggregator, bucketDuration)}
}

func (_c *MockUniversalClient_TSCreateRule_Call) Run(run func(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int)) *MockUniversalClient_TSCreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(Aggregator), args[4].(int))
	})
	return _c
}

func (_c *MockUniversalClient_TSCreateRule_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TSCreateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSCreateRule_Call) RunAndReturn(run func(context.Context, string, string, Aggregator, int) *StatusCmd) *MockUniversalClient_TSCreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreateRuleWithArgs provides a mock function with given fields: ctx, sourceKey, destKey, aggregator, bucketDuration, options
func (_m *MockUniversalClient) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int, options *TSCreateRuleOptions) *StatusCmd {
	ret := _m.Called(ctx, sourceKey, destKey, aggregator, bucketDuration, options)

	if len(ret) == 0 {
		panic("no return value specified for TSCreateRuleWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, Aggregator, int, *TSCreateRuleOptions) *StatusCmd); ok {
		r0 = rf(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSCreateRuleWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreateRuleWithArgs'
type MockUniversalClient_TSCreateRuleWithArgs_Call struct {
	*mock.Call
}

// TSCreateRuleWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
//   - aggregator Aggregator
//   - bucketDuration int
//   - options *TSCreateRuleOptions
func (_e *MockUniversalClient_Expecter) TSCreateRuleWithArgs(ctx interface{}, sourceKey interface{}, destKey interface{}, aggregator interface{}, bucketDuration interface{}, options interface{}) *MockUniversalClient_TSCreateRuleWithArgs_Call {
	return &MockUniversalClient_TSCreateRuleWithArgs_Call{Call: _e.mock.On("TSCreateRuleWithArgs", ctx, sourceKey, destKey, aggregator, bucketDuration, options)}
}

func (_c *MockUniversalClient_TSCreateRuleWithArgs_Call) Run(run func(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int, options *TSCreateRuleOptions)) *MockUniversalClient_TSCreateRuleWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(Aggregator), args[4].(int), args[5].(*TSCreateRuleOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSCreateRuleWithArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TSCreateRuleWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSCreateRuleWithArgs_Call) RunAndReturn(run func(context.Context, string, string, Aggregator, int, *TSCreateRuleOptions) *StatusCmd) *MockUniversalClient_TSCreateRuleWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreateWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockUniversalClient) TSCreateWithArgs(ctx context.Context, key string, options *TSOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSCreateWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSCreateWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreateWithArgs'
type MockUniversalClient_TSCreateWithArgs_Call struct {
	*mock.Call
}

// TSCreateWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSOptions
func (_e *MockUniversalClient_Expecter) TSCreateWithArgs(ctx interface{}, key interface{}, options interface{}) *MockUniversalClient_TSCreateWithArgs_Call {
	return &MockUniversalClient_TSCreateWithArgs_Call{Call: _e.mock.On("TSCreateWithArgs", ctx, key, options)}
}

func (_c *MockUniversalClient_TSCreateWithArgs_Call) Run(run func(ctx context.Context, key string, options *TSOptions)) *MockUniversalClient_TSCreateWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSCreateWithArgs_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TSCreateWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSCreateWithArgs_Call) RunAndReturn(run func(context.Context, string, *TSOptions) *StatusCmd) *MockUniversalClient_TSCreateWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSDecrBy provides a mock function with given fields: ctx, Key, timestamp
func (_m *MockUniversalClient) TSDecrBy(ctx context.Context, Key string, timestamp float64) *IntCmd {
	ret := _m.Called(ctx, Key, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSDecrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *IntCmd); ok {
		r0 = rf(ctx, Key, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSDecrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDecrBy'
type MockUniversalClient_TSDecrBy_Call struct {
	*mock.Call
}

// TSDecrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - Key string
//   - timestamp float64
func (_e *MockUniversalClient_Expecter) TSDecrBy(ctx interface{}, Key interface{}, timestamp interface{}) *MockUniversalClient_TSDecrBy_Call {
	return &MockUniversalClient_TSDecrBy_Call{Call: _e.mock.On("TSDecrBy", ctx, Key, timestamp)}
}

func (_c *MockUniversalClient_TSDecrBy_Call) Run(run func(ctx context.Context, Key string, timestamp float64)) *MockUniversalClient_TSDecrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_TSDecrBy_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSDecrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSDecrBy_Call) RunAndReturn(run func(context.Context, string, float64) *IntCmd) *MockUniversalClient_TSDecrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TSDecrByWithArgs provides a mock function with given fields: ctx, key, timestamp, options
func (_m *MockUniversalClient) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSDecrByWithArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSDecrByWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDecrByWithArgs'
type MockUniversalClient_TSDecrByWithArgs_Call struct {
	*mock.Call
}

// TSDecrByWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp float64
//   - options *TSIncrDecrOptions
func (_e *MockUniversalClient_Expecter) TSDecrByWithArgs(ctx interface{}, key interface{}, timestamp interface{}, options interface{}) *MockUniversalClient_TSDecrByWithArgs_Call {
	return &MockUniversalClient_TSDecrByWithArgs_Call{Call: _e.mock.On("TSDecrByWithArgs", ctx, key, timestamp, options)}
}

func (_c *MockUniversalClient_TSDecrByWithArgs_Call) Run(run func(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions)) *MockUniversalClient_TSDecrByWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(*TSIncrDecrOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSDecrByWithArgs_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSDecrByWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSDecrByWithArgs_Call) RunAndReturn(run func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd) *MockUniversalClient_TSDecrByWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSDel provides a mock function with given fields: ctx, Key, fromTimestamp, toTimestamp
func (_m *MockUniversalClient) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *IntCmd {
	ret := _m.Called(ctx, Key, fromTimestamp, toTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *IntCmd); ok {
		r0 = rf(ctx, Key, fromTimestamp, toTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDel'
type MockUniversalClient_TSDel_Call struct {
	*mock.Call
}

// TSDel is a helper method to define mock.On call
//   - ctx context.Context
//   - Key string
//   - fromTimestamp int
//   - toTimestamp int
func (_e *MockUniversalClient_Expecter) TSDel(ctx interface{}, Key interface{}, fromTimestamp interface{}, toTimestamp interface{}) *MockUniversalClient_TSDel_Call {
	return &MockUniversalClient_TSDel_Call{Call: _e.mock.On("TSDel", ctx, Key, fromTimestamp, toTimestamp)}
}

func (_c *MockUniversalClient_TSDel_Call) Run(run func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int)) *MockUniversalClient_TSDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_TSDel_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSDel_Call) RunAndReturn(run func(context.Context, string, int, int) *IntCmd) *MockUniversalClient_TSDel_Call {
	_c.Call.Return(run)
	return _c
}

// TSDeleteRule provides a mock function with given fields: ctx, sourceKey, destKey
func (_m *MockUniversalClient) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *StatusCmd {
	ret := _m.Called(ctx, sourceKey, destKey)

	if len(ret) == 0 {
		panic("no return value specified for TSDeleteRule")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, sourceKey, destKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSDeleteRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDeleteRule'
type MockUniversalClient_TSDeleteRule_Call struct {
	*mock.Call
}

// TSDeleteRule is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
func (_e *MockUniversalClient_Expecter) TSDeleteRule(ctx interface{}, sourceKey interface{}, destKey interface{}) *MockUniversalClient_TSDeleteRule_Call {
	return &MockUniversalClient_TSDeleteRule_Call{Call: _e.mock.On("TSDeleteRule", ctx, sourceKey, destKey)}
}

func (_c *MockUniversalClient_TSDeleteRule_Call) Run(run func(ctx context.Context, sourceKey string, destKey string)) *MockUniversalClient_TSDeleteRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TSDeleteRule_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TSDeleteRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSDeleteRule_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockUniversalClient_TSDeleteRule_Call {
	_c.Call.Return(run)
	return _c
}

// TSGet provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TSGet(ctx context.Context, key string) *TSTimestampValueCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TSGet")
	}

	var r0 *TSTimestampValueCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *TSTimestampValueCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSGet'
type MockUniversalClient_TSGet_Call struct {
	*mock.Call
}

// TSGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TSGet(ctx interface{}, key interface{}) *MockUniversalClient_TSGet_Call {
	return &MockUniversalClient_TSGet_Call{Call: _e.mock.On("TSGet", ctx, key)}
}

func (_c *MockUniversalClient_TSGet_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TSGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TSGet_Call) Return(_a0 *TSTimestampValueCmd) *MockUniversalClient_TSGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSGet_Call) RunAndReturn(run func(context.Context, string) *TSTimestampValueCmd) *MockUniversalClient_TSGet_Call {
	_c.Call.Return(run)
	return _c
}

// TSGetWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockUniversalClient) TSGetWithArgs(ctx context.Context, key string, options *TSGetOptions) *TSTimestampValueCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSGetWithArgs")
	}

	var r0 *TSTimestampValueCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSGetOptions) *TSTimestampValueCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSGetWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSGetWithArgs'
type MockUniversalClient_TSGetWithArgs_Call struct {
	*mock.Call
}

// TSGetWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSGetOptions
func (_e *MockUniversalClient_Expecter) TSGetWithArgs(ctx interface{}, key interface{}, options interface{}) *MockUniversalClient_TSGetWithArgs_Call {
	return &MockUniversalClient_TSGetWithArgs_Call{Call: _e.mock.On("TSGetWithArgs", ctx, key, options)}
}

func (_c *MockUniversalClient_TSGetWithArgs_Call) Run(run func(ctx context.Context, key string, options *TSGetOptions)) *MockUniversalClient_TSGetWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSGetOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSGetWithArgs_Call) Return(_a0 *TSTimestampValueCmd) *MockUniversalClient_TSGetWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSGetWithArgs_Call) RunAndReturn(run func(context.Context, string, *TSGetOptions) *TSTimestampValueCmd) *MockUniversalClient_TSGetWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSIncrBy provides a mock function with given fields: ctx, Key, timestamp
func (_m *MockUniversalClient) TSIncrBy(ctx context.Context, Key string, timestamp float64) *IntCmd {
	ret := _m.Called(ctx, Key, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSIncrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *IntCmd); ok {
		r0 = rf(ctx, Key, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSIncrBy'
type MockUniversalClient_TSIncrBy_Call struct {
	*mock.Call
}

// TSIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - Key string
//   - timestamp float64
func (_e *MockUniversalClient_Expecter) TSIncrBy(ctx interface{}, Key interface{}, timestamp interface{}) *MockUniversalClient_TSIncrBy_Call {
	return &MockUniversalClient_TSIncrBy_Call{Call: _e.mock.On("TSIncrBy", ctx, Key, timestamp)}
}

func (_c *MockUniversalClient_TSIncrBy_Call) Run(run func(ctx context.Context, Key string, timestamp float64)) *MockUniversalClient_TSIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_TSIncrBy_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSIncrBy_Call) RunAndReturn(run func(context.Context, string, float64) *IntCmd) *MockUniversalClient_TSIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TSIncrByWithArgs provides a mock function with given fields: ctx, key, timestamp, options
func (_m *MockUniversalClient) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSIncrByWithArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSIncrByWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSIncrByWithArgs'
type MockUniversalClient_TSIncrByWithArgs_Call struct {
	*mock.Call
}

// TSIncrByWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp float64
//   - options *TSIncrDecrOptions
func (_e *MockUniversalClient_Expecter) TSIncrByWithArgs(ctx interface{}, key interface{}, timestamp interface{}, options interface{}) *MockUniversalClient_TSIncrByWithArgs_Call {
	return &MockUniversalClient_TSIncrByWithArgs_Call{Call: _e.mock.On("TSIncrByWithArgs", ctx, key, timestamp, options)}
}

func (_c *MockUniversalClient_TSIncrByWithArgs_Call) Run(run func(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions)) *MockUniversalClient_TSIncrByWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(*TSIncrDecrOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSIncrByWithArgs_Call) Return(_a0 *IntCmd) *MockUniversalClient_TSIncrByWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSIncrByWithArgs_Call) RunAndReturn(run func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd) *MockUniversalClient_TSIncrByWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSInfo provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TSInfo(ctx context.Context, key string) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TSInfo")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSInfo'
type MockUniversalClient_TSInfo_Call struct {
	*mock.Call
}

// TSInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TSInfo(ctx interface{}, key interface{}) *MockUniversalClient_TSInfo_Call {
	return &MockUniversalClient_TSInfo_Call{Call: _e.mock.On("TSInfo", ctx, key)}
}

func (_c *MockUniversalClient_TSInfo_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TSInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TSInfo_Call) Return(_a0 *MapStringInterfaceCmd) *MockUniversalClient_TSInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSInfo_Call) RunAndReturn(run func(context.Context, string) *MapStringInterfaceCmd) *MockUniversalClient_TSInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TSInfoWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockUniversalClient) TSInfoWithArgs(ctx context.Context, key string, options *TSInfoOptions) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSInfoWithArgs")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSInfoOptions) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSInfoWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSInfoWithArgs'
type MockUniversalClient_TSInfoWithArgs_Call struct {
	*mock.Call
}

// TSInfoWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSInfoOptions
func (_e *MockUniversalClient_Expecter) TSInfoWithArgs(ctx interface{}, key interface{}, options interface{}) *MockUniversalClient_TSInfoWithArgs_Call {
	return &MockUniversalClient_TSInfoWithArgs_Call{Call: _e.mock.On("TSInfoWithArgs", ctx, key, options)}
}

func (_c *MockUniversalClient_TSInfoWithArgs_Call) Run(run func(ctx context.Context, key string, options *TSInfoOptions)) *MockUniversalClient_TSInfoWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSInfoOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSInfoWithArgs_Call) Return(_a0 *MapStringInterfaceCmd) *MockUniversalClient_TSInfoWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSInfoWithArgs_Call) RunAndReturn(run func(context.Context, string, *TSInfoOptions) *MapStringInterfaceCmd) *MockUniversalClient_TSInfoWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSMAdd provides a mock function with given fields: ctx, ktvSlices
func (_m *MockUniversalClient) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *IntSliceCmd {
	ret := _m.Called(ctx, ktvSlices)

	if len(ret) == 0 {
		panic("no return value specified for TSMAdd")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, [][]interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, ktvSlices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMAdd'
type MockUniversalClient_TSMAdd_Call struct {
	*mock.Call
}

// TSMAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - ktvSlices [][]interface{}
func (_e *MockUniversalClient_Expecter) TSMAdd(ctx interface{}, ktvSlices interface{}) *MockUniversalClient_TSMAdd_Call {
	return &MockUniversalClient_TSMAdd_Call{Call: _e.mock.On("TSMAdd", ctx, ktvSlices)}
}

func (_c *MockUniversalClient_TSMAdd_Call) Run(run func(ctx context.Context, ktvSlices [][]interface{})) *MockUniversalClient_TSMAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]interface{}))
	})
	return _c
}

func (_c *MockUniversalClient_TSMAdd_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_TSMAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMAdd_Call) RunAndReturn(run func(context.Context, [][]interface{}) *IntSliceCmd) *MockUniversalClient_TSMAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TSMGet provides a mock function with given fields: ctx, filters
func (_m *MockUniversalClient) TSMGet(ctx context.Context, filters []string) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for TSMGet")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, []string) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMGet'
type MockUniversalClient_TSMGet_Call struct {
	*mock.Call
}

// TSMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - filters []string
func (_e *MockUniversalClient_Expecter) TSMGet(ctx interface{}, filters interface{}) *MockUniversalClient_TSMGet_Call {
	return &MockUniversalClient_TSMGet_Call{Call: _e.mock.On("TSMGet", ctx, filters)}
}

func (_c *MockUniversalClient_TSMGet_Call) Run(run func(ctx context.Context, filters []string)) *MockUniversalClient_TSMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockUniversalClient_TSMGet_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMGet_Call) RunAndReturn(run func(context.Context, []string) *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMGet_Call {
	_c.Call.Return(run)
	return _c
}

// TSMGetWithArgs provides a mock function with given fields: ctx, filters, options
func (_m *MockUniversalClient) TSMGetWithArgs(ctx context.Context, filters []string, options *TSMGetOptions) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, filters, options)

	if len(ret) == 0 {
		panic("no return value specified for TSMGetWithArgs")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, []string, *TSMGetOptions) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, filters, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMGetWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMGetWithArgs'
type MockUniversalClient_TSMGetWithArgs_Call struct {
	*mock.Call
}

// TSMGetWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - filters []string
//   - options *TSMGetOptions
func (_e *MockUniversalClient_Expecter) TSMGetWithArgs(ctx interface{}, filters interface{}, options interface{}) *MockUniversalClient_TSMGetWithArgs_Call {
	return &MockUniversalClient_TSMGetWithArgs_Call{Call: _e.mock.On("TSMGetWithArgs", ctx, filters, options)}
}

func (_c *MockUniversalClient_TSMGetWithArgs_Call) Run(run func(ctx context.Context, filters []string, options *TSMGetOptions)) *MockUniversalClient_TSMGetWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(*TSMGetOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSMGetWithArgs_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMGetWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMGetWithArgs_Call) RunAndReturn(run func(context.Context, []string, *TSMGetOptions) *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMGetWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRange provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr
func (_m *MockUniversalClient) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr)

	if len(ret) == 0 {
		panic("no return value specified for TSMRange")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRange'
type MockUniversalClient_TSMRange_Call struct {
	*mock.Call
}

// TSMRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
func (_e *MockUniversalClient_Expecter) TSMRange(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}) *MockUniversalClient_TSMRange_Call {
	return &MockUniversalClient_TSMRange_Call{Call: _e.mock.On("TSMRange", ctx, fromTimestamp, toTimestamp, filterExpr)}
}

func (_c *MockUniversalClient_TSMRange_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string)) *MockUniversalClient_TSMRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string))
	})
	return _c
}

func (_c *MockUniversalClient_TSMRange_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMRange_Call) RunAndReturn(run func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRangeWithArgs provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr, options
func (_m *MockUniversalClient) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRangeOptions) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr, options)

	if len(ret) == 0 {
		panic("no return value specified for TSMRangeWithArgs")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string, *TSMRangeOptions) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRangeWithArgs'
type MockUniversalClient_TSMRangeWithArgs_Call struct {
	*mock.Call
}

// TSMRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
//   - options *TSMRangeOptions
func (_e *MockUniversalClient_Expecter) TSMRangeWithArgs(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}, options interface{}) *MockUniversalClient_TSMRangeWithArgs_Call {
	return &MockUniversalClient_TSMRangeWithArgs_Call{Call: _e.mock.On("TSMRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)}
}

func (_c *MockUniversalClient_TSMRangeWithArgs_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRangeOptions)) *MockUniversalClient_TSMRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string), args[4].(*TSMRangeOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSMRangeWithArgs_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMRangeWithArgs_Call) RunAndReturn(run func(context.Context, int, int, []string, *TSMRangeOptions) *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRevRange provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr
func (_m *MockUniversalClient) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr)

	if len(ret) == 0 {
		panic("no return value specified for TSMRevRange")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRevRange'
type MockUniversalClient_TSMRevRange_Call struct {
	*mock.Call
}

// TSMRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
func (_e *MockUniversalClient_Expecter) TSMRevRange(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}) *MockUniversalClient_TSMRevRange_Call {
	return &MockUniversalClient_TSMRevRange_Call{Call: _e.mock.On("TSMRevRange", ctx, fromTimestamp, toTimestamp, filterExpr)}
}

func (_c *MockUniversalClient_TSMRevRange_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string)) *MockUniversalClient_TSMRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string))
	})
	return _c
}

func (_c *MockUniversalClient_TSMRevRange_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMRevRange_Call) RunAndReturn(run func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRevRangeWithArgs provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr, options
func (_m *MockUniversalClient) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRevRangeOptions) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr, options)

	if len(ret) == 0 {
		panic("no return value specified for TSMRevRangeWithArgs")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string, *TSMRevRangeOptions) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSMRevRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRevRangeWithArgs'
type MockUniversalClient_TSMRevRangeWithArgs_Call struct {
	*mock.Call
}

// TSMRevRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
//   - options *TSMRevRangeOptions
func (_e *MockUniversalClient_Expecter) TSMRevRangeWithArgs(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}, options interface{}) *MockUniversalClient_TSMRevRangeWithArgs_Call {
	return &MockUniversalClient_TSMRevRangeWithArgs_Call{Call: _e.mock.On("TSMRevRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)}
}

func (_c *MockUniversalClient_TSMRevRangeWithArgs_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRevRangeOptions)) *MockUniversalClient_TSMRevRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string), args[4].(*TSMRevRangeOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSMRevRangeWithArgs_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRevRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSMRevRangeWithArgs_Call) RunAndReturn(run func(context.Context, int, int, []string, *TSMRevRangeOptions) *MapStringSliceInterfaceCmd) *MockUniversalClient_TSMRevRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSQueryIndex provides a mock function with given fields: ctx, filterExpr
func (_m *MockUniversalClient) TSQueryIndex(ctx context.Context, filterExpr []string) *StringSliceCmd {
	ret := _m.Called(ctx, filterExpr)

	if len(ret) == 0 {
		panic("no return value specified for TSQueryIndex")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, []string) *StringSliceCmd); ok {
		r0 = rf(ctx, filterExpr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSQueryIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSQueryIndex'
type MockUniversalClient_TSQueryIndex_Call struct {
	*mock.Call
}

// TSQueryIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - filterExpr []string
func (_e *MockUniversalClient_Expecter) TSQueryIndex(ctx interface{}, filterExpr interface{}) *MockUniversalClient_TSQueryIndex_Call {
	return &MockUniversalClient_TSQueryIndex_Call{Call: _e.mock.On("TSQueryIndex", ctx, filterExpr)}
}

func (_c *MockUniversalClient_TSQueryIndex_Call) Run(run func(ctx context.Context, filterExpr []string)) *MockUniversalClient_TSQueryIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockUniversalClient_TSQueryIndex_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_TSQueryIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSQueryIndex_Call) RunAndReturn(run func(context.Context, []string) *StringSliceCmd) *MockUniversalClient_TSQueryIndex_Call {
	_c.Call.Return(run)
	return _c
}

// TSRange provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp
func (_m *MockUniversalClient) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSRange")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRange'
type MockUniversalClient_TSRange_Call struct {
	*mock.Call
}

// TSRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
func (_e *MockUniversalClient_Expecter) TSRange(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}) *MockUniversalClient_TSRange_Call {
	return &MockUniversalClient_TSRange_Call{Call: _e.mock.On("TSRange", ctx, key, fromTimestamp, toTimestamp)}
}

func (_c *MockUniversalClient_TSRange_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int)) *MockUniversalClient_TSRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_TSRange_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockUniversalClient_TSRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSRange_Call) RunAndReturn(run func(context.Context, string, int, int) *TSTimestampValueSliceCmd) *MockUniversalClient_TSRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSRangeWithArgs provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp, options
func (_m *MockUniversalClient) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRangeOptions) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSRangeWithArgs")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, *TSRangeOptions) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRangeWithArgs'
type MockUniversalClient_TSRangeWithArgs_Call struct {
	*mock.Call
}

// TSRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
//   - options *TSRangeOptions
func (_e *MockUniversalClient_Expecter) TSRangeWithArgs(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}, options interface{}) *MockUniversalClient_TSRangeWithArgs_Call {
	return &MockUniversalClient_TSRangeWithArgs_Call{Call: _e.mock.On("TSRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)}
}

func (_c *MockUniversalClient_TSRangeWithArgs_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRangeOptions)) *MockUniversalClient_TSRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(*TSRangeOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSRangeWithArgs_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockUniversalClient_TSRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSRangeWithArgs_Call) RunAndReturn(run func(context.Context, string, int, int, *TSRangeOptions) *TSTimestampValueSliceCmd) *MockUniversalClient_TSRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSRevRange provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp
func (_m *MockUniversalClient) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSRevRange")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRevRange'
type MockUniversalClient_TSRevRange_Call struct {
	*mock.Call
}

// TSRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
func (_e *MockUniversalClient_Expecter) TSRevRange(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}) *MockUniversalClient_TSRevRange_Call {
	return &MockUniversalClient_TSRevRange_Call{Call: _e.mock.On("TSRevRange", ctx, key, fromTimestamp, toTimestamp)}
}

func (_c *MockUniversalClient_TSRevRange_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int)) *MockUniversalClient_TSRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockUniversalClient_TSRevRange_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockUniversalClient_TSRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSRevRange_Call) RunAndReturn(run func(context.Context, string, int, int) *TSTimestampValueSliceCmd) *MockUniversalClient_TSRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSRevRangeWithArgs provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp, options
func (_m *MockUniversalClient) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRevRangeOptions) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSRevRangeWithArgs")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, *TSRevRangeOptions) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TSRevRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRevRangeWithArgs'
type MockUniversalClient_TSRevRangeWithArgs_Call struct {
	*mock.Call
}

// TSRevRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
//   - options *TSRevRangeOptions
func (_e *MockUniversalClient_Expecter) TSRevRangeWithArgs(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}, options interface{}) *MockUniversalClient_TSRevRangeWithArgs_Call {
	return &MockUniversalClient_TSRevRangeWithArgs_Call{Call: _e.mock.On("TSRevRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)}
}

func (_c *MockUniversalClient_TSRevRangeWithArgs_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRevRangeOptions)) *MockUniversalClient_TSRevRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(*TSRevRangeOptions))
	})
	return _c
}

func (_c *MockUniversalClient_TSRevRangeWithArgs_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockUniversalClient_TSRevRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TSRevRangeWithArgs_Call) RunAndReturn(run func(context.Context, string, int, int, *TSRevRangeOptions) *TSTimestampValueSliceCmd) *MockUniversalClient_TSRevRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TTL provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TTL(ctx context.Context, key string) *DurationCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TTL")
	}

	var r0 *DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DurationCmd)
		}
	}

	return r0
}

// MockUniversalClient_TTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TTL'
type MockUniversalClient_TTL_Call struct {
	*mock.Call
}

// TTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TTL(ctx interface{}, key interface{}) *MockUniversalClient_TTL_Call {
	return &MockUniversalClient_TTL_Call{Call: _e.mock.On("TTL", ctx, key)}
}

func (_c *MockUniversalClient_TTL_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TTL_Call) Return(_a0 *DurationCmd) *MockUniversalClient_TTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TTL_Call) RunAndReturn(run func(context.Context, string) *DurationCmd) *MockUniversalClient_TTL_Call {
	_c.Call.Return(run)
	return _c
}

// Time provides a mock function with given fields: ctx
func (_m *MockUniversalClient) Time(ctx context.Context) *TimeCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Time")
	}

	var r0 *TimeCmd
	if rf, ok := ret.Get(0).(func(context.Context) *TimeCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TimeCmd)
		}
	}

	return r0
}

// MockUniversalClient_Time_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Time'
type MockUniversalClient_Time_Call struct {
	*mock.Call
}

// Time is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUniversalClient_Expecter) Time(ctx interface{}) *MockUniversalClient_Time_Call {
	return &MockUniversalClient_Time_Call{Call: _e.mock.On("Time", ctx)}
}

func (_c *MockUniversalClient_Time_Call) Run(run func(ctx context.Context)) *MockUniversalClient_Time_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUniversalClient_Time_Call) Return(_a0 *TimeCmd) *MockUniversalClient_Time_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Time_Call) RunAndReturn(run func(context.Context) *TimeCmd) *MockUniversalClient_Time_Call {
	_c.Call.Return(run)
	return _c
}

// TopKAdd provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TopKAdd(ctx context.Context, key string, elements ...interface{}) *StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKAdd")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *StringSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKAdd'
type MockUniversalClient_TopKAdd_Call struct {
	*mock.Call
}

// TopKAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) TopKAdd(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TopKAdd_Call {
	return &MockUniversalClient_TopKAdd_Call{Call: _e.mock.On("TopKAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TopKAdd_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_TopKAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TopKAdd_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_TopKAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *StringSliceCmd) *MockUniversalClient_TopKAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TopKCount provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TopKCount(ctx context.Context, key string, elements ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKCount")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKCount'
type MockUniversalClient_TopKCount_Call struct {
	*mock.Call
}

// TopKCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) TopKCount(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TopKCount_Call {
	return &MockUniversalClient_TopKCount_Call{Call: _e.mock.On("TopKCount",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TopKCount_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_TopKCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TopKCount_Call) Return(_a0 *IntSliceCmd) *MockUniversalClient_TopKCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKCount_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntSliceCmd) *MockUniversalClient_TopKCount_Call {
	_c.Call.Return(run)
	return _c
}

// TopKIncrBy provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKIncrBy")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *StringSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKIncrBy'
type MockUniversalClient_TopKIncrBy_Call struct {
	*mock.Call
}

// TopKIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) TopKIncrBy(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TopKIncrBy_Call {
	return &MockUniversalClient_TopKIncrBy_Call{Call: _e.mock.On("TopKIncrBy",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TopKIncrBy_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_TopKIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TopKIncrBy_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_TopKIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKIncrBy_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *StringSliceCmd) *MockUniversalClient_TopKIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TopKInfo provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TopKInfo(ctx context.Context, key string) *TopKInfoCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TopKInfo")
	}

	var r0 *TopKInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *TopKInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TopKInfoCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKInfo'
type MockUniversalClient_TopKInfo_Call struct {
	*mock.Call
}

// TopKInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TopKInfo(ctx interface{}, key interface{}) *MockUniversalClient_TopKInfo_Call {
	return &MockUniversalClient_TopKInfo_Call{Call: _e.mock.On("TopKInfo", ctx, key)}
}

func (_c *MockUniversalClient_TopKInfo_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TopKInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TopKInfo_Call) Return(_a0 *TopKInfoCmd) *MockUniversalClient_TopKInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKInfo_Call) RunAndReturn(run func(context.Context, string) *TopKInfoCmd) *MockUniversalClient_TopKInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TopKList provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TopKList(ctx context.Context, key string) *StringSliceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TopKList")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKList'
type MockUniversalClient_TopKList_Call struct {
	*mock.Call
}

// TopKList is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TopKList(ctx interface{}, key interface{}) *MockUniversalClient_TopKList_Call {
	return &MockUniversalClient_TopKList_Call{Call: _e.mock.On("TopKList", ctx, key)}
}

func (_c *MockUniversalClient_TopKList_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TopKList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TopKList_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_TopKList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKList_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockUniversalClient_TopKList_Call {
	_c.Call.Return(run)
	return _c
}

// TopKListWithCount provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) TopKListWithCount(ctx context.Context, key string) *MapStringIntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TopKListWithCount")
	}

	var r0 *MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapStringIntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringIntCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKListWithCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKListWithCount'
type MockUniversalClient_TopKListWithCount_Call struct {
	*mock.Call
}

// TopKListWithCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) TopKListWithCount(ctx interface{}, key interface{}) *MockUniversalClient_TopKListWithCount_Call {
	return &MockUniversalClient_TopKListWithCount_Call{Call: _e.mock.On("TopKListWithCount", ctx, key)}
}

func (_c *MockUniversalClient_TopKListWithCount_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_TopKListWithCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_TopKListWithCount_Call) Return(_a0 *MapStringIntCmd) *MockUniversalClient_TopKListWithCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKListWithCount_Call) RunAndReturn(run func(context.Context, string) *MapStringIntCmd) *MockUniversalClient_TopKListWithCount_Call {
	_c.Call.Return(run)
	return _c
}

// TopKQuery provides a mock function with given fields: ctx, key, elements
func (_m *MockUniversalClient) TopKQuery(ctx context.Context, key string, elements ...interface{}) *BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TopKQuery")
	}

	var r0 *BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoolSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKQuery'
type MockUniversalClient_TopKQuery_Call struct {
	*mock.Call
}

// TopKQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *MockUniversalClient_Expecter) TopKQuery(ctx interface{}, key interface{}, elements ...interface{}) *MockUniversalClient_TopKQuery_Call {
	return &MockUniversalClient_TopKQuery_Call{Call: _e.mock.On("TopKQuery",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *MockUniversalClient_TopKQuery_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *MockUniversalClient_TopKQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_TopKQuery_Call) Return(_a0 *BoolSliceCmd) *MockUniversalClient_TopKQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *BoolSliceCmd) *MockUniversalClient_TopKQuery_Call {
	_c.Call.Return(run)
	return _c
}

// TopKReserve provides a mock function with given fields: ctx, key, k
func (_m *MockUniversalClient) TopKReserve(ctx context.Context, key string, k int64) *StatusCmd {
	ret := _m.Called(ctx, key, k)

	if len(ret) == 0 {
		panic("no return value specified for TopKReserve")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *StatusCmd); ok {
		r0 = rf(ctx, key, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKReserve'
type MockUniversalClient_TopKReserve_Call struct {
	*mock.Call
}

// TopKReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - k int64
func (_e *MockUniversalClient_Expecter) TopKReserve(ctx interface{}, key interface{}, k interface{}) *MockUniversalClient_TopKReserve_Call {
	return &MockUniversalClient_TopKReserve_Call{Call: _e.mock.On("TopKReserve", ctx, key, k)}
}

func (_c *MockUniversalClient_TopKReserve_Call) Run(run func(ctx context.Context, key string, k int64)) *MockUniversalClient_TopKReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_TopKReserve_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TopKReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKReserve_Call) RunAndReturn(run func(context.Context, string, int64) *StatusCmd) *MockUniversalClient_TopKReserve_Call {
	_c.Call.Return(run)
	return _c
}

// TopKReserveWithOptions provides a mock function with given fields: ctx, key, k, width, depth, decay
func (_m *MockUniversalClient) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *StatusCmd {
	ret := _m.Called(ctx, key, k, width, depth, decay)

	if len(ret) == 0 {
		panic("no return value specified for TopKReserveWithOptions")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int64, float64) *StatusCmd); ok {
		r0 = rf(ctx, key, k, width, depth, decay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_TopKReserveWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKReserveWithOptions'
type MockUniversalClient_TopKReserveWithOptions_Call struct {
	*mock.Call
}

// TopKReserveWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - k int64
//   - width int64
//   - depth int64
//   - decay float64
func (_e *MockUniversalClient_Expecter) TopKReserveWithOptions(ctx interface{}, key interface{}, k interface{}, width interface{}, depth interface{}, decay interface{}) *MockUniversalClient_TopKReserveWithOptions_Call {
	return &MockUniversalClient_TopKReserveWithOptions_Call{Call: _e.mock.On("TopKReserveWithOptions", ctx, key, k, width, depth, decay)}
}

func (_c *MockUniversalClient_TopKReserveWithOptions_Call) Run(run func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64)) *MockUniversalClient_TopKReserveWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64), args[4].(int64), args[5].(float64))
	})
	return _c
}

func (_c *MockUniversalClient_TopKReserveWithOptions_Call) Return(_a0 *StatusCmd) *MockUniversalClient_TopKReserveWithOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TopKReserveWithOptions_Call) RunAndReturn(run func(context.Context, string, int64, int64, int64, float64) *StatusCmd) *MockUniversalClient_TopKReserveWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Touch provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) Touch(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Touch")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Touch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Touch'
type MockUniversalClient_Touch_Call struct {
	*mock.Call
}

// Touch is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) Touch(ctx interface{}, keys ...interface{}) *MockUniversalClient_Touch_Call {
	return &MockUniversalClient_Touch_Call{Call: _e.mock.On("Touch",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_Touch_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_Touch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Touch_Call) Return(_a0 *IntCmd) *MockUniversalClient_Touch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Touch_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockUniversalClient_Touch_Call {
	_c.Call.Return(run)
	return _c
}

// TxPipeline provides a mock function with no fields
func (_m *MockUniversalClient) TxPipeline() Pipeliner {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxPipeline")
	}

	var r0 Pipeliner
	if rf, ok := ret.Get(0).(func() Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeliner)
		}
	}

	return r0
}

// MockUniversalClient_TxPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxPipeline'
type MockUniversalClient_TxPipeline_Call struct {
	*mock.Call
}

// TxPipeline is a helper method to define mock.On call
func (_e *MockUniversalClient_Expecter) TxPipeline() *MockUniversalClient_TxPipeline_Call {
	return &MockUniversalClient_TxPipeline_Call{Call: _e.mock.On("TxPipeline")}
}

func (_c *MockUniversalClient_TxPipeline_Call) Run(run func()) *MockUniversalClient_TxPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUniversalClient_TxPipeline_Call) Return(_a0 Pipeliner) *MockUniversalClient_TxPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_TxPipeline_Call) RunAndReturn(run func() Pipeliner) *MockUniversalClient_TxPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// TxPipelined provides a mock function with given fields: ctx, fn
func (_m *MockUniversalClient) TxPipelined(ctx context.Context, fn func(Pipeliner) error) ([]Cmder, error) {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for TxPipelined")
	}

	var r0 []Cmder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(Pipeliner) error) ([]Cmder, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(Pipeliner) error) []Cmder); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Cmder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(Pipeliner) error) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUniversalClient_TxPipelined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxPipelined'
type MockUniversalClient_TxPipelined_Call struct {
	*mock.Call
}

// TxPipelined is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(Pipeliner) error
func (_e *MockUniversalClient_Expecter) TxPipelined(ctx interface{}, fn interface{}) *MockUniversalClient_TxPipelined_Call {
	return &MockUniversalClient_TxPipelined_Call{Call: _e.mock.On("TxPipelined", ctx, fn)}
}

func (_c *MockUniversalClient_TxPipelined_Call) Run(run func(ctx context.Context, fn func(Pipeliner) error)) *MockUniversalClient_TxPipelined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(Pipeliner) error))
	})
	return _c
}

func (_c *MockUniversalClient_TxPipelined_Call) Return(_a0 []Cmder, _a1 error) *MockUniversalClient_TxPipelined_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUniversalClient_TxPipelined_Call) RunAndReturn(run func(context.Context, func(Pipeliner) error) ([]Cmder, error)) *MockUniversalClient_TxPipelined_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) Type(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockUniversalClient_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) Type(ctx interface{}, key interface{}) *MockUniversalClient_Type_Call {
	return &MockUniversalClient_Type_Call{Call: _e.mock.On("Type", ctx, key)}
}

func (_c *MockUniversalClient_Type_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_Type_Call) Return(_a0 *StatusCmd) *MockUniversalClient_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Type_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockUniversalClient_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Unlink provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) Unlink(ctx context.Context, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unlink")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_Unlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlink'
type MockUniversalClient_Unlink_Call struct {
	*mock.Call
}

// Unlink is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) Unlink(ctx interface{}, keys ...interface{}) *MockUniversalClient_Unlink_Call {
	return &MockUniversalClient_Unlink_Call{Call: _e.mock.On("Unlink",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_Unlink_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_Unlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Unlink_Call) Return(_a0 *IntCmd) *MockUniversalClient_Unlink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Unlink_Call) RunAndReturn(run func(context.Context, ...string) *IntCmd) *MockUniversalClient_Unlink_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, fn, keys
func (_m *MockUniversalClient) Watch(ctx context.Context, fn func(*Tx) error, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*Tx) error, ...string) error); ok {
		r0 = rf(ctx, fn, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUniversalClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockUniversalClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(*Tx) error
//   - keys ...string
func (_e *MockUniversalClient_Expecter) Watch(ctx interface{}, fn interface{}, keys ...interface{}) *MockUniversalClient_Watch_Call {
	return &MockUniversalClient_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, fn}, keys...)...)}
}

func (_c *MockUniversalClient_Watch_Call) Run(run func(ctx context.Context, fn func(*Tx) error, keys ...string)) *MockUniversalClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(func(*Tx) error), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_Watch_Call) Return(_a0 error) *MockUniversalClient_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_Watch_Call) RunAndReturn(run func(context.Context, func(*Tx) error, ...string) error) *MockUniversalClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// XAck provides a mock function with given fields: ctx, stream, group, ids
func (_m *MockUniversalClient) XAck(ctx context.Context, stream string, group string, ids ...string) *IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream, group)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for XAck")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, stream, group, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAck'
type MockUniversalClient_XAck_Call struct {
	*mock.Call
}

// XAck is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - ids ...string
func (_e *MockUniversalClient_Expecter) XAck(ctx interface{}, stream interface{}, group interface{}, ids ...interface{}) *MockUniversalClient_XAck_Call {
	return &MockUniversalClient_XAck_Call{Call: _e.mock.On("XAck",
		append([]interface{}{ctx, stream, group}, ids...)...)}
}

func (_c *MockUniversalClient_XAck_Call) Run(run func(ctx context.Context, stream string, group string, ids ...string)) *MockUniversalClient_XAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_XAck_Call) Return(_a0 *IntCmd) *MockUniversalClient_XAck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XAck_Call) RunAndReturn(run func(context.Context, string, string, ...string) *IntCmd) *MockUniversalClient_XAck_Call {
	_c.Call.Return(run)
	return _c
}

// XAdd provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XAdd(ctx context.Context, a *XAddArgs) *StringCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAdd")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XAddArgs) *StringCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockUniversalClient_XAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAdd'
type MockUniversalClient_XAdd_Call struct {
	*mock.Call
}

// XAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XAddArgs
func (_e *MockUniversalClient_Expecter) XAdd(ctx interface{}, a interface{}) *MockUniversalClient_XAdd_Call {
	return &MockUniversalClient_XAdd_Call{Call: _e.mock.On("XAdd", ctx, a)}
}

func (_c *MockUniversalClient_XAdd_Call) Run(run func(ctx context.Context, a *XAddArgs)) *MockUniversalClient_XAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XAddArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XAdd_Call) Return(_a0 *StringCmd) *MockUniversalClient_XAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XAdd_Call) RunAndReturn(run func(context.Context, *XAddArgs) *StringCmd) *MockUniversalClient_XAdd_Call {
	_c.Call.Return(run)
	return _c
}

// XAutoClaim provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XAutoClaim(ctx context.Context, a *XAutoClaimArgs) *XAutoClaimCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAutoClaim")
	}

	var r0 *XAutoClaimCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XAutoClaimArgs) *XAutoClaimCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XAutoClaimCmd)
		}
	}

	return r0
}

// MockUniversalClient_XAutoClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAutoClaim'
type MockUniversalClient_XAutoClaim_Call struct {
	*mock.Call
}

// XAutoClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XAutoClaimArgs
func (_e *MockUniversalClient_Expecter) XAutoClaim(ctx interface{}, a interface{}) *MockUniversalClient_XAutoClaim_Call {
	return &MockUniversalClient_XAutoClaim_Call{Call: _e.mock.On("XAutoClaim", ctx, a)}
}

func (_c *MockUniversalClient_XAutoClaim_Call) Run(run func(ctx context.Context, a *XAutoClaimArgs)) *MockUniversalClient_XAutoClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XAutoClaimArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XAutoClaim_Call) Return(_a0 *XAutoClaimCmd) *MockUniversalClient_XAutoClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XAutoClaim_Call) RunAndReturn(run func(context.Context, *XAutoClaimArgs) *XAutoClaimCmd) *MockUniversalClient_XAutoClaim_Call {
	_c.Call.Return(run)
	return _c
}

// XAutoClaimJustID provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XAutoClaimJustID(ctx context.Context, a *XAutoClaimArgs) *XAutoClaimJustIDCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAutoClaimJustID")
	}

	var r0 *XAutoClaimJustIDCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XAutoClaimArgs) *XAutoClaimJustIDCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XAutoClaimJustIDCmd)
		}
	}

	return r0
}

// MockUniversalClient_XAutoClaimJustID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAutoClaimJustID'
type MockUniversalClient_XAutoClaimJustID_Call struct {
	*mock.Call
}

// XAutoClaimJustID is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XAutoClaimArgs
func (_e *MockUniversalClient_Expecter) XAutoClaimJustID(ctx interface{}, a interface{}) *MockUniversalClient_XAutoClaimJustID_Call {
	return &MockUniversalClient_XAutoClaimJustID_Call{Call: _e.mock.On("XAutoClaimJustID", ctx, a)}
}

func (_c *MockUniversalClient_XAutoClaimJustID_Call) Run(run func(ctx context.Context, a *XAutoClaimArgs)) *MockUniversalClient_XAutoClaimJustID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XAutoClaimArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XAutoClaimJustID_Call) Return(_a0 *XAutoClaimJustIDCmd) *MockUniversalClient_XAutoClaimJustID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XAutoClaimJustID_Call) RunAndReturn(run func(context.Context, *XAutoClaimArgs) *XAutoClaimJustIDCmd) *MockUniversalClient_XAutoClaimJustID_Call {
	_c.Call.Return(run)
	return _c
}

// XClaim provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XClaim(ctx context.Context, a *XClaimArgs) *XMessageSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XClaim")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XClaimArgs) *XMessageSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XClaim'
type MockUniversalClient_XClaim_Call struct {
	*mock.Call
}

// XClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XClaimArgs
func (_e *MockUniversalClient_Expecter) XClaim(ctx interface{}, a interface{}) *MockUniversalClient_XClaim_Call {
	return &MockUniversalClient_XClaim_Call{Call: _e.mock.On("XClaim", ctx, a)}
}

func (_c *MockUniversalClient_XClaim_Call) Run(run func(ctx context.Context, a *XClaimArgs)) *MockUniversalClient_XClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XClaimArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XClaim_Call) Return(_a0 *XMessageSliceCmd) *MockUniversalClient_XClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XClaim_Call) RunAndReturn(run func(context.Context, *XClaimArgs) *XMessageSliceCmd) *MockUniversalClient_XClaim_Call {
	_c.Call.Return(run)
	return _c
}

// XClaimJustID provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XClaimJustID(ctx context.Context, a *XClaimArgs) *StringSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XClaimJustID")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XClaimArgs) *StringSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XClaimJustID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XClaimJustID'
type MockUniversalClient_XClaimJustID_Call struct {
	*mock.Call
}

// XClaimJustID is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XClaimArgs
func (_e *MockUniversalClient_Expecter) XClaimJustID(ctx interface{}, a interface{}) *MockUniversalClient_XClaimJustID_Call {
	return &MockUniversalClient_XClaimJustID_Call{Call: _e.mock.On("XClaimJustID", ctx, a)}
}

func (_c *MockUniversalClient_XClaimJustID_Call) Run(run func(ctx context.Context, a *XClaimArgs)) *MockUniversalClient_XClaimJustID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XClaimArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XClaimJustID_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_XClaimJustID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XClaimJustID_Call) RunAndReturn(run func(context.Context, *XClaimArgs) *StringSliceCmd) *MockUniversalClient_XClaimJustID_Call {
	_c.Call.Return(run)
	return _c
}

// XDel provides a mock function with given fields: ctx, stream, ids
func (_m *MockUniversalClient) XDel(ctx context.Context, stream string, ids ...string) *IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for XDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, stream, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XDel'
type MockUniversalClient_XDel_Call struct {
	*mock.Call
}

// XDel is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - ids ...string
func (_e *MockUniversalClient_Expecter) XDel(ctx interface{}, stream interface{}, ids ...interface{}) *MockUniversalClient_XDel_Call {
	return &MockUniversalClient_XDel_Call{Call: _e.mock.On("XDel",
		append([]interface{}{ctx, stream}, ids...)...)}
}

func (_c *MockUniversalClient_XDel_Call) Run(run func(ctx context.Context, stream string, ids ...string)) *MockUniversalClient_XDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_XDel_Call) Return(_a0 *IntCmd) *MockUniversalClient_XDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XDel_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_XDel_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreate provides a mock function with given fields: ctx, stream, group, start
func (_m *MockUniversalClient) XGroupCreate(ctx context.Context, stream string, group string, start string) *StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	if len(ret) == 0 {
		panic("no return value specified for XGroupCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_XGroupCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreate'
type MockUniversalClient_XGroupCreate_Call struct {
	*mock.Call
}

// XGroupCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *MockUniversalClient_Expecter) XGroupCreate(ctx interface{}, stream interface{}, group interface{}, start interface{}) *MockUniversalClient_XGroupCreate_Call {
	return &MockUniversalClient_XGroupCreate_Call{Call: _e.mock.On("XGroupCreate", ctx, stream, group, start)}
}

func (_c *MockUniversalClient_XGroupCreate_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *MockUniversalClient_XGroupCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XGroupCreate_Call) Return(_a0 *StatusCmd) *MockUniversalClient_XGroupCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XGroupCreate_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockUniversalClient_XGroupCreate_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreateConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *MockUniversalClient) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	if len(ret) == 0 {
		panic("no return value specified for XGroupCreateConsumer")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XGroupCreateConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateConsumer'
type MockUniversalClient_XGroupCreateConsumer_Call struct {
	*mock.Call
}

// XGroupCreateConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - consumer string
func (_e *MockUniversalClient_Expecter) XGroupCreateConsumer(ctx interface{}, stream interface{}, group interface{}, consumer interface{}) *MockUniversalClient_XGroupCreateConsumer_Call {
	return &MockUniversalClient_XGroupCreateConsumer_Call{Call: _e.mock.On("XGroupCreateConsumer", ctx, stream, group, consumer)}
}

func (_c *MockUniversalClient_XGroupCreateConsumer_Call) Run(run func(ctx context.Context, stream string, group string, consumer string)) *MockUniversalClient_XGroupCreateConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XGroupCreateConsumer_Call) Return(_a0 *IntCmd) *MockUniversalClient_XGroupCreateConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XGroupCreateConsumer_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockUniversalClient_XGroupCreateConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreateMkStream provides a mock function with given fields: ctx, stream, group, start
func (_m *MockUniversalClient) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	if len(ret) == 0 {
		panic("no return value specified for XGroupCreateMkStream")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_XGroupCreateMkStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateMkStream'
type MockUniversalClient_XGroupCreateMkStream_Call struct {
	*mock.Call
}

// XGroupCreateMkStream is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *MockUniversalClient_Expecter) XGroupCreateMkStream(ctx interface{}, stream interface{}, group interface{}, start interface{}) *MockUniversalClient_XGroupCreateMkStream_Call {
	return &MockUniversalClient_XGroupCreateMkStream_Call{Call: _e.mock.On("XGroupCreateMkStream", ctx, stream, group, start)}
}

func (_c *MockUniversalClient_XGroupCreateMkStream_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *MockUniversalClient_XGroupCreateMkStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XGroupCreateMkStream_Call) Return(_a0 *StatusCmd) *MockUniversalClient_XGroupCreateMkStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XGroupCreateMkStream_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockUniversalClient_XGroupCreateMkStream_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupDelConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *MockUniversalClient) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	if len(ret) == 0 {
		panic("no return value specified for XGroupDelConsumer")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XGroupDelConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupDelConsumer'
type MockUniversalClient_XGroupDelConsumer_Call struct {
	*mock.Call
}

// XGroupDelConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - consumer string
func (_e *MockUniversalClient_Expecter) XGroupDelConsumer(ctx interface{}, stream interface{}, group interface{}, consumer interface{}) *MockUniversalClient_XGroupDelConsumer_Call {
	return &MockUniversalClient_XGroupDelConsumer_Call{Call: _e.mock.On("XGroupDelConsumer", ctx, stream, group, consumer)}
}

func (_c *MockUniversalClient_XGroupDelConsumer_Call) Run(run func(ctx context.Context, stream string, group string, consumer string)) *MockUniversalClient_XGroupDelConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XGroupDelConsumer_Call) Return(_a0 *IntCmd) *MockUniversalClient_XGroupDelConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XGroupDelConsumer_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockUniversalClient_XGroupDelConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupDestroy provides a mock function with given fields: ctx, stream, group
func (_m *MockUniversalClient) XGroupDestroy(ctx context.Context, stream string, group string) *IntCmd {
	ret := _m.Called(ctx, stream, group)

	if len(ret) == 0 {
		panic("no return value specified for XGroupDestroy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XGroupDestroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupDestroy'
type MockUniversalClient_XGroupDestroy_Call struct {
	*mock.Call
}

// XGroupDestroy is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
func (_e *MockUniversalClient_Expecter) XGroupDestroy(ctx interface{}, stream interface{}, group interface{}) *MockUniversalClient_XGroupDestroy_Call {
	return &MockUniversalClient_XGroupDestroy_Call{Call: _e.mock.On("XGroupDestroy", ctx, stream, group)}
}

func (_c *MockUniversalClient_XGroupDestroy_Call) Run(run func(ctx context.Context, stream string, group string)) *MockUniversalClient_XGroupDestroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XGroupDestroy_Call) Return(_a0 *IntCmd) *MockUniversalClient_XGroupDestroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XGroupDestroy_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_XGroupDestroy_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupSetID provides a mock function with given fields: ctx, stream, group, start
func (_m *MockUniversalClient) XGroupSetID(ctx context.Context, stream string, group string, start string) *StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	if len(ret) == 0 {
		panic("no return value specified for XGroupSetID")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockUniversalClient_XGroupSetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupSetID'
type MockUniversalClient_XGroupSetID_Call struct {
	*mock.Call
}

// XGroupSetID is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *MockUniversalClient_Expecter) XGroupSetID(ctx interface{}, stream interface{}, group interface{}, start interface{}) *MockUniversalClient_XGroupSetID_Call {
	return &MockUniversalClient_XGroupSetID_Call{Call: _e.mock.On("XGroupSetID", ctx, stream, group, start)}
}

func (_c *MockUniversalClient_XGroupSetID_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *MockUniversalClient_XGroupSetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XGroupSetID_Call) Return(_a0 *StatusCmd) *MockUniversalClient_XGroupSetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XGroupSetID_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockUniversalClient_XGroupSetID_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoConsumers provides a mock function with given fields: ctx, key, group
func (_m *MockUniversalClient) XInfoConsumers(ctx context.Context, key string, group string) *XInfoConsumersCmd {
	ret := _m.Called(ctx, key, group)

	if len(ret) == 0 {
		panic("no return value specified for XInfoConsumers")
	}

	var r0 *XInfoConsumersCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *XInfoConsumersCmd); ok {
		r0 = rf(ctx, key, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoConsumersCmd)
		}
	}

	return r0
}

// MockUniversalClient_XInfoConsumers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoConsumers'
type MockUniversalClient_XInfoConsumers_Call struct {
	*mock.Call
}

// XInfoConsumers is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - group string
func (_e *MockUniversalClient_Expecter) XInfoConsumers(ctx interface{}, key interface{}, group interface{}) *MockUniversalClient_XInfoConsumers_Call {
	return &MockUniversalClient_XInfoConsumers_Call{Call: _e.mock.On("XInfoConsumers", ctx, key, group)}
}

func (_c *MockUniversalClient_XInfoConsumers_Call) Run(run func(ctx context.Context, key string, group string)) *MockUniversalClient_XInfoConsumers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XInfoConsumers_Call) Return(_a0 *XInfoConsumersCmd) *MockUniversalClient_XInfoConsumers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XInfoConsumers_Call) RunAndReturn(run func(context.Context, string, string) *XInfoConsumersCmd) *MockUniversalClient_XInfoConsumers_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoGroups provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) XInfoGroups(ctx context.Context, key string) *XInfoGroupsCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for XInfoGroups")
	}

	var r0 *XInfoGroupsCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *XInfoGroupsCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoGroupsCmd)
		}
	}

	return r0
}

// MockUniversalClient_XInfoGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoGroups'
type MockUniversalClient_XInfoGroups_Call struct {
	*mock.Call
}

// XInfoGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) XInfoGroups(ctx interface{}, key interface{}) *MockUniversalClient_XInfoGroups_Call {
	return &MockUniversalClient_XInfoGroups_Call{Call: _e.mock.On("XInfoGroups", ctx, key)}
}

func (_c *MockUniversalClient_XInfoGroups_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_XInfoGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XInfoGroups_Call) Return(_a0 *XInfoGroupsCmd) *MockUniversalClient_XInfoGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XInfoGroups_Call) RunAndReturn(run func(context.Context, string) *XInfoGroupsCmd) *MockUniversalClient_XInfoGroups_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoStream provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) XInfoStream(ctx context.Context, key string) *XInfoStreamCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for XInfoStream")
	}

	var r0 *XInfoStreamCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *XInfoStreamCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoStreamCmd)
		}
	}

	return r0
}

// MockUniversalClient_XInfoStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoStream'
type MockUniversalClient_XInfoStream_Call struct {
	*mock.Call
}

// XInfoStream is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) XInfoStream(ctx interface{}, key interface{}) *MockUniversalClient_XInfoStream_Call {
	return &MockUniversalClient_XInfoStream_Call{Call: _e.mock.On("XInfoStream", ctx, key)}
}

func (_c *MockUniversalClient_XInfoStream_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_XInfoStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XInfoStream_Call) Return(_a0 *XInfoStreamCmd) *MockUniversalClient_XInfoStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XInfoStream_Call) RunAndReturn(run func(context.Context, string) *XInfoStreamCmd) *MockUniversalClient_XInfoStream_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoStreamFull provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) XInfoStreamFull(ctx context.Context, key string, count int) *XInfoStreamFullCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for XInfoStreamFull")
	}

	var r0 *XInfoStreamFullCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *XInfoStreamFullCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XInfoStreamFullCmd)
		}
	}

	return r0
}

// MockUniversalClient_XInfoStreamFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoStreamFull'
type MockUniversalClient_XInfoStreamFull_Call struct {
	*mock.Call
}

// XInfoStreamFull is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) XInfoStreamFull(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_XInfoStreamFull_Call {
	return &MockUniversalClient_XInfoStreamFull_Call{Call: _e.mock.On("XInfoStreamFull", ctx, key, count)}
}

func (_c *MockUniversalClient_XInfoStreamFull_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_XInfoStreamFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_XInfoStreamFull_Call) Return(_a0 *XInfoStreamFullCmd) *MockUniversalClient_XInfoStreamFull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XInfoStreamFull_Call) RunAndReturn(run func(context.Context, string, int) *XInfoStreamFullCmd) *MockUniversalClient_XInfoStreamFull_Call {
	_c.Call.Return(run)
	return _c
}

// XLen provides a mock function with given fields: ctx, stream
func (_m *MockUniversalClient) XLen(ctx context.Context, stream string) *IntCmd {
	ret := _m.Called(ctx, stream)

	if len(ret) == 0 {
		panic("no return value specified for XLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XLen'
type MockUniversalClient_XLen_Call struct {
	*mock.Call
}

// XLen is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
func (_e *MockUniversalClient_Expecter) XLen(ctx interface{}, stream interface{}) *MockUniversalClient_XLen_Call {
	return &MockUniversalClient_XLen_Call{Call: _e.mock.On("XLen", ctx, stream)}
}

func (_c *MockUniversalClient_XLen_Call) Run(run func(ctx context.Context, stream string)) *MockUniversalClient_XLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XLen_Call) Return(_a0 *IntCmd) *MockUniversalClient_XLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XLen_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_XLen_Call {
	_c.Call.Return(run)
	return _c
}

// XPending provides a mock function with given fields: ctx, stream, group
func (_m *MockUniversalClient) XPending(ctx context.Context, stream string, group string) *XPendingCmd {
	ret := _m.Called(ctx, stream, group)

	if len(ret) == 0 {
		panic("no return value specified for XPending")
	}

	var r0 *XPendingCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *XPendingCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XPendingCmd)
		}
	}

	return r0
}

// MockUniversalClient_XPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XPending'
type MockUniversalClient_XPending_Call struct {
	*mock.Call
}

// XPending is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
func (_e *MockUniversalClient_Expecter) XPending(ctx interface{}, stream interface{}, group interface{}) *MockUniversalClient_XPending_Call {
	return &MockUniversalClient_XPending_Call{Call: _e.mock.On("XPending", ctx, stream, group)}
}

func (_c *MockUniversalClient_XPending_Call) Run(run func(ctx context.Context, stream string, group string)) *MockUniversalClient_XPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XPending_Call) Return(_a0 *XPendingCmd) *MockUniversalClient_XPending_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XPending_Call) RunAndReturn(run func(context.Context, string, string) *XPendingCmd) *MockUniversalClient_XPending_Call {
	_c.Call.Return(run)
	return _c
}

// XPendingExt provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XPendingExt(ctx context.Context, a *XPendingExtArgs) *XPendingExtCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XPendingExt")
	}

	var r0 *XPendingExtCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XPendingExtArgs) *XPendingExtCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XPendingExtCmd)
		}
	}

	return r0
}

// MockUniversalClient_XPendingExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XPendingExt'
type MockUniversalClient_XPendingExt_Call struct {
	*mock.Call
}

// XPendingExt is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XPendingExtArgs
func (_e *MockUniversalClient_Expecter) XPendingExt(ctx interface{}, a interface{}) *MockUniversalClient_XPendingExt_Call {
	return &MockUniversalClient_XPendingExt_Call{Call: _e.mock.On("XPendingExt", ctx, a)}
}

func (_c *MockUniversalClient_XPendingExt_Call) Run(run func(ctx context.Context, a *XPendingExtArgs)) *MockUniversalClient_XPendingExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XPendingExtArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XPendingExt_Call) Return(_a0 *XPendingExtCmd) *MockUniversalClient_XPendingExt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XPendingExt_Call) RunAndReturn(run func(context.Context, *XPendingExtArgs) *XPendingExtCmd) *MockUniversalClient_XPendingExt_Call {
	_c.Call.Return(run)
	return _c
}

// XRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *MockUniversalClient) XRange(ctx context.Context, stream string, start string, stop string) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for XRange")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRange'
type MockUniversalClient_XRange_Call struct {
	*mock.Call
}

// XRange is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
func (_e *MockUniversalClient_Expecter) XRange(ctx interface{}, stream interface{}, start interface{}, stop interface{}) *MockUniversalClient_XRange_Call {
	return &MockUniversalClient_XRange_Call{Call: _e.mock.On("XRange", ctx, stream, start, stop)}
}

func (_c *MockUniversalClient_XRange_Call) Run(run func(ctx context.Context, stream string, start string, stop string)) *MockUniversalClient_XRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XRange_Call) Return(_a0 *XMessageSliceCmd) *MockUniversalClient_XRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XRange_Call) RunAndReturn(run func(context.Context, string, string, string) *XMessageSliceCmd) *MockUniversalClient_XRange_Call {
	_c.Call.Return(run)
	return _c
}

// XRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *MockUniversalClient) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	if len(ret) == 0 {
		panic("no return value specified for XRangeN")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XRangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRangeN'
type MockUniversalClient_XRangeN_Call struct {
	*mock.Call
}

// XRangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
//   - count int64
func (_e *MockUniversalClient_Expecter) XRangeN(ctx interface{}, stream interface{}, start interface{}, stop interface{}, count interface{}) *MockUniversalClient_XRangeN_Call {
	return &MockUniversalClient_XRangeN_Call{Call: _e.mock.On("XRangeN", ctx, stream, start, stop, count)}
}

func (_c *MockUniversalClient_XRangeN_Call) Run(run func(ctx context.Context, stream string, start string, stop string, count int64)) *MockUniversalClient_XRangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_XRangeN_Call) Return(_a0 *XMessageSliceCmd) *MockUniversalClient_XRangeN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XRangeN_Call) RunAndReturn(run func(context.Context, string, string, string, int64) *XMessageSliceCmd) *MockUniversalClient_XRangeN_Call {
	_c.Call.Return(run)
	return _c
}

// XRead provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XRead(ctx context.Context, a *XReadArgs) *XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XRead")
	}

	var r0 *XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XReadArgs) *XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XStreamSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRead'
type MockUniversalClient_XRead_Call struct {
	*mock.Call
}

// XRead is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XReadArgs
func (_e *MockUniversalClient_Expecter) XRead(ctx interface{}, a interface{}) *MockUniversalClient_XRead_Call {
	return &MockUniversalClient_XRead_Call{Call: _e.mock.On("XRead", ctx, a)}
}

func (_c *MockUniversalClient_XRead_Call) Run(run func(ctx context.Context, a *XReadArgs)) *MockUniversalClient_XRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XReadArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XRead_Call) Return(_a0 *XStreamSliceCmd) *MockUniversalClient_XRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XRead_Call) RunAndReturn(run func(context.Context, *XReadArgs) *XStreamSliceCmd) *MockUniversalClient_XRead_Call {
	_c.Call.Return(run)
	return _c
}

// XReadGroup provides a mock function with given fields: ctx, a
func (_m *MockUniversalClient) XReadGroup(ctx context.Context, a *XReadGroupArgs) *XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XReadGroup")
	}

	var r0 *XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *XReadGroupArgs) *XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XStreamSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XReadGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadGroup'
type MockUniversalClient_XReadGroup_Call struct {
	*mock.Call
}

// XReadGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - a *XReadGroupArgs
func (_e *MockUniversalClient_Expecter) XReadGroup(ctx interface{}, a interface{}) *MockUniversalClient_XReadGroup_Call {
	return &MockUniversalClient_XReadGroup_Call{Call: _e.mock.On("XReadGroup", ctx, a)}
}

func (_c *MockUniversalClient_XReadGroup_Call) Run(run func(ctx context.Context, a *XReadGroupArgs)) *MockUniversalClient_XReadGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*XReadGroupArgs))
	})
	return _c
}

func (_c *MockUniversalClient_XReadGroup_Call) Return(_a0 *XStreamSliceCmd) *MockUniversalClient_XReadGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XReadGroup_Call) RunAndReturn(run func(context.Context, *XReadGroupArgs) *XStreamSliceCmd) *MockUniversalClient_XReadGroup_Call {
	_c.Call.Return(run)
	return _c
}

// XReadStreams provides a mock function with given fields: ctx, streams
func (_m *MockUniversalClient) XReadStreams(ctx context.Context, streams ...string) *XStreamSliceCmd {
	_va := make([]interface{}, len(streams))
	for _i := range streams {
		_va[_i] = streams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for XReadStreams")
	}

	var r0 *XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *XStreamSliceCmd); ok {
		r0 = rf(ctx, streams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XStreamSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XReadStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadStreams'
type MockUniversalClient_XReadStreams_Call struct {
	*mock.Call
}

// XReadStreams is a helper method to define mock.On call
//   - ctx context.Context
//   - streams ...string
func (_e *MockUniversalClient_Expecter) XReadStreams(ctx interface{}, streams ...interface{}) *MockUniversalClient_XReadStreams_Call {
	return &MockUniversalClient_XReadStreams_Call{Call: _e.mock.On("XReadStreams",
		append([]interface{}{ctx}, streams...)...)}
}

func (_c *MockUniversalClient_XReadStreams_Call) Run(run func(ctx context.Context, streams ...string)) *MockUniversalClient_XReadStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_XReadStreams_Call) Return(_a0 *XStreamSliceCmd) *MockUniversalClient_XReadStreams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XReadStreams_Call) RunAndReturn(run func(context.Context, ...string) *XStreamSliceCmd) *MockUniversalClient_XReadStreams_Call {
	_c.Call.Return(run)
	return _c
}

// XRevRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *MockUniversalClient) XRevRange(ctx context.Context, stream string, start string, stop string) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for XRevRange")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRevRange'
type MockUniversalClient_XRevRange_Call struct {
	*mock.Call
}

// XRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
func (_e *MockUniversalClient_Expecter) XRevRange(ctx interface{}, stream interface{}, start interface{}, stop interface{}) *MockUniversalClient_XRevRange_Call {
	return &MockUniversalClient_XRevRange_Call{Call: _e.mock.On("XRevRange", ctx, stream, start, stop)}
}

func (_c *MockUniversalClient_XRevRange_Call) Run(run func(ctx context.Context, stream string, start string, stop string)) *MockUniversalClient_XRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XRevRange_Call) Return(_a0 *XMessageSliceCmd) *MockUniversalClient_XRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XRevRange_Call) RunAndReturn(run func(context.Context, string, string, string) *XMessageSliceCmd) *MockUniversalClient_XRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// XRevRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *MockUniversalClient) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	if len(ret) == 0 {
		panic("no return value specified for XRevRangeN")
	}

	var r0 *XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*XMessageSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_XRevRangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRevRangeN'
type MockUniversalClient_XRevRangeN_Call struct {
	*mock.Call
}

// XRevRangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
//   - count int64
func (_e *MockUniversalClient_Expecter) XRevRangeN(ctx interface{}, stream interface{}, start interface{}, stop interface{}, count interface{}) *MockUniversalClient_XRevRangeN_Call {
	return &MockUniversalClient_XRevRangeN_Call{Call: _e.mock.On("XRevRangeN", ctx, stream, start, stop, count)}
}

func (_c *MockUniversalClient_XRevRangeN_Call) Run(run func(ctx context.Context, stream string, start string, stop string, count int64)) *MockUniversalClient_XRevRangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_XRevRangeN_Call) Return(_a0 *XMessageSliceCmd) *MockUniversalClient_XRevRangeN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XRevRangeN_Call) RunAndReturn(run func(context.Context, string, string, string, int64) *XMessageSliceCmd) *MockUniversalClient_XRevRangeN_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMaxLen provides a mock function with given fields: ctx, key, maxLen
func (_m *MockUniversalClient) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *IntCmd {
	ret := _m.Called(ctx, key, maxLen)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMaxLen")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, maxLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XTrimMaxLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMaxLen'
type MockUniversalClient_XTrimMaxLen_Call struct {
	*mock.Call
}

// XTrimMaxLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - maxLen int64
func (_e *MockUniversalClient_Expecter) XTrimMaxLen(ctx interface{}, key interface{}, maxLen interface{}) *MockUniversalClient_XTrimMaxLen_Call {
	return &MockUniversalClient_XTrimMaxLen_Call{Call: _e.mock.On("XTrimMaxLen", ctx, key, maxLen)}
}

func (_c *MockUniversalClient_XTrimMaxLen_Call) Run(run func(ctx context.Context, key string, maxLen int64)) *MockUniversalClient_XTrimMaxLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_XTrimMaxLen_Call) Return(_a0 *IntCmd) *MockUniversalClient_XTrimMaxLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XTrimMaxLen_Call) RunAndReturn(run func(context.Context, string, int64) *IntCmd) *MockUniversalClient_XTrimMaxLen_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMaxLenApprox provides a mock function with given fields: ctx, key, maxLen, limit
func (_m *MockUniversalClient) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *IntCmd {
	ret := _m.Called(ctx, key, maxLen, limit)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMaxLenApprox")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *IntCmd); ok {
		r0 = rf(ctx, key, maxLen, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XTrimMaxLenApprox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMaxLenApprox'
type MockUniversalClient_XTrimMaxLenApprox_Call struct {
	*mock.Call
}

// XTrimMaxLenApprox is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - maxLen int64
//   - limit int64
func (_e *MockUniversalClient_Expecter) XTrimMaxLenApprox(ctx interface{}, key interface{}, maxLen interface{}, limit interface{}) *MockUniversalClient_XTrimMaxLenApprox_Call {
	return &MockUniversalClient_XTrimMaxLenApprox_Call{Call: _e.mock.On("XTrimMaxLenApprox", ctx, key, maxLen, limit)}
}

func (_c *MockUniversalClient_XTrimMaxLenApprox_Call) Run(run func(ctx context.Context, key string, maxLen int64, limit int64)) *MockUniversalClient_XTrimMaxLenApprox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_XTrimMaxLenApprox_Call) Return(_a0 *IntCmd) *MockUniversalClient_XTrimMaxLenApprox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XTrimMaxLenApprox_Call) RunAndReturn(run func(context.Context, string, int64, int64) *IntCmd) *MockUniversalClient_XTrimMaxLenApprox_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMinID provides a mock function with given fields: ctx, key, minID
func (_m *MockUniversalClient) XTrimMinID(ctx context.Context, key string, minID string) *IntCmd {
	ret := _m.Called(ctx, key, minID)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMinID")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, minID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XTrimMinID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMinID'
type MockUniversalClient_XTrimMinID_Call struct {
	*mock.Call
}

// XTrimMinID is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - minID string
func (_e *MockUniversalClient_Expecter) XTrimMinID(ctx interface{}, key interface{}, minID interface{}) *MockUniversalClient_XTrimMinID_Call {
	return &MockUniversalClient_XTrimMinID_Call{Call: _e.mock.On("XTrimMinID", ctx, key, minID)}
}

func (_c *MockUniversalClient_XTrimMinID_Call) Run(run func(ctx context.Context, key string, minID string)) *MockUniversalClient_XTrimMinID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_XTrimMinID_Call) Return(_a0 *IntCmd) *MockUniversalClient_XTrimMinID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XTrimMinID_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_XTrimMinID_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMinIDApprox provides a mock function with given fields: ctx, key, minID, limit
func (_m *MockUniversalClient) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *IntCmd {
	ret := _m.Called(ctx, key, minID, limit)

	if len(ret) == 0 {
		panic("no return value specified for XTrimMinIDApprox")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *IntCmd); ok {
		r0 = rf(ctx, key, minID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_XTrimMinIDApprox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMinIDApprox'
type MockUniversalClient_XTrimMinIDApprox_Call struct {
	*mock.Call
}

// XTrimMinIDApprox is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - minID string
//   - limit int64
func (_e *MockUniversalClient_Expecter) XTrimMinIDApprox(ctx interface{}, key interface{}, minID interface{}, limit interface{}) *MockUniversalClient_XTrimMinIDApprox_Call {
	return &MockUniversalClient_XTrimMinIDApprox_Call{Call: _e.mock.On("XTrimMinIDApprox", ctx, key, minID, limit)}
}

func (_c *MockUniversalClient_XTrimMinIDApprox_Call) Run(run func(ctx context.Context, key string, minID string, limit int64)) *MockUniversalClient_XTrimMinIDApprox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_XTrimMinIDApprox_Call) Return(_a0 *IntCmd) *MockUniversalClient_XTrimMinIDApprox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_XTrimMinIDApprox_Call) RunAndReturn(run func(context.Context, string, string, int64) *IntCmd) *MockUniversalClient_XTrimMinIDApprox_Call {
	_c.Call.Return(run)
	return _c
}

// ZAdd provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZAdd(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAdd'
type MockUniversalClient_ZAdd_Call struct {
	*mock.Call
}

// ZAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockUniversalClient_Expecter) ZAdd(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZAdd_Call {
	return &MockUniversalClient_ZAdd_Call{Call: _e.mock.On("ZAdd",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZAdd_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockUniversalClient_ZAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZAdd_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAdd_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockUniversalClient_ZAdd_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddArgs provides a mock function with given fields: ctx, key, args
func (_m *MockUniversalClient) ZAddArgs(ctx context.Context, key string, args ZAddArgs) *IntCmd {
	ret := _m.Called(ctx, key, args)

	if len(ret) == 0 {
		panic("no return value specified for ZAddArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ZAddArgs) *IntCmd); ok {
		r0 = rf(ctx, key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAddArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddArgs'
type MockUniversalClient_ZAddArgs_Call struct {
	*mock.Call
}

// ZAddArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args ZAddArgs
func (_e *MockUniversalClient_Expecter) ZAddArgs(ctx interface{}, key interface{}, args interface{}) *MockUniversalClient_ZAddArgs_Call {
	return &MockUniversalClient_ZAddArgs_Call{Call: _e.mock.On("ZAddArgs", ctx, key, args)}
}

func (_c *MockUniversalClient_ZAddArgs_Call) Run(run func(ctx context.Context, key string, args ZAddArgs)) *MockUniversalClient_ZAddArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ZAddArgs))
	})
	return _c
}

func (_c *MockUniversalClient_ZAddArgs_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZAddArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAddArgs_Call) RunAndReturn(run func(context.Context, string, ZAddArgs) *IntCmd) *MockUniversalClient_ZAddArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddArgsIncr provides a mock function with given fields: ctx, key, args
func (_m *MockUniversalClient) ZAddArgsIncr(ctx context.Context, key string, args ZAddArgs) *FloatCmd {
	ret := _m.Called(ctx, key, args)

	if len(ret) == 0 {
		panic("no return value specified for ZAddArgsIncr")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ZAddArgs) *FloatCmd); ok {
		r0 = rf(ctx, key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAddArgsIncr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddArgsIncr'
type MockUniversalClient_ZAddArgsIncr_Call struct {
	*mock.Call
}

// ZAddArgsIncr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args ZAddArgs
func (_e *MockUniversalClient_Expecter) ZAddArgsIncr(ctx interface{}, key interface{}, args interface{}) *MockUniversalClient_ZAddArgsIncr_Call {
	return &MockUniversalClient_ZAddArgsIncr_Call{Call: _e.mock.On("ZAddArgsIncr", ctx, key, args)}
}

func (_c *MockUniversalClient_ZAddArgsIncr_Call) Run(run func(ctx context.Context, key string, args ZAddArgs)) *MockUniversalClient_ZAddArgsIncr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ZAddArgs))
	})
	return _c
}

func (_c *MockUniversalClient_ZAddArgsIncr_Call) Return(_a0 *FloatCmd) *MockUniversalClient_ZAddArgsIncr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAddArgsIncr_Call) RunAndReturn(run func(context.Context, string, ZAddArgs) *FloatCmd) *MockUniversalClient_ZAddArgsIncr_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddGT provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZAddGT(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddGT")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAddGT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddGT'
type MockUniversalClient_ZAddGT_Call struct {
	*mock.Call
}

// ZAddGT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockUniversalClient_Expecter) ZAddGT(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZAddGT_Call {
	return &MockUniversalClient_ZAddGT_Call{Call: _e.mock.On("ZAddGT",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZAddGT_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockUniversalClient_ZAddGT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZAddGT_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZAddGT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAddGT_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockUniversalClient_ZAddGT_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddLT provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZAddLT(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddLT")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAddLT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddLT'
type MockUniversalClient_ZAddLT_Call struct {
	*mock.Call
}

// ZAddLT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockUniversalClient_Expecter) ZAddLT(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZAddLT_Call {
	return &MockUniversalClient_ZAddLT_Call{Call: _e.mock.On("ZAddLT",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZAddLT_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockUniversalClient_ZAddLT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZAddLT_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZAddLT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAddLT_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockUniversalClient_ZAddLT_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddNX provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZAddNX(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddNX")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAddNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddNX'
type MockUniversalClient_ZAddNX_Call struct {
	*mock.Call
}

// ZAddNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockUniversalClient_Expecter) ZAddNX(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZAddNX_Call {
	return &MockUniversalClient_ZAddNX_Call{Call: _e.mock.On("ZAddNX",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZAddNX_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockUniversalClient_ZAddNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZAddNX_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZAddNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAddNX_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockUniversalClient_ZAddNX_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddXX provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZAddXX(ctx context.Context, key string, members ...Z) *IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZAddXX")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...Z) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZAddXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddXX'
type MockUniversalClient_ZAddXX_Call struct {
	*mock.Call
}

// ZAddXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...Z
func (_e *MockUniversalClient_Expecter) ZAddXX(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZAddXX_Call {
	return &MockUniversalClient_ZAddXX_Call{Call: _e.mock.On("ZAddXX",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZAddXX_Call) Run(run func(ctx context.Context, key string, members ...Z)) *MockUniversalClient_ZAddXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZAddXX_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZAddXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZAddXX_Call) RunAndReturn(run func(context.Context, string, ...Z) *IntCmd) *MockUniversalClient_ZAddXX_Call {
	_c.Call.Return(run)
	return _c
}

// ZCard provides a mock function with given fields: ctx, key
func (_m *MockUniversalClient) ZCard(ctx context.Context, key string) *IntCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ZCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCard'
type MockUniversalClient_ZCard_Call struct {
	*mock.Call
}

// ZCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockUniversalClient_Expecter) ZCard(ctx interface{}, key interface{}) *MockUniversalClient_ZCard_Call {
	return &MockUniversalClient_ZCard_Call{Call: _e.mock.On("ZCard", ctx, key)}
}

func (_c *MockUniversalClient_ZCard_Call) Run(run func(ctx context.Context, key string)) *MockUniversalClient_ZCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZCard_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZCard_Call) RunAndReturn(run func(context.Context, string) *IntCmd) *MockUniversalClient_ZCard_Call {
	_c.Call.Return(run)
	return _c
}

// ZCount provides a mock function with given fields: ctx, key, min, max
func (_m *MockUniversalClient) ZCount(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCount'
type MockUniversalClient_ZCount_Call struct {
	*mock.Call
}

// ZCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockUniversalClient_Expecter) ZCount(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockUniversalClient_ZCount_Call {
	return &MockUniversalClient_ZCount_Call{Call: _e.mock.On("ZCount", ctx, key, min, max)}
}

func (_c *MockUniversalClient_ZCount_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockUniversalClient_ZCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZCount_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZCount_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockUniversalClient_ZCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiff provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) ZDiff(ctx context.Context, keys ...string) *StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZDiff")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiff'
type MockUniversalClient_ZDiff_Call struct {
	*mock.Call
}

// ZDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) ZDiff(ctx interface{}, keys ...interface{}) *MockUniversalClient_ZDiff_Call {
	return &MockUniversalClient_ZDiff_Call{Call: _e.mock.On("ZDiff",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_ZDiff_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_ZDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZDiff_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZDiff_Call) RunAndReturn(run func(context.Context, ...string) *StringSliceCmd) *MockUniversalClient_ZDiff_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *MockUniversalClient) ZDiffStore(ctx context.Context, destination string, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZDiffStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZDiffStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiffStore'
type MockUniversalClient_ZDiffStore_Call struct {
	*mock.Call
}

// ZDiffStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *MockUniversalClient_Expecter) ZDiffStore(ctx interface{}, destination interface{}, keys ...interface{}) *MockUniversalClient_ZDiffStore_Call {
	return &MockUniversalClient_ZDiffStore_Call{Call: _e.mock.On("ZDiffStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *MockUniversalClient_ZDiffStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *MockUniversalClient_ZDiffStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZDiffStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZDiffStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZDiffStore_Call) RunAndReturn(run func(context.Context, string, ...string) *IntCmd) *MockUniversalClient_ZDiffStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiffWithScores provides a mock function with given fields: ctx, keys
func (_m *MockUniversalClient) ZDiffWithScores(ctx context.Context, keys ...string) *ZSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZDiffWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *ZSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZDiffWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiffWithScores'
type MockUniversalClient_ZDiffWithScores_Call struct {
	*mock.Call
}

// ZDiffWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockUniversalClient_Expecter) ZDiffWithScores(ctx interface{}, keys ...interface{}) *MockUniversalClient_ZDiffWithScores_Call {
	return &MockUniversalClient_ZDiffWithScores_Call{Call: _e.mock.On("ZDiffWithScores",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockUniversalClient_ZDiffWithScores_Call) Run(run func(ctx context.Context, keys ...string)) *MockUniversalClient_ZDiffWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZDiffWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZDiffWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZDiffWithScores_Call) RunAndReturn(run func(context.Context, ...string) *ZSliceCmd) *MockUniversalClient_ZDiffWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZIncrBy provides a mock function with given fields: ctx, key, increment, member
func (_m *MockUniversalClient) ZIncrBy(ctx context.Context, key string, increment float64, member string) *FloatCmd {
	ret := _m.Called(ctx, key, increment, member)

	if len(ret) == 0 {
		panic("no return value specified for ZIncrBy")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string) *FloatCmd); ok {
		r0 = rf(ctx, key, increment, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZIncrBy'
type MockUniversalClient_ZIncrBy_Call struct {
	*mock.Call
}

// ZIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - increment float64
//   - member string
func (_e *MockUniversalClient_Expecter) ZIncrBy(ctx interface{}, key interface{}, increment interface{}, member interface{}) *MockUniversalClient_ZIncrBy_Call {
	return &MockUniversalClient_ZIncrBy_Call{Call: _e.mock.On("ZIncrBy", ctx, key, increment, member)}
}

func (_c *MockUniversalClient_ZIncrBy_Call) Run(run func(ctx context.Context, key string, increment float64, member string)) *MockUniversalClient_ZIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZIncrBy_Call) Return(_a0 *FloatCmd) *MockUniversalClient_ZIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZIncrBy_Call) RunAndReturn(run func(context.Context, string, float64, string) *FloatCmd) *MockUniversalClient_ZIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// ZInter provides a mock function with given fields: ctx, store
func (_m *MockUniversalClient) ZInter(ctx context.Context, store *ZStore) *StringSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZInter")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *ZStore) *StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZInter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInter'
type MockUniversalClient_ZInter_Call struct {
	*mock.Call
}

// ZInter is a helper method to define mock.On call
//   - ctx context.Context
//   - store *ZStore
func (_e *MockUniversalClient_Expecter) ZInter(ctx interface{}, store interface{}) *MockUniversalClient_ZInter_Call {
	return &MockUniversalClient_ZInter_Call{Call: _e.mock.On("ZInter", ctx, store)}
}

func (_c *MockUniversalClient_ZInter_Call) Run(run func(ctx context.Context, store *ZStore)) *MockUniversalClient_ZInter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ZStore))
	})
	return _c
}

func (_c *MockUniversalClient_ZInter_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZInter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZInter_Call) RunAndReturn(run func(context.Context, *ZStore) *StringSliceCmd) *MockUniversalClient_ZInter_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterCard provides a mock function with given fields: ctx, limit, keys
func (_m *MockUniversalClient) ZInterCard(ctx context.Context, limit int64, keys ...string) *IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZInterCard")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) *IntCmd); ok {
		r0 = rf(ctx, limit, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZInterCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterCard'
type MockUniversalClient_ZInterCard_Call struct {
	*mock.Call
}

// ZInterCard is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - keys ...string
func (_e *MockUniversalClient_Expecter) ZInterCard(ctx interface{}, limit interface{}, keys ...interface{}) *MockUniversalClient_ZInterCard_Call {
	return &MockUniversalClient_ZInterCard_Call{Call: _e.mock.On("ZInterCard",
		append([]interface{}{ctx, limit}, keys...)...)}
}

func (_c *MockUniversalClient_ZInterCard_Call) Run(run func(ctx context.Context, limit int64, keys ...string)) *MockUniversalClient_ZInterCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZInterCard_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZInterCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZInterCard_Call) RunAndReturn(run func(context.Context, int64, ...string) *IntCmd) *MockUniversalClient_ZInterCard_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterStore provides a mock function with given fields: ctx, destination, store
func (_m *MockUniversalClient) ZInterStore(ctx context.Context, destination string, store *ZStore) *IntCmd {
	ret := _m.Called(ctx, destination, store)

	if len(ret) == 0 {
		panic("no return value specified for ZInterStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZStore) *IntCmd); ok {
		r0 = rf(ctx, destination, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZInterStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterStore'
type MockUniversalClient_ZInterStore_Call struct {
	*mock.Call
}

// ZInterStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - store *ZStore
func (_e *MockUniversalClient_Expecter) ZInterStore(ctx interface{}, destination interface{}, store interface{}) *MockUniversalClient_ZInterStore_Call {
	return &MockUniversalClient_ZInterStore_Call{Call: _e.mock.On("ZInterStore", ctx, destination, store)}
}

func (_c *MockUniversalClient_ZInterStore_Call) Run(run func(ctx context.Context, destination string, store *ZStore)) *MockUniversalClient_ZInterStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZStore))
	})
	return _c
}

func (_c *MockUniversalClient_ZInterStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZInterStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZInterStore_Call) RunAndReturn(run func(context.Context, string, *ZStore) *IntCmd) *MockUniversalClient_ZInterStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterWithScores provides a mock function with given fields: ctx, store
func (_m *MockUniversalClient) ZInterWithScores(ctx context.Context, store *ZStore) *ZSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZInterWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *ZStore) *ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZInterWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterWithScores'
type MockUniversalClient_ZInterWithScores_Call struct {
	*mock.Call
}

// ZInterWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - store *ZStore
func (_e *MockUniversalClient_Expecter) ZInterWithScores(ctx interface{}, store interface{}) *MockUniversalClient_ZInterWithScores_Call {
	return &MockUniversalClient_ZInterWithScores_Call{Call: _e.mock.On("ZInterWithScores", ctx, store)}
}

func (_c *MockUniversalClient_ZInterWithScores_Call) Run(run func(ctx context.Context, store *ZStore)) *MockUniversalClient_ZInterWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ZStore))
	})
	return _c
}

func (_c *MockUniversalClient_ZInterWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZInterWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZInterWithScores_Call) RunAndReturn(run func(context.Context, *ZStore) *ZSliceCmd) *MockUniversalClient_ZInterWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZLexCount provides a mock function with given fields: ctx, key, min, max
func (_m *MockUniversalClient) ZLexCount(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZLexCount")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZLexCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZLexCount'
type MockUniversalClient_ZLexCount_Call struct {
	*mock.Call
}

// ZLexCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockUniversalClient_Expecter) ZLexCount(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockUniversalClient_ZLexCount_Call {
	return &MockUniversalClient_ZLexCount_Call{Call: _e.mock.On("ZLexCount", ctx, key, min, max)}
}

func (_c *MockUniversalClient_ZLexCount_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockUniversalClient_ZLexCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZLexCount_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZLexCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZLexCount_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockUniversalClient_ZLexCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZMPop provides a mock function with given fields: ctx, order, count, keys
func (_m *MockUniversalClient) ZMPop(ctx context.Context, order string, count int64, keys ...string) *ZSliceWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, order, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZMPop")
	}

	var r0 *ZSliceWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...string) *ZSliceWithKeyCmd); ok {
		r0 = rf(ctx, order, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceWithKeyCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZMPop'
type MockUniversalClient_ZMPop_Call struct {
	*mock.Call
}

// ZMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - order string
//   - count int64
//   - keys ...string
func (_e *MockUniversalClient_Expecter) ZMPop(ctx interface{}, order interface{}, count interface{}, keys ...interface{}) *MockUniversalClient_ZMPop_Call {
	return &MockUniversalClient_ZMPop_Call{Call: _e.mock.On("ZMPop",
		append([]interface{}{ctx, order, count}, keys...)...)}
}

func (_c *MockUniversalClient_ZMPop_Call) Run(run func(ctx context.Context, order string, count int64, keys ...string)) *MockUniversalClient_ZMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZMPop_Call) Return(_a0 *ZSliceWithKeyCmd) *MockUniversalClient_ZMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZMPop_Call) RunAndReturn(run func(context.Context, string, int64, ...string) *ZSliceWithKeyCmd) *MockUniversalClient_ZMPop_Call {
	_c.Call.Return(run)
	return _c
}

// ZMScore provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZMScore(ctx context.Context, key string, members ...string) *FloatSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZMScore")
	}

	var r0 *FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *FloatSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZMScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZMScore'
type MockUniversalClient_ZMScore_Call struct {
	*mock.Call
}

// ZMScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *MockUniversalClient_Expecter) ZMScore(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZMScore_Call {
	return &MockUniversalClient_ZMScore_Call{Call: _e.mock.On("ZMScore",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZMScore_Call) Run(run func(ctx context.Context, key string, members ...string)) *MockUniversalClient_ZMScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZMScore_Call) Return(_a0 *FloatSliceCmd) *MockUniversalClient_ZMScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZMScore_Call) RunAndReturn(run func(context.Context, string, ...string) *FloatSliceCmd) *MockUniversalClient_ZMScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZPopMax provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) ZPopMax(ctx context.Context, key string, count ...int64) *ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZPopMax")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZPopMax'
type MockUniversalClient_ZPopMax_Call struct {
	*mock.Call
}

// ZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count ...int64
func (_e *MockUniversalClient_Expecter) ZPopMax(ctx interface{}, key interface{}, count ...interface{}) *MockUniversalClient_ZPopMax_Call {
	return &MockUniversalClient_ZPopMax_Call{Call: _e.mock.On("ZPopMax",
		append([]interface{}{ctx, key}, count...)...)}
}

func (_c *MockUniversalClient_ZPopMax_Call) Run(run func(ctx context.Context, key string, count ...int64)) *MockUniversalClient_ZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZPopMax_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZPopMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZPopMax_Call) RunAndReturn(run func(context.Context, string, ...int64) *ZSliceCmd) *MockUniversalClient_ZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// ZPopMin provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) ZPopMin(ctx context.Context, key string, count ...int64) *ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZPopMin")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZPopMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZPopMin'
type MockUniversalClient_ZPopMin_Call struct {
	*mock.Call
}

// ZPopMin is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count ...int64
func (_e *MockUniversalClient_Expecter) ZPopMin(ctx interface{}, key interface{}, count ...interface{}) *MockUniversalClient_ZPopMin_Call {
	return &MockUniversalClient_ZPopMin_Call{Call: _e.mock.On("ZPopMin",
		append([]interface{}{ctx, key}, count...)...)}
}

func (_c *MockUniversalClient_ZPopMin_Call) Run(run func(ctx context.Context, key string, count ...int64)) *MockUniversalClient_ZPopMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZPopMin_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZPopMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZPopMin_Call) RunAndReturn(run func(context.Context, string, ...int64) *ZSliceCmd) *MockUniversalClient_ZPopMin_Call {
	_c.Call.Return(run)
	return _c
}

// ZRandMember provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) ZRandMember(ctx context.Context, key string, count int) *StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for ZRandMember")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRandMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRandMember'
type MockUniversalClient_ZRandMember_Call struct {
	*mock.Call
}

// ZRandMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) ZRandMember(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_ZRandMember_Call {
	return &MockUniversalClient_ZRandMember_Call{Call: _e.mock.On("ZRandMember", ctx, key, count)}
}

func (_c *MockUniversalClient_ZRandMember_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_ZRandMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_ZRandMember_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRandMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRandMember_Call) RunAndReturn(run func(context.Context, string, int) *StringSliceCmd) *MockUniversalClient_ZRandMember_Call {
	_c.Call.Return(run)
	return _c
}

// ZRandMemberWithScores provides a mock function with given fields: ctx, key, count
func (_m *MockUniversalClient) ZRandMemberWithScores(ctx context.Context, key string, count int) *ZSliceCmd {
	ret := _m.Called(ctx, key, count)

	if len(ret) == 0 {
		panic("no return value specified for ZRandMemberWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *ZSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRandMemberWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRandMemberWithScores'
type MockUniversalClient_ZRandMemberWithScores_Call struct {
	*mock.Call
}

// ZRandMemberWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *MockUniversalClient_Expecter) ZRandMemberWithScores(ctx interface{}, key interface{}, count interface{}) *MockUniversalClient_ZRandMemberWithScores_Call {
	return &MockUniversalClient_ZRandMemberWithScores_Call{Call: _e.mock.On("ZRandMemberWithScores", ctx, key, count)}
}

func (_c *MockUniversalClient_ZRandMemberWithScores_Call) Run(run func(ctx context.Context, key string, count int)) *MockUniversalClient_ZRandMemberWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockUniversalClient_ZRandMemberWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZRandMemberWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRandMemberWithScores_Call) RunAndReturn(run func(context.Context, string, int) *ZSliceCmd) *MockUniversalClient_ZRandMemberWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRange provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) ZRange(ctx context.Context, key string, start int64, stop int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRange")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRange'
type MockUniversalClient_ZRange_Call struct {
	*mock.Call
}

// ZRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) ZRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_ZRange_Call {
	return &MockUniversalClient_ZRange_Call{Call: _e.mock.On("ZRange", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_ZRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_ZRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ZRange_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StringSliceCmd) *MockUniversalClient_ZRange_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeArgs provides a mock function with given fields: ctx, z
func (_m *MockUniversalClient) ZRangeArgs(ctx context.Context, z ZRangeArgs) *StringSliceCmd {
	ret := _m.Called(ctx, z)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeArgs")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZRangeArgs) *StringSliceCmd); ok {
		r0 = rf(ctx, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeArgs'
type MockUniversalClient_ZRangeArgs_Call struct {
	*mock.Call
}

// ZRangeArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - z ZRangeArgs
func (_e *MockUniversalClient_Expecter) ZRangeArgs(ctx interface{}, z interface{}) *MockUniversalClient_ZRangeArgs_Call {
	return &MockUniversalClient_ZRangeArgs_Call{Call: _e.mock.On("ZRangeArgs", ctx, z)}
}

func (_c *MockUniversalClient_ZRangeArgs_Call) Run(run func(ctx context.Context, z ZRangeArgs)) *MockUniversalClient_ZRangeArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZRangeArgs))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeArgs_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRangeArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeArgs_Call) RunAndReturn(run func(context.Context, ZRangeArgs) *StringSliceCmd) *MockUniversalClient_ZRangeArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeArgsWithScores provides a mock function with given fields: ctx, z
func (_m *MockUniversalClient) ZRangeArgsWithScores(ctx context.Context, z ZRangeArgs) *ZSliceCmd {
	ret := _m.Called(ctx, z)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeArgsWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZRangeArgs) *ZSliceCmd); ok {
		r0 = rf(ctx, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeArgsWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeArgsWithScores'
type MockUniversalClient_ZRangeArgsWithScores_Call struct {
	*mock.Call
}

// ZRangeArgsWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - z ZRangeArgs
func (_e *MockUniversalClient_Expecter) ZRangeArgsWithScores(ctx interface{}, z interface{}) *MockUniversalClient_ZRangeArgsWithScores_Call {
	return &MockUniversalClient_ZRangeArgsWithScores_Call{Call: _e.mock.On("ZRangeArgsWithScores", ctx, z)}
}

func (_c *MockUniversalClient_ZRangeArgsWithScores_Call) Run(run func(ctx context.Context, z ZRangeArgs)) *MockUniversalClient_ZRangeArgsWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZRangeArgs))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeArgsWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZRangeArgsWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeArgsWithScores_Call) RunAndReturn(run func(context.Context, ZRangeArgs) *ZSliceCmd) *MockUniversalClient_ZRangeArgsWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *MockUniversalClient) ZRangeByLex(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeByLex")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByLex'
type MockUniversalClient_ZRangeByLex_Call struct {
	*mock.Call
}

// ZRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockUniversalClient_Expecter) ZRangeByLex(ctx interface{}, key interface{}, opt interface{}) *MockUniversalClient_ZRangeByLex_Call {
	return &MockUniversalClient_ZRangeByLex_Call{Call: _e.mock.On("ZRangeByLex", ctx, key, opt)}
}

func (_c *MockUniversalClient_ZRangeByLex_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockUniversalClient_ZRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeByLex_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeByLex_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockUniversalClient_ZRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *MockUniversalClient) ZRangeByScore(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeByScore")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByScore'
type MockUniversalClient_ZRangeByScore_Call struct {
	*mock.Call
}

// ZRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockUniversalClient_Expecter) ZRangeByScore(ctx interface{}, key interface{}, opt interface{}) *MockUniversalClient_ZRangeByScore_Call {
	return &MockUniversalClient_ZRangeByScore_Call{Call: _e.mock.On("ZRangeByScore", ctx, key, opt)}
}

func (_c *MockUniversalClient_ZRangeByScore_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockUniversalClient_ZRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeByScore_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeByScore_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockUniversalClient_ZRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *MockUniversalClient) ZRangeByScoreWithScores(ctx context.Context, key string, opt *ZRangeBy) *ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeByScoreWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeByScoreWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByScoreWithScores'
type MockUniversalClient_ZRangeByScoreWithScores_Call struct {
	*mock.Call
}

// ZRangeByScoreWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockUniversalClient_Expecter) ZRangeByScoreWithScores(ctx interface{}, key interface{}, opt interface{}) *MockUniversalClient_ZRangeByScoreWithScores_Call {
	return &MockUniversalClient_ZRangeByScoreWithScores_Call{Call: _e.mock.On("ZRangeByScoreWithScores", ctx, key, opt)}
}

func (_c *MockUniversalClient_ZRangeByScoreWithScores_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockUniversalClient_ZRangeByScoreWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeByScoreWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZRangeByScoreWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeByScoreWithScores_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *ZSliceCmd) *MockUniversalClient_ZRangeByScoreWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeStore provides a mock function with given fields: ctx, dst, z
func (_m *MockUniversalClient) ZRangeStore(ctx context.Context, dst string, z ZRangeArgs) *IntCmd {
	ret := _m.Called(ctx, dst, z)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ZRangeArgs) *IntCmd); ok {
		r0 = rf(ctx, dst, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeStore'
type MockUniversalClient_ZRangeStore_Call struct {
	*mock.Call
}

// ZRangeStore is a helper method to define mock.On call
//   - ctx context.Context
//   - dst string
//   - z ZRangeArgs
func (_e *MockUniversalClient_Expecter) ZRangeStore(ctx interface{}, dst interface{}, z interface{}) *MockUniversalClient_ZRangeStore_Call {
	return &MockUniversalClient_ZRangeStore_Call{Call: _e.mock.On("ZRangeStore", ctx, dst, z)}
}

func (_c *MockUniversalClient_ZRangeStore_Call) Run(run func(ctx context.Context, dst string, z ZRangeArgs)) *MockUniversalClient_ZRangeStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ZRangeArgs))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRangeStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeStore_Call) RunAndReturn(run func(context.Context, string, ZRangeArgs) *IntCmd) *MockUniversalClient_ZRangeStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRangeWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeWithScores'
type MockUniversalClient_ZRangeWithScores_Call struct {
	*mock.Call
}

// ZRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) ZRangeWithScores(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_ZRangeWithScores_Call {
	return &MockUniversalClient_ZRangeWithScores_Call{Call: _e.mock.On("ZRangeWithScores", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_ZRangeWithScores_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_ZRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ZRangeWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZRangeWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64, int64) *ZSliceCmd) *MockUniversalClient_ZRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRank provides a mock function with given fields: ctx, key, member
func (_m *MockUniversalClient) ZRank(ctx context.Context, key string, member string) *IntCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRank")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRank'
type MockUniversalClient_ZRank_Call struct {
	*mock.Call
}

// ZRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockUniversalClient_Expecter) ZRank(ctx interface{}, key interface{}, member interface{}) *MockUniversalClient_ZRank_Call {
	return &MockUniversalClient_ZRank_Call{Call: _e.mock.On("ZRank", ctx, key, member)}
}

func (_c *MockUniversalClient_ZRank_Call) Run(run func(ctx context.Context, key string, member string)) *MockUniversalClient_ZRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZRank_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRank_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_ZRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRankWithScore provides a mock function with given fields: ctx, key, member
func (_m *MockUniversalClient) ZRankWithScore(ctx context.Context, key string, member string) *RankWithScoreCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRankWithScore")
	}

	var r0 *RankWithScoreCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *RankWithScoreCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RankWithScoreCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRankWithScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRankWithScore'
type MockUniversalClient_ZRankWithScore_Call struct {
	*mock.Call
}

// ZRankWithScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockUniversalClient_Expecter) ZRankWithScore(ctx interface{}, key interface{}, member interface{}) *MockUniversalClient_ZRankWithScore_Call {
	return &MockUniversalClient_ZRankWithScore_Call{Call: _e.mock.On("ZRankWithScore", ctx, key, member)}
}

func (_c *MockUniversalClient_ZRankWithScore_Call) Run(run func(ctx context.Context, key string, member string)) *MockUniversalClient_ZRankWithScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZRankWithScore_Call) Return(_a0 *RankWithScoreCmd) *MockUniversalClient_ZRankWithScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRankWithScore_Call) RunAndReturn(run func(context.Context, string, string) *RankWithScoreCmd) *MockUniversalClient_ZRankWithScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRem provides a mock function with given fields: ctx, key, members
func (_m *MockUniversalClient) ZRem(ctx context.Context, key string, members ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ZRem")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRem'
type MockUniversalClient_ZRem_Call struct {
	*mock.Call
}

// ZRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *MockUniversalClient_Expecter) ZRem(ctx interface{}, key interface{}, members ...interface{}) *MockUniversalClient_ZRem_Call {
	return &MockUniversalClient_ZRem_Call{Call: _e.mock.On("ZRem",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockUniversalClient_ZRem_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *MockUniversalClient_ZRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUniversalClient_ZRem_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRem_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockUniversalClient_ZRem_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByLex provides a mock function with given fields: ctx, key, min, max
func (_m *MockUniversalClient) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZRemRangeByLex")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRemRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByLex'
type MockUniversalClient_ZRemRangeByLex_Call struct {
	*mock.Call
}

// ZRemRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockUniversalClient_Expecter) ZRemRangeByLex(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockUniversalClient_ZRemRangeByLex_Call {
	return &MockUniversalClient_ZRemRangeByLex_Call{Call: _e.mock.On("ZRemRangeByLex", ctx, key, min, max)}
}

func (_c *MockUniversalClient_ZRemRangeByLex_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockUniversalClient_ZRemRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZRemRangeByLex_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRemRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRemRangeByLex_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockUniversalClient_ZRemRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByRank provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *IntCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRemRangeByRank")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *IntCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRemRangeByRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByRank'
type MockUniversalClient_ZRemRangeByRank_Call struct {
	*mock.Call
}

// ZRemRangeByRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) ZRemRangeByRank(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_ZRemRangeByRank_Call {
	return &MockUniversalClient_ZRemRangeByRank_Call{Call: _e.mock.On("ZRemRangeByRank", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_ZRemRangeByRank_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_ZRemRangeByRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ZRemRangeByRank_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRemRangeByRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRemRangeByRank_Call) RunAndReturn(run func(context.Context, string, int64, int64) *IntCmd) *MockUniversalClient_ZRemRangeByRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByScore provides a mock function with given fields: ctx, key, min, max
func (_m *MockUniversalClient) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *IntCmd {
	ret := _m.Called(ctx, key, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ZRemRangeByScore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRemRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByScore'
type MockUniversalClient_ZRemRangeByScore_Call struct {
	*mock.Call
}

// ZRemRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *MockUniversalClient_Expecter) ZRemRangeByScore(ctx interface{}, key interface{}, min interface{}, max interface{}) *MockUniversalClient_ZRemRangeByScore_Call {
	return &MockUniversalClient_ZRemRangeByScore_Call{Call: _e.mock.On("ZRemRangeByScore", ctx, key, min, max)}
}

func (_c *MockUniversalClient_ZRemRangeByScore_Call) Run(run func(ctx context.Context, key string, min string, max string)) *MockUniversalClient_ZRemRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZRemRangeByScore_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRemRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRemRangeByScore_Call) RunAndReturn(run func(context.Context, string, string, string) *IntCmd) *MockUniversalClient_ZRemRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRange provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) ZRevRange(ctx context.Context, key string, start int64, stop int64) *StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRange")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRange'
type MockUniversalClient_ZRevRange_Call struct {
	*mock.Call
}

// ZRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) ZRevRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_ZRevRange_Call {
	return &MockUniversalClient_ZRevRange_Call{Call: _e.mock.On("ZRevRange", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_ZRevRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_ZRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRange_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *StringSliceCmd) *MockUniversalClient_ZRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *MockUniversalClient) ZRevRangeByLex(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeByLex")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByLex'
type MockUniversalClient_ZRevRangeByLex_Call struct {
	*mock.Call
}

// ZRevRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockUniversalClient_Expecter) ZRevRangeByLex(ctx interface{}, key interface{}, opt interface{}) *MockUniversalClient_ZRevRangeByLex_Call {
	return &MockUniversalClient_ZRevRangeByLex_Call{Call: _e.mock.On("ZRevRangeByLex", ctx, key, opt)}
}

func (_c *MockUniversalClient_ZRevRangeByLex_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockUniversalClient_ZRevRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRangeByLex_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRevRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRangeByLex_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockUniversalClient_ZRevRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *MockUniversalClient) ZRevRangeByScore(ctx context.Context, key string, opt *ZRangeBy) *StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeByScore")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByScore'
type MockUniversalClient_ZRevRangeByScore_Call struct {
	*mock.Call
}

// ZRevRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockUniversalClient_Expecter) ZRevRangeByScore(ctx interface{}, key interface{}, opt interface{}) *MockUniversalClient_ZRevRangeByScore_Call {
	return &MockUniversalClient_ZRevRangeByScore_Call{Call: _e.mock.On("ZRevRangeByScore", ctx, key, opt)}
}

func (_c *MockUniversalClient_ZRevRangeByScore_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockUniversalClient_ZRevRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRangeByScore_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZRevRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRangeByScore_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *StringSliceCmd) *MockUniversalClient_ZRevRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *MockUniversalClient) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *ZRangeBy) *ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeByScoreWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZRangeBy) *ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRangeByScoreWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByScoreWithScores'
type MockUniversalClient_ZRevRangeByScoreWithScores_Call struct {
	*mock.Call
}

// ZRevRangeByScoreWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *ZRangeBy
func (_e *MockUniversalClient_Expecter) ZRevRangeByScoreWithScores(ctx interface{}, key interface{}, opt interface{}) *MockUniversalClient_ZRevRangeByScoreWithScores_Call {
	return &MockUniversalClient_ZRevRangeByScoreWithScores_Call{Call: _e.mock.On("ZRevRangeByScoreWithScores", ctx, key, opt)}
}

func (_c *MockUniversalClient_ZRevRangeByScoreWithScores_Call) Run(run func(ctx context.Context, key string, opt *ZRangeBy)) *MockUniversalClient_ZRevRangeByScoreWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZRangeBy))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRangeByScoreWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZRevRangeByScoreWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRangeByScoreWithScores_Call) RunAndReturn(run func(context.Context, string, *ZRangeBy) *ZSliceCmd) *MockUniversalClient_ZRevRangeByScoreWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *MockUniversalClient) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeWithScores'
type MockUniversalClient_ZRevRangeWithScores_Call struct {
	*mock.Call
}

// ZRevRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockUniversalClient_Expecter) ZRevRangeWithScores(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockUniversalClient_ZRevRangeWithScores_Call {
	return &MockUniversalClient_ZRevRangeWithScores_Call{Call: _e.mock.On("ZRevRangeWithScores", ctx, key, start, stop)}
}

func (_c *MockUniversalClient_ZRevRangeWithScores_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockUniversalClient_ZRevRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRangeWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZRevRangeWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64, int64) *ZSliceCmd) *MockUniversalClient_ZRevRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRank provides a mock function with given fields: ctx, key, member
func (_m *MockUniversalClient) ZRevRank(ctx context.Context, key string, member string) *IntCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRank")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRank'
type MockUniversalClient_ZRevRank_Call struct {
	*mock.Call
}

// ZRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockUniversalClient_Expecter) ZRevRank(ctx interface{}, key interface{}, member interface{}) *MockUniversalClient_ZRevRank_Call {
	return &MockUniversalClient_ZRevRank_Call{Call: _e.mock.On("ZRevRank", ctx, key, member)}
}

func (_c *MockUniversalClient_ZRevRank_Call) Run(run func(ctx context.Context, key string, member string)) *MockUniversalClient_ZRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRank_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRank_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockUniversalClient_ZRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRankWithScore provides a mock function with given fields: ctx, key, member
func (_m *MockUniversalClient) ZRevRankWithScore(ctx context.Context, key string, member string) *RankWithScoreCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRankWithScore")
	}

	var r0 *RankWithScoreCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *RankWithScoreCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RankWithScoreCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZRevRankWithScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRankWithScore'
type MockUniversalClient_ZRevRankWithScore_Call struct {
	*mock.Call
}

// ZRevRankWithScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockUniversalClient_Expecter) ZRevRankWithScore(ctx interface{}, key interface{}, member interface{}) *MockUniversalClient_ZRevRankWithScore_Call {
	return &MockUniversalClient_ZRevRankWithScore_Call{Call: _e.mock.On("ZRevRankWithScore", ctx, key, member)}
}

func (_c *MockUniversalClient_ZRevRankWithScore_Call) Run(run func(ctx context.Context, key string, member string)) *MockUniversalClient_ZRevRankWithScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZRevRankWithScore_Call) Return(_a0 *RankWithScoreCmd) *MockUniversalClient_ZRevRankWithScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZRevRankWithScore_Call) RunAndReturn(run func(context.Context, string, string) *RankWithScoreCmd) *MockUniversalClient_ZRevRankWithScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *MockUniversalClient) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for ZScan")
	}

	var r0 *ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScanCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZScan'
type MockUniversalClient_ZScan_Call struct {
	*mock.Call
}

// ZScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *MockUniversalClient_Expecter) ZScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *MockUniversalClient_ZScan_Call {
	return &MockUniversalClient_ZScan_Call{Call: _e.mock.On("ZScan", ctx, key, cursor, match, count)}
}

func (_c *MockUniversalClient_ZScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *MockUniversalClient_ZScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *MockUniversalClient_ZScan_Call) Return(_a0 *ScanCmd) *MockUniversalClient_ZScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *ScanCmd) *MockUniversalClient_ZScan_Call {
	_c.Call.Return(run)
	return _c
}

// ZScore provides a mock function with given fields: ctx, key, member
func (_m *MockUniversalClient) ZScore(ctx context.Context, key string, member string) *FloatCmd {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for ZScore")
	}

	var r0 *FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FloatCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZScore'
type MockUniversalClient_ZScore_Call struct {
	*mock.Call
}

// ZScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *MockUniversalClient_Expecter) ZScore(ctx interface{}, key interface{}, member interface{}) *MockUniversalClient_ZScore_Call {
	return &MockUniversalClient_ZScore_Call{Call: _e.mock.On("ZScore", ctx, key, member)}
}

func (_c *MockUniversalClient_ZScore_Call) Run(run func(ctx context.Context, key string, member string)) *MockUniversalClient_ZScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUniversalClient_ZScore_Call) Return(_a0 *FloatCmd) *MockUniversalClient_ZScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZScore_Call) RunAndReturn(run func(context.Context, string, string) *FloatCmd) *MockUniversalClient_ZScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnion provides a mock function with given fields: ctx, store
func (_m *MockUniversalClient) ZUnion(ctx context.Context, store ZStore) *StringSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZUnion")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZStore) *StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZUnion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnion'
type MockUniversalClient_ZUnion_Call struct {
	*mock.Call
}

// ZUnion is a helper method to define mock.On call
//   - ctx context.Context
//   - store ZStore
func (_e *MockUniversalClient_Expecter) ZUnion(ctx interface{}, store interface{}) *MockUniversalClient_ZUnion_Call {
	return &MockUniversalClient_ZUnion_Call{Call: _e.mock.On("ZUnion", ctx, store)}
}

func (_c *MockUniversalClient_ZUnion_Call) Run(run func(ctx context.Context, store ZStore)) *MockUniversalClient_ZUnion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZStore))
	})
	return _c
}

func (_c *MockUniversalClient_ZUnion_Call) Return(_a0 *StringSliceCmd) *MockUniversalClient_ZUnion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZUnion_Call) RunAndReturn(run func(context.Context, ZStore) *StringSliceCmd) *MockUniversalClient_ZUnion_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnionStore provides a mock function with given fields: ctx, dest, store
func (_m *MockUniversalClient) ZUnionStore(ctx context.Context, dest string, store *ZStore) *IntCmd {
	ret := _m.Called(ctx, dest, store)

	if len(ret) == 0 {
		panic("no return value specified for ZUnionStore")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *ZStore) *IntCmd); ok {
		r0 = rf(ctx, dest, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZUnionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnionStore'
type MockUniversalClient_ZUnionStore_Call struct {
	*mock.Call
}

// ZUnionStore is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
//   - store *ZStore
func (_e *MockUniversalClient_Expecter) ZUnionStore(ctx interface{}, dest interface{}, store interface{}) *MockUniversalClient_ZUnionStore_Call {
	return &MockUniversalClient_ZUnionStore_Call{Call: _e.mock.On("ZUnionStore", ctx, dest, store)}
}

func (_c *MockUniversalClient_ZUnionStore_Call) Run(run func(ctx context.Context, dest string, store *ZStore)) *MockUniversalClient_ZUnionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ZStore))
	})
	return _c
}

func (_c *MockUniversalClient_ZUnionStore_Call) Return(_a0 *IntCmd) *MockUniversalClient_ZUnionStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZUnionStore_Call) RunAndReturn(run func(context.Context, string, *ZStore) *IntCmd) *MockUniversalClient_ZUnionStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnionWithScores provides a mock function with given fields: ctx, store
func (_m *MockUniversalClient) ZUnionWithScores(ctx context.Context, store ZStore) *ZSliceCmd {
	ret := _m.Called(ctx, store)

	if len(ret) == 0 {
		panic("no return value specified for ZUnionWithScores")
	}

	var r0 *ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ZStore) *ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ZSliceCmd)
		}
	}

	return r0
}

// MockUniversalClient_ZUnionWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnionWithScores'
type MockUniversalClient_ZUnionWithScores_Call struct {
	*mock.Call
}

// ZUnionWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - store ZStore
func (_e *MockUniversalClient_Expecter) ZUnionWithScores(ctx interface{}, store interface{}) *MockUniversalClient_ZUnionWithScores_Call {
	return &MockUniversalClient_ZUnionWithScores_Call{Call: _e.mock.On("ZUnionWithScores", ctx, store)}
}

func (_c *MockUniversalClient_ZUnionWithScores_Call) Run(run func(ctx context.Context, store ZStore)) *MockUniversalClient_ZUnionWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ZStore))
	})
	return _c
}

func (_c *MockUniversalClient_ZUnionWithScores_Call) Return(_a0 *ZSliceCmd) *MockUniversalClient_ZUnionWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniversalClient_ZUnionWithScores_Call) RunAndReturn(run func(context.Context, ZStore) *ZSliceCmd) *MockUniversalClient_ZUnionWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUniversalClient creates a new instance of MockUniversalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUniversalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUniversalClient {
	mock := &MockUniversalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
