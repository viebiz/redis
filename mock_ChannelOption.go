// Code generated by mockery. DO NOT EDIT.

package redis

import mock "github.com/stretchr/testify/mock"

// MockChannelOption is an autogenerated mock type for the ChannelOption type
type MockChannelOption struct {
	mock.Mock
}

type MockChannelOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelOption) EXPECT() *MockChannelOption_Expecter {
	return &MockChannelOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockChannelOption) Execute(c *channel) {
	_m.Called(c)
}

// MockChannelOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockChannelOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c *channel
func (_e *MockChannelOption_Expecter) Execute(c interface{}) *MockChannelOption_Execute_Call {
	return &MockChannelOption_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockChannelOption_Execute_Call) Run(run func(c *channel)) *MockChannelOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*channel))
	})
	return _c
}

func (_c *MockChannelOption_Execute_Call) Return() *MockChannelOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChannelOption_Execute_Call) RunAndReturn(run func(*channel)) *MockChannelOption_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockChannelOption creates a new instance of MockChannelOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelOption {
	mock := &MockChannelOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
