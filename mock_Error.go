// Code generated by mockery. DO NOT EDIT.

package redis

import mock "github.com/stretchr/testify/mock"

// MockError is an autogenerated mock type for the Error type
type MockError struct {
	mock.Mock
}

type MockError_Expecter struct {
	mock *mock.Mock
}

func (_m *MockError) EXPECT() *MockError_Expecter {
	return &MockError_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with no fields
func (_m *MockError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockError_Expecter) Error() *MockError_Error_Call {
	return &MockError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockError_Error_Call) Run(run func()) *MockError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Error_Call) Return(_a0 string) *MockError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Error_Call) RunAndReturn(run func() string) *MockError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// RedisError provides a mock function with no fields
func (_m *MockError) RedisError() {
	_m.Called()
}

// MockError_RedisError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedisError'
type MockError_RedisError_Call struct {
	*mock.Call
}

// RedisError is a helper method to define mock.On call
func (_e *MockError_Expecter) RedisError() *MockError_RedisError_Call {
	return &MockError_RedisError_Call{Call: _e.mock.On("RedisError")}
}

func (_c *MockError_RedisError_Call) Run(run func()) *MockError_RedisError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_RedisError_Call) Return() *MockError_RedisError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockError_RedisError_Call) RunAndReturn(run func()) *MockError_RedisError_Call {
	_c.Run(run)
	return _c
}

// NewMockError creates a new instance of MockError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockError(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockError {
	mock := &MockError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
