// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mockcmdable is an autogenerated mock type for the cmdable type
type Mockcmdable struct {
	mock.Mock
}

type Mockcmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockcmdable) EXPECT() *Mockcmdable_Expecter {
	return &Mockcmdable_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, cmd
func (_m *Mockcmdable) Execute(ctx context.Context, cmd Cmder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Cmder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockcmdable_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Mockcmdable_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd Cmder
func (_e *Mockcmdable_Expecter) Execute(ctx interface{}, cmd interface{}) *Mockcmdable_Execute_Call {
	return &Mockcmdable_Execute_Call{Call: _e.mock.On("Execute", ctx, cmd)}
}

func (_c *Mockcmdable_Execute_Call) Run(run func(ctx context.Context, cmd Cmder)) *Mockcmdable_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Cmder))
	})
	return _c
}

func (_c *Mockcmdable_Execute_Call) Return(_a0 error) *Mockcmdable_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockcmdable_Execute_Call) RunAndReturn(run func(context.Context, Cmder) error) *Mockcmdable_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcmdable creates a new instance of Mockcmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockcmdable {
	mock := &Mockcmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
