// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTimeseriesCmdable is an autogenerated mock type for the TimeseriesCmdable type
type MockTimeseriesCmdable struct {
	mock.Mock
}

type MockTimeseriesCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeseriesCmdable) EXPECT() *MockTimeseriesCmdable_Expecter {
	return &MockTimeseriesCmdable_Expecter{mock: &_m.Mock}
}

// TSAdd provides a mock function with given fields: ctx, key, timestamp, value
func (_m *MockTimeseriesCmdable) TSAdd(ctx context.Context, key string, timestamp interface{}, value float64) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, value)

	if len(ret) == 0 {
		panic("no return value specified for TSAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, float64) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSAdd'
type MockTimeseriesCmdable_TSAdd_Call struct {
	*mock.Call
}

// TSAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp interface{}
//   - value float64
func (_e *MockTimeseriesCmdable_Expecter) TSAdd(ctx interface{}, key interface{}, timestamp interface{}, value interface{}) *MockTimeseriesCmdable_TSAdd_Call {
	return &MockTimeseriesCmdable_TSAdd_Call{Call: _e.mock.On("TSAdd", ctx, key, timestamp, value)}
}

func (_c *MockTimeseriesCmdable_TSAdd_Call) Run(run func(ctx context.Context, key string, timestamp interface{}, value float64)) *MockTimeseriesCmdable_TSAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(float64))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSAdd_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSAdd_Call) RunAndReturn(run func(context.Context, string, interface{}, float64) *IntCmd) *MockTimeseriesCmdable_TSAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TSAddWithArgs provides a mock function with given fields: ctx, key, timestamp, value, options
func (_m *MockTimeseriesCmdable) TSAddWithArgs(ctx context.Context, key string, timestamp interface{}, value float64, options *TSOptions) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, value, options)

	if len(ret) == 0 {
		panic("no return value specified for TSAddWithArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, float64, *TSOptions) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, value, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSAddWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSAddWithArgs'
type MockTimeseriesCmdable_TSAddWithArgs_Call struct {
	*mock.Call
}

// TSAddWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp interface{}
//   - value float64
//   - options *TSOptions
func (_e *MockTimeseriesCmdable_Expecter) TSAddWithArgs(ctx interface{}, key interface{}, timestamp interface{}, value interface{}, options interface{}) *MockTimeseriesCmdable_TSAddWithArgs_Call {
	return &MockTimeseriesCmdable_TSAddWithArgs_Call{Call: _e.mock.On("TSAddWithArgs", ctx, key, timestamp, value, options)}
}

func (_c *MockTimeseriesCmdable_TSAddWithArgs_Call) Run(run func(ctx context.Context, key string, timestamp interface{}, value float64, options *TSOptions)) *MockTimeseriesCmdable_TSAddWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(float64), args[4].(*TSOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSAddWithArgs_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSAddWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSAddWithArgs_Call) RunAndReturn(run func(context.Context, string, interface{}, float64, *TSOptions) *IntCmd) *MockTimeseriesCmdable_TSAddWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSAlter provides a mock function with given fields: ctx, key, options
func (_m *MockTimeseriesCmdable) TSAlter(ctx context.Context, key string, options *TSAlterOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSAlter")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSAlterOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSAlter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSAlter'
type MockTimeseriesCmdable_TSAlter_Call struct {
	*mock.Call
}

// TSAlter is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSAlterOptions
func (_e *MockTimeseriesCmdable_Expecter) TSAlter(ctx interface{}, key interface{}, options interface{}) *MockTimeseriesCmdable_TSAlter_Call {
	return &MockTimeseriesCmdable_TSAlter_Call{Call: _e.mock.On("TSAlter", ctx, key, options)}
}

func (_c *MockTimeseriesCmdable_TSAlter_Call) Run(run func(ctx context.Context, key string, options *TSAlterOptions)) *MockTimeseriesCmdable_TSAlter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSAlterOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSAlter_Call) Return(_a0 *StatusCmd) *MockTimeseriesCmdable_TSAlter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSAlter_Call) RunAndReturn(run func(context.Context, string, *TSAlterOptions) *StatusCmd) *MockTimeseriesCmdable_TSAlter_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreate provides a mock function with given fields: ctx, key
func (_m *MockTimeseriesCmdable) TSCreate(ctx context.Context, key string) *StatusCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TSCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreate'
type MockTimeseriesCmdable_TSCreate_Call struct {
	*mock.Call
}

// TSCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockTimeseriesCmdable_Expecter) TSCreate(ctx interface{}, key interface{}) *MockTimeseriesCmdable_TSCreate_Call {
	return &MockTimeseriesCmdable_TSCreate_Call{Call: _e.mock.On("TSCreate", ctx, key)}
}

func (_c *MockTimeseriesCmdable_TSCreate_Call) Run(run func(ctx context.Context, key string)) *MockTimeseriesCmdable_TSCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreate_Call) Return(_a0 *StatusCmd) *MockTimeseriesCmdable_TSCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreate_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockTimeseriesCmdable_TSCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreateRule provides a mock function with given fields: ctx, sourceKey, destKey, aggregator, bucketDuration
func (_m *MockTimeseriesCmdable) TSCreateRule(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int) *StatusCmd {
	ret := _m.Called(ctx, sourceKey, destKey, aggregator, bucketDuration)

	if len(ret) == 0 {
		panic("no return value specified for TSCreateRule")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, Aggregator, int) *StatusCmd); ok {
		r0 = rf(ctx, sourceKey, destKey, aggregator, bucketDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSCreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreateRule'
type MockTimeseriesCmdable_TSCreateRule_Call struct {
	*mock.Call
}

// TSCreateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
//   - aggregator Aggregator
//   - bucketDuration int
func (_e *MockTimeseriesCmdable_Expecter) TSCreateRule(ctx interface{}, sourceKey interface{}, destKey interface{}, aggregator interface{}, bucketDuration interface{}) *MockTimeseriesCmdable_TSCreateRule_Call {
	return &MockTimeseriesCmdable_TSCreateRule_Call{Call: _e.mock.On("TSCreateRule", ctx, sourceKey, destKey, aggregator, bucketDuration)}
}

func (_c *MockTimeseriesCmdable_TSCreateRule_Call) Run(run func(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int)) *MockTimeseriesCmdable_TSCreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(Aggregator), args[4].(int))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreateRule_Call) Return(_a0 *StatusCmd) *MockTimeseriesCmdable_TSCreateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreateRule_Call) RunAndReturn(run func(context.Context, string, string, Aggregator, int) *StatusCmd) *MockTimeseriesCmdable_TSCreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreateRuleWithArgs provides a mock function with given fields: ctx, sourceKey, destKey, aggregator, bucketDuration, options
func (_m *MockTimeseriesCmdable) TSCreateRuleWithArgs(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int, options *TSCreateRuleOptions) *StatusCmd {
	ret := _m.Called(ctx, sourceKey, destKey, aggregator, bucketDuration, options)

	if len(ret) == 0 {
		panic("no return value specified for TSCreateRuleWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, Aggregator, int, *TSCreateRuleOptions) *StatusCmd); ok {
		r0 = rf(ctx, sourceKey, destKey, aggregator, bucketDuration, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSCreateRuleWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreateRuleWithArgs'
type MockTimeseriesCmdable_TSCreateRuleWithArgs_Call struct {
	*mock.Call
}

// TSCreateRuleWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
//   - aggregator Aggregator
//   - bucketDuration int
//   - options *TSCreateRuleOptions
func (_e *MockTimeseriesCmdable_Expecter) TSCreateRuleWithArgs(ctx interface{}, sourceKey interface{}, destKey interface{}, aggregator interface{}, bucketDuration interface{}, options interface{}) *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call {
	return &MockTimeseriesCmdable_TSCreateRuleWithArgs_Call{Call: _e.mock.On("TSCreateRuleWithArgs", ctx, sourceKey, destKey, aggregator, bucketDuration, options)}
}

func (_c *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call) Run(run func(ctx context.Context, sourceKey string, destKey string, aggregator Aggregator, bucketDuration int, options *TSCreateRuleOptions)) *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(Aggregator), args[4].(int), args[5].(*TSCreateRuleOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call) Return(_a0 *StatusCmd) *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call) RunAndReturn(run func(context.Context, string, string, Aggregator, int, *TSCreateRuleOptions) *StatusCmd) *MockTimeseriesCmdable_TSCreateRuleWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSCreateWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockTimeseriesCmdable) TSCreateWithArgs(ctx context.Context, key string, options *TSOptions) *StatusCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSCreateWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSOptions) *StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSCreateWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSCreateWithArgs'
type MockTimeseriesCmdable_TSCreateWithArgs_Call struct {
	*mock.Call
}

// TSCreateWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSOptions
func (_e *MockTimeseriesCmdable_Expecter) TSCreateWithArgs(ctx interface{}, key interface{}, options interface{}) *MockTimeseriesCmdable_TSCreateWithArgs_Call {
	return &MockTimeseriesCmdable_TSCreateWithArgs_Call{Call: _e.mock.On("TSCreateWithArgs", ctx, key, options)}
}

func (_c *MockTimeseriesCmdable_TSCreateWithArgs_Call) Run(run func(ctx context.Context, key string, options *TSOptions)) *MockTimeseriesCmdable_TSCreateWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreateWithArgs_Call) Return(_a0 *StatusCmd) *MockTimeseriesCmdable_TSCreateWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSCreateWithArgs_Call) RunAndReturn(run func(context.Context, string, *TSOptions) *StatusCmd) *MockTimeseriesCmdable_TSCreateWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSDecrBy provides a mock function with given fields: ctx, Key, timestamp
func (_m *MockTimeseriesCmdable) TSDecrBy(ctx context.Context, Key string, timestamp float64) *IntCmd {
	ret := _m.Called(ctx, Key, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSDecrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *IntCmd); ok {
		r0 = rf(ctx, Key, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSDecrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDecrBy'
type MockTimeseriesCmdable_TSDecrBy_Call struct {
	*mock.Call
}

// TSDecrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - Key string
//   - timestamp float64
func (_e *MockTimeseriesCmdable_Expecter) TSDecrBy(ctx interface{}, Key interface{}, timestamp interface{}) *MockTimeseriesCmdable_TSDecrBy_Call {
	return &MockTimeseriesCmdable_TSDecrBy_Call{Call: _e.mock.On("TSDecrBy", ctx, Key, timestamp)}
}

func (_c *MockTimeseriesCmdable_TSDecrBy_Call) Run(run func(ctx context.Context, Key string, timestamp float64)) *MockTimeseriesCmdable_TSDecrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSDecrBy_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSDecrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSDecrBy_Call) RunAndReturn(run func(context.Context, string, float64) *IntCmd) *MockTimeseriesCmdable_TSDecrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TSDecrByWithArgs provides a mock function with given fields: ctx, key, timestamp, options
func (_m *MockTimeseriesCmdable) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSDecrByWithArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSDecrByWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDecrByWithArgs'
type MockTimeseriesCmdable_TSDecrByWithArgs_Call struct {
	*mock.Call
}

// TSDecrByWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp float64
//   - options *TSIncrDecrOptions
func (_e *MockTimeseriesCmdable_Expecter) TSDecrByWithArgs(ctx interface{}, key interface{}, timestamp interface{}, options interface{}) *MockTimeseriesCmdable_TSDecrByWithArgs_Call {
	return &MockTimeseriesCmdable_TSDecrByWithArgs_Call{Call: _e.mock.On("TSDecrByWithArgs", ctx, key, timestamp, options)}
}

func (_c *MockTimeseriesCmdable_TSDecrByWithArgs_Call) Run(run func(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions)) *MockTimeseriesCmdable_TSDecrByWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(*TSIncrDecrOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSDecrByWithArgs_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSDecrByWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSDecrByWithArgs_Call) RunAndReturn(run func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd) *MockTimeseriesCmdable_TSDecrByWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSDel provides a mock function with given fields: ctx, Key, fromTimestamp, toTimestamp
func (_m *MockTimeseriesCmdable) TSDel(ctx context.Context, Key string, fromTimestamp int, toTimestamp int) *IntCmd {
	ret := _m.Called(ctx, Key, fromTimestamp, toTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *IntCmd); ok {
		r0 = rf(ctx, Key, fromTimestamp, toTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDel'
type MockTimeseriesCmdable_TSDel_Call struct {
	*mock.Call
}

// TSDel is a helper method to define mock.On call
//   - ctx context.Context
//   - Key string
//   - fromTimestamp int
//   - toTimestamp int
func (_e *MockTimeseriesCmdable_Expecter) TSDel(ctx interface{}, Key interface{}, fromTimestamp interface{}, toTimestamp interface{}) *MockTimeseriesCmdable_TSDel_Call {
	return &MockTimeseriesCmdable_TSDel_Call{Call: _e.mock.On("TSDel", ctx, Key, fromTimestamp, toTimestamp)}
}

func (_c *MockTimeseriesCmdable_TSDel_Call) Run(run func(ctx context.Context, Key string, fromTimestamp int, toTimestamp int)) *MockTimeseriesCmdable_TSDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSDel_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSDel_Call) RunAndReturn(run func(context.Context, string, int, int) *IntCmd) *MockTimeseriesCmdable_TSDel_Call {
	_c.Call.Return(run)
	return _c
}

// TSDeleteRule provides a mock function with given fields: ctx, sourceKey, destKey
func (_m *MockTimeseriesCmdable) TSDeleteRule(ctx context.Context, sourceKey string, destKey string) *StatusCmd {
	ret := _m.Called(ctx, sourceKey, destKey)

	if len(ret) == 0 {
		panic("no return value specified for TSDeleteRule")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, sourceKey, destKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSDeleteRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSDeleteRule'
type MockTimeseriesCmdable_TSDeleteRule_Call struct {
	*mock.Call
}

// TSDeleteRule is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
func (_e *MockTimeseriesCmdable_Expecter) TSDeleteRule(ctx interface{}, sourceKey interface{}, destKey interface{}) *MockTimeseriesCmdable_TSDeleteRule_Call {
	return &MockTimeseriesCmdable_TSDeleteRule_Call{Call: _e.mock.On("TSDeleteRule", ctx, sourceKey, destKey)}
}

func (_c *MockTimeseriesCmdable_TSDeleteRule_Call) Run(run func(ctx context.Context, sourceKey string, destKey string)) *MockTimeseriesCmdable_TSDeleteRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSDeleteRule_Call) Return(_a0 *StatusCmd) *MockTimeseriesCmdable_TSDeleteRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSDeleteRule_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockTimeseriesCmdable_TSDeleteRule_Call {
	_c.Call.Return(run)
	return _c
}

// TSGet provides a mock function with given fields: ctx, key
func (_m *MockTimeseriesCmdable) TSGet(ctx context.Context, key string) *TSTimestampValueCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TSGet")
	}

	var r0 *TSTimestampValueCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *TSTimestampValueCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSGet'
type MockTimeseriesCmdable_TSGet_Call struct {
	*mock.Call
}

// TSGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockTimeseriesCmdable_Expecter) TSGet(ctx interface{}, key interface{}) *MockTimeseriesCmdable_TSGet_Call {
	return &MockTimeseriesCmdable_TSGet_Call{Call: _e.mock.On("TSGet", ctx, key)}
}

func (_c *MockTimeseriesCmdable_TSGet_Call) Run(run func(ctx context.Context, key string)) *MockTimeseriesCmdable_TSGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSGet_Call) Return(_a0 *TSTimestampValueCmd) *MockTimeseriesCmdable_TSGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSGet_Call) RunAndReturn(run func(context.Context, string) *TSTimestampValueCmd) *MockTimeseriesCmdable_TSGet_Call {
	_c.Call.Return(run)
	return _c
}

// TSGetWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockTimeseriesCmdable) TSGetWithArgs(ctx context.Context, key string, options *TSGetOptions) *TSTimestampValueCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSGetWithArgs")
	}

	var r0 *TSTimestampValueCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSGetOptions) *TSTimestampValueCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSGetWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSGetWithArgs'
type MockTimeseriesCmdable_TSGetWithArgs_Call struct {
	*mock.Call
}

// TSGetWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSGetOptions
func (_e *MockTimeseriesCmdable_Expecter) TSGetWithArgs(ctx interface{}, key interface{}, options interface{}) *MockTimeseriesCmdable_TSGetWithArgs_Call {
	return &MockTimeseriesCmdable_TSGetWithArgs_Call{Call: _e.mock.On("TSGetWithArgs", ctx, key, options)}
}

func (_c *MockTimeseriesCmdable_TSGetWithArgs_Call) Run(run func(ctx context.Context, key string, options *TSGetOptions)) *MockTimeseriesCmdable_TSGetWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSGetOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSGetWithArgs_Call) Return(_a0 *TSTimestampValueCmd) *MockTimeseriesCmdable_TSGetWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSGetWithArgs_Call) RunAndReturn(run func(context.Context, string, *TSGetOptions) *TSTimestampValueCmd) *MockTimeseriesCmdable_TSGetWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSIncrBy provides a mock function with given fields: ctx, Key, timestamp
func (_m *MockTimeseriesCmdable) TSIncrBy(ctx context.Context, Key string, timestamp float64) *IntCmd {
	ret := _m.Called(ctx, Key, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSIncrBy")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *IntCmd); ok {
		r0 = rf(ctx, Key, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSIncrBy'
type MockTimeseriesCmdable_TSIncrBy_Call struct {
	*mock.Call
}

// TSIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - Key string
//   - timestamp float64
func (_e *MockTimeseriesCmdable_Expecter) TSIncrBy(ctx interface{}, Key interface{}, timestamp interface{}) *MockTimeseriesCmdable_TSIncrBy_Call {
	return &MockTimeseriesCmdable_TSIncrBy_Call{Call: _e.mock.On("TSIncrBy", ctx, Key, timestamp)}
}

func (_c *MockTimeseriesCmdable_TSIncrBy_Call) Run(run func(ctx context.Context, Key string, timestamp float64)) *MockTimeseriesCmdable_TSIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSIncrBy_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSIncrBy_Call) RunAndReturn(run func(context.Context, string, float64) *IntCmd) *MockTimeseriesCmdable_TSIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TSIncrByWithArgs provides a mock function with given fields: ctx, key, timestamp, options
func (_m *MockTimeseriesCmdable) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions) *IntCmd {
	ret := _m.Called(ctx, key, timestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSIncrByWithArgs")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd); ok {
		r0 = rf(ctx, key, timestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSIncrByWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSIncrByWithArgs'
type MockTimeseriesCmdable_TSIncrByWithArgs_Call struct {
	*mock.Call
}

// TSIncrByWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - timestamp float64
//   - options *TSIncrDecrOptions
func (_e *MockTimeseriesCmdable_Expecter) TSIncrByWithArgs(ctx interface{}, key interface{}, timestamp interface{}, options interface{}) *MockTimeseriesCmdable_TSIncrByWithArgs_Call {
	return &MockTimeseriesCmdable_TSIncrByWithArgs_Call{Call: _e.mock.On("TSIncrByWithArgs", ctx, key, timestamp, options)}
}

func (_c *MockTimeseriesCmdable_TSIncrByWithArgs_Call) Run(run func(ctx context.Context, key string, timestamp float64, options *TSIncrDecrOptions)) *MockTimeseriesCmdable_TSIncrByWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(*TSIncrDecrOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSIncrByWithArgs_Call) Return(_a0 *IntCmd) *MockTimeseriesCmdable_TSIncrByWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSIncrByWithArgs_Call) RunAndReturn(run func(context.Context, string, float64, *TSIncrDecrOptions) *IntCmd) *MockTimeseriesCmdable_TSIncrByWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSInfo provides a mock function with given fields: ctx, key
func (_m *MockTimeseriesCmdable) TSInfo(ctx context.Context, key string) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TSInfo")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSInfo'
type MockTimeseriesCmdable_TSInfo_Call struct {
	*mock.Call
}

// TSInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockTimeseriesCmdable_Expecter) TSInfo(ctx interface{}, key interface{}) *MockTimeseriesCmdable_TSInfo_Call {
	return &MockTimeseriesCmdable_TSInfo_Call{Call: _e.mock.On("TSInfo", ctx, key)}
}

func (_c *MockTimeseriesCmdable_TSInfo_Call) Run(run func(ctx context.Context, key string)) *MockTimeseriesCmdable_TSInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSInfo_Call) Return(_a0 *MapStringInterfaceCmd) *MockTimeseriesCmdable_TSInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSInfo_Call) RunAndReturn(run func(context.Context, string) *MapStringInterfaceCmd) *MockTimeseriesCmdable_TSInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TSInfoWithArgs provides a mock function with given fields: ctx, key, options
func (_m *MockTimeseriesCmdable) TSInfoWithArgs(ctx context.Context, key string, options *TSInfoOptions) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for TSInfoWithArgs")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *TSInfoOptions) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSInfoWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSInfoWithArgs'
type MockTimeseriesCmdable_TSInfoWithArgs_Call struct {
	*mock.Call
}

// TSInfoWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *TSInfoOptions
func (_e *MockTimeseriesCmdable_Expecter) TSInfoWithArgs(ctx interface{}, key interface{}, options interface{}) *MockTimeseriesCmdable_TSInfoWithArgs_Call {
	return &MockTimeseriesCmdable_TSInfoWithArgs_Call{Call: _e.mock.On("TSInfoWithArgs", ctx, key, options)}
}

func (_c *MockTimeseriesCmdable_TSInfoWithArgs_Call) Run(run func(ctx context.Context, key string, options *TSInfoOptions)) *MockTimeseriesCmdable_TSInfoWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*TSInfoOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSInfoWithArgs_Call) Return(_a0 *MapStringInterfaceCmd) *MockTimeseriesCmdable_TSInfoWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSInfoWithArgs_Call) RunAndReturn(run func(context.Context, string, *TSInfoOptions) *MapStringInterfaceCmd) *MockTimeseriesCmdable_TSInfoWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSMAdd provides a mock function with given fields: ctx, ktvSlices
func (_m *MockTimeseriesCmdable) TSMAdd(ctx context.Context, ktvSlices [][]interface{}) *IntSliceCmd {
	ret := _m.Called(ctx, ktvSlices)

	if len(ret) == 0 {
		panic("no return value specified for TSMAdd")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, [][]interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, ktvSlices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMAdd'
type MockTimeseriesCmdable_TSMAdd_Call struct {
	*mock.Call
}

// TSMAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - ktvSlices [][]interface{}
func (_e *MockTimeseriesCmdable_Expecter) TSMAdd(ctx interface{}, ktvSlices interface{}) *MockTimeseriesCmdable_TSMAdd_Call {
	return &MockTimeseriesCmdable_TSMAdd_Call{Call: _e.mock.On("TSMAdd", ctx, ktvSlices)}
}

func (_c *MockTimeseriesCmdable_TSMAdd_Call) Run(run func(ctx context.Context, ktvSlices [][]interface{})) *MockTimeseriesCmdable_TSMAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]interface{}))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMAdd_Call) Return(_a0 *IntSliceCmd) *MockTimeseriesCmdable_TSMAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMAdd_Call) RunAndReturn(run func(context.Context, [][]interface{}) *IntSliceCmd) *MockTimeseriesCmdable_TSMAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TSMGet provides a mock function with given fields: ctx, filters
func (_m *MockTimeseriesCmdable) TSMGet(ctx context.Context, filters []string) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for TSMGet")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, []string) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMGet'
type MockTimeseriesCmdable_TSMGet_Call struct {
	*mock.Call
}

// TSMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - filters []string
func (_e *MockTimeseriesCmdable_Expecter) TSMGet(ctx interface{}, filters interface{}) *MockTimeseriesCmdable_TSMGet_Call {
	return &MockTimeseriesCmdable_TSMGet_Call{Call: _e.mock.On("TSMGet", ctx, filters)}
}

func (_c *MockTimeseriesCmdable_TSMGet_Call) Run(run func(ctx context.Context, filters []string)) *MockTimeseriesCmdable_TSMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMGet_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMGet_Call) RunAndReturn(run func(context.Context, []string) *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMGet_Call {
	_c.Call.Return(run)
	return _c
}

// TSMGetWithArgs provides a mock function with given fields: ctx, filters, options
func (_m *MockTimeseriesCmdable) TSMGetWithArgs(ctx context.Context, filters []string, options *TSMGetOptions) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, filters, options)

	if len(ret) == 0 {
		panic("no return value specified for TSMGetWithArgs")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, []string, *TSMGetOptions) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, filters, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMGetWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMGetWithArgs'
type MockTimeseriesCmdable_TSMGetWithArgs_Call struct {
	*mock.Call
}

// TSMGetWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - filters []string
//   - options *TSMGetOptions
func (_e *MockTimeseriesCmdable_Expecter) TSMGetWithArgs(ctx interface{}, filters interface{}, options interface{}) *MockTimeseriesCmdable_TSMGetWithArgs_Call {
	return &MockTimeseriesCmdable_TSMGetWithArgs_Call{Call: _e.mock.On("TSMGetWithArgs", ctx, filters, options)}
}

func (_c *MockTimeseriesCmdable_TSMGetWithArgs_Call) Run(run func(ctx context.Context, filters []string, options *TSMGetOptions)) *MockTimeseriesCmdable_TSMGetWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(*TSMGetOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMGetWithArgs_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMGetWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMGetWithArgs_Call) RunAndReturn(run func(context.Context, []string, *TSMGetOptions) *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMGetWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRange provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr
func (_m *MockTimeseriesCmdable) TSMRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr)

	if len(ret) == 0 {
		panic("no return value specified for TSMRange")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRange'
type MockTimeseriesCmdable_TSMRange_Call struct {
	*mock.Call
}

// TSMRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
func (_e *MockTimeseriesCmdable_Expecter) TSMRange(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}) *MockTimeseriesCmdable_TSMRange_Call {
	return &MockTimeseriesCmdable_TSMRange_Call{Call: _e.mock.On("TSMRange", ctx, fromTimestamp, toTimestamp, filterExpr)}
}

func (_c *MockTimeseriesCmdable_TSMRange_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string)) *MockTimeseriesCmdable_TSMRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRange_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRange_Call) RunAndReturn(run func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRangeWithArgs provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr, options
func (_m *MockTimeseriesCmdable) TSMRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRangeOptions) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr, options)

	if len(ret) == 0 {
		panic("no return value specified for TSMRangeWithArgs")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string, *TSMRangeOptions) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRangeWithArgs'
type MockTimeseriesCmdable_TSMRangeWithArgs_Call struct {
	*mock.Call
}

// TSMRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
//   - options *TSMRangeOptions
func (_e *MockTimeseriesCmdable_Expecter) TSMRangeWithArgs(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}, options interface{}) *MockTimeseriesCmdable_TSMRangeWithArgs_Call {
	return &MockTimeseriesCmdable_TSMRangeWithArgs_Call{Call: _e.mock.On("TSMRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)}
}

func (_c *MockTimeseriesCmdable_TSMRangeWithArgs_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRangeOptions)) *MockTimeseriesCmdable_TSMRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string), args[4].(*TSMRangeOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRangeWithArgs_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRangeWithArgs_Call) RunAndReturn(run func(context.Context, int, int, []string, *TSMRangeOptions) *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRevRange provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr
func (_m *MockTimeseriesCmdable) TSMRevRange(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr)

	if len(ret) == 0 {
		panic("no return value specified for TSMRevRange")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRevRange'
type MockTimeseriesCmdable_TSMRevRange_Call struct {
	*mock.Call
}

// TSMRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
func (_e *MockTimeseriesCmdable_Expecter) TSMRevRange(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}) *MockTimeseriesCmdable_TSMRevRange_Call {
	return &MockTimeseriesCmdable_TSMRevRange_Call{Call: _e.mock.On("TSMRevRange", ctx, fromTimestamp, toTimestamp, filterExpr)}
}

func (_c *MockTimeseriesCmdable_TSMRevRange_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string)) *MockTimeseriesCmdable_TSMRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRevRange_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRevRange_Call) RunAndReturn(run func(context.Context, int, int, []string) *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSMRevRangeWithArgs provides a mock function with given fields: ctx, fromTimestamp, toTimestamp, filterExpr, options
func (_m *MockTimeseriesCmdable) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRevRangeOptions) *MapStringSliceInterfaceCmd {
	ret := _m.Called(ctx, fromTimestamp, toTimestamp, filterExpr, options)

	if len(ret) == 0 {
		panic("no return value specified for TSMRevRangeWithArgs")
	}

	var r0 *MapStringSliceInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []string, *TSMRevRangeOptions) *MapStringSliceInterfaceCmd); ok {
		r0 = rf(ctx, fromTimestamp, toTimestamp, filterExpr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringSliceInterfaceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSMRevRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSMRevRangeWithArgs'
type MockTimeseriesCmdable_TSMRevRangeWithArgs_Call struct {
	*mock.Call
}

// TSMRevRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - fromTimestamp int
//   - toTimestamp int
//   - filterExpr []string
//   - options *TSMRevRangeOptions
func (_e *MockTimeseriesCmdable_Expecter) TSMRevRangeWithArgs(ctx interface{}, fromTimestamp interface{}, toTimestamp interface{}, filterExpr interface{}, options interface{}) *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call {
	return &MockTimeseriesCmdable_TSMRevRangeWithArgs_Call{Call: _e.mock.On("TSMRevRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)}
}

func (_c *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call) Run(run func(ctx context.Context, fromTimestamp int, toTimestamp int, filterExpr []string, options *TSMRevRangeOptions)) *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]string), args[4].(*TSMRevRangeOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call) Return(_a0 *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call) RunAndReturn(run func(context.Context, int, int, []string, *TSMRevRangeOptions) *MapStringSliceInterfaceCmd) *MockTimeseriesCmdable_TSMRevRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSQueryIndex provides a mock function with given fields: ctx, filterExpr
func (_m *MockTimeseriesCmdable) TSQueryIndex(ctx context.Context, filterExpr []string) *StringSliceCmd {
	ret := _m.Called(ctx, filterExpr)

	if len(ret) == 0 {
		panic("no return value specified for TSQueryIndex")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, []string) *StringSliceCmd); ok {
		r0 = rf(ctx, filterExpr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSQueryIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSQueryIndex'
type MockTimeseriesCmdable_TSQueryIndex_Call struct {
	*mock.Call
}

// TSQueryIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - filterExpr []string
func (_e *MockTimeseriesCmdable_Expecter) TSQueryIndex(ctx interface{}, filterExpr interface{}) *MockTimeseriesCmdable_TSQueryIndex_Call {
	return &MockTimeseriesCmdable_TSQueryIndex_Call{Call: _e.mock.On("TSQueryIndex", ctx, filterExpr)}
}

func (_c *MockTimeseriesCmdable_TSQueryIndex_Call) Run(run func(ctx context.Context, filterExpr []string)) *MockTimeseriesCmdable_TSQueryIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSQueryIndex_Call) Return(_a0 *StringSliceCmd) *MockTimeseriesCmdable_TSQueryIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSQueryIndex_Call) RunAndReturn(run func(context.Context, []string) *StringSliceCmd) *MockTimeseriesCmdable_TSQueryIndex_Call {
	_c.Call.Return(run)
	return _c
}

// TSRange provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp
func (_m *MockTimeseriesCmdable) TSRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSRange")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRange'
type MockTimeseriesCmdable_TSRange_Call struct {
	*mock.Call
}

// TSRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
func (_e *MockTimeseriesCmdable_Expecter) TSRange(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}) *MockTimeseriesCmdable_TSRange_Call {
	return &MockTimeseriesCmdable_TSRange_Call{Call: _e.mock.On("TSRange", ctx, key, fromTimestamp, toTimestamp)}
}

func (_c *MockTimeseriesCmdable_TSRange_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int)) *MockTimeseriesCmdable_TSRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSRange_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSRange_Call) RunAndReturn(run func(context.Context, string, int, int) *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSRangeWithArgs provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp, options
func (_m *MockTimeseriesCmdable) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRangeOptions) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSRangeWithArgs")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, *TSRangeOptions) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRangeWithArgs'
type MockTimeseriesCmdable_TSRangeWithArgs_Call struct {
	*mock.Call
}

// TSRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
//   - options *TSRangeOptions
func (_e *MockTimeseriesCmdable_Expecter) TSRangeWithArgs(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}, options interface{}) *MockTimeseriesCmdable_TSRangeWithArgs_Call {
	return &MockTimeseriesCmdable_TSRangeWithArgs_Call{Call: _e.mock.On("TSRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)}
}

func (_c *MockTimeseriesCmdable_TSRangeWithArgs_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRangeOptions)) *MockTimeseriesCmdable_TSRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(*TSRangeOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSRangeWithArgs_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSRangeWithArgs_Call) RunAndReturn(run func(context.Context, string, int, int, *TSRangeOptions) *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TSRevRange provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp
func (_m *MockTimeseriesCmdable) TSRevRange(ctx context.Context, key string, fromTimestamp int, toTimestamp int) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TSRevRange")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRevRange'
type MockTimeseriesCmdable_TSRevRange_Call struct {
	*mock.Call
}

// TSRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
func (_e *MockTimeseriesCmdable_Expecter) TSRevRange(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}) *MockTimeseriesCmdable_TSRevRange_Call {
	return &MockTimeseriesCmdable_TSRevRange_Call{Call: _e.mock.On("TSRevRange", ctx, key, fromTimestamp, toTimestamp)}
}

func (_c *MockTimeseriesCmdable_TSRevRange_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int)) *MockTimeseriesCmdable_TSRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSRevRange_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSRevRange_Call) RunAndReturn(run func(context.Context, string, int, int) *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// TSRevRangeWithArgs provides a mock function with given fields: ctx, key, fromTimestamp, toTimestamp, options
func (_m *MockTimeseriesCmdable) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRevRangeOptions) *TSTimestampValueSliceCmd {
	ret := _m.Called(ctx, key, fromTimestamp, toTimestamp, options)

	if len(ret) == 0 {
		panic("no return value specified for TSRevRangeWithArgs")
	}

	var r0 *TSTimestampValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, *TSRevRangeOptions) *TSTimestampValueSliceCmd); ok {
		r0 = rf(ctx, key, fromTimestamp, toTimestamp, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TSTimestampValueSliceCmd)
		}
	}

	return r0
}

// MockTimeseriesCmdable_TSRevRangeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TSRevRangeWithArgs'
type MockTimeseriesCmdable_TSRevRangeWithArgs_Call struct {
	*mock.Call
}

// TSRevRangeWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fromTimestamp int
//   - toTimestamp int
//   - options *TSRevRangeOptions
func (_e *MockTimeseriesCmdable_Expecter) TSRevRangeWithArgs(ctx interface{}, key interface{}, fromTimestamp interface{}, toTimestamp interface{}, options interface{}) *MockTimeseriesCmdable_TSRevRangeWithArgs_Call {
	return &MockTimeseriesCmdable_TSRevRangeWithArgs_Call{Call: _e.mock.On("TSRevRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)}
}

func (_c *MockTimeseriesCmdable_TSRevRangeWithArgs_Call) Run(run func(ctx context.Context, key string, fromTimestamp int, toTimestamp int, options *TSRevRangeOptions)) *MockTimeseriesCmdable_TSRevRangeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(*TSRevRangeOptions))
	})
	return _c
}

func (_c *MockTimeseriesCmdable_TSRevRangeWithArgs_Call) Return(_a0 *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRevRangeWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeseriesCmdable_TSRevRangeWithArgs_Call) RunAndReturn(run func(context.Context, string, int, int, *TSRevRangeOptions) *TSTimestampValueSliceCmd) *MockTimeseriesCmdable_TSRevRangeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeseriesCmdable creates a new instance of MockTimeseriesCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeseriesCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeseriesCmdable {
	mock := &MockTimeseriesCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
