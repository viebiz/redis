// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockJSONCmdable is an autogenerated mock type for the JSONCmdable type
type MockJSONCmdable struct {
	mock.Mock
}

type MockJSONCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJSONCmdable) EXPECT() *MockJSONCmdable_Expecter {
	return &MockJSONCmdable_Expecter{mock: &_m.Mock}
}

// JSONArrAppend provides a mock function with given fields: ctx, key, path, values
func (_m *MockJSONCmdable) JSONArrAppend(ctx context.Context, key string, path string, values ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrAppend")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrAppend'
type MockJSONCmdable_JSONArrAppend_Call struct {
	*mock.Call
}

// JSONArrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - values ...interface{}
func (_e *MockJSONCmdable_Expecter) JSONArrAppend(ctx interface{}, key interface{}, path interface{}, values ...interface{}) *MockJSONCmdable_JSONArrAppend_Call {
	return &MockJSONCmdable_JSONArrAppend_Call{Call: _e.mock.On("JSONArrAppend",
		append([]interface{}{ctx, key, path}, values...)...)}
}

func (_c *MockJSONCmdable_JSONArrAppend_Call) Run(run func(ctx context.Context, key string, path string, values ...interface{})) *MockJSONCmdable_JSONArrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrAppend_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrAppend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrAppend_Call) RunAndReturn(run func(context.Context, string, string, ...interface{}) *IntSliceCmd) *MockJSONCmdable_JSONArrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrIndex provides a mock function with given fields: ctx, key, path, value
func (_m *MockJSONCmdable) JSONArrIndex(ctx context.Context, key string, path string, value ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrIndex")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrIndex'
type MockJSONCmdable_JSONArrIndex_Call struct {
	*mock.Call
}

// JSONArrIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value ...interface{}
func (_e *MockJSONCmdable_Expecter) JSONArrIndex(ctx interface{}, key interface{}, path interface{}, value ...interface{}) *MockJSONCmdable_JSONArrIndex_Call {
	return &MockJSONCmdable_JSONArrIndex_Call{Call: _e.mock.On("JSONArrIndex",
		append([]interface{}{ctx, key, path}, value...)...)}
}

func (_c *MockJSONCmdable_JSONArrIndex_Call) Run(run func(ctx context.Context, key string, path string, value ...interface{})) *MockJSONCmdable_JSONArrIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrIndex_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrIndex_Call) RunAndReturn(run func(context.Context, string, string, ...interface{}) *IntSliceCmd) *MockJSONCmdable_JSONArrIndex_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrIndexWithArgs provides a mock function with given fields: ctx, key, path, options, value
func (_m *MockJSONCmdable) JSONArrIndexWithArgs(ctx context.Context, key string, path string, options *JSONArrIndexArgs, value ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path, options)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrIndexWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *JSONArrIndexArgs, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, options, value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrIndexWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrIndexWithArgs'
type MockJSONCmdable_JSONArrIndexWithArgs_Call struct {
	*mock.Call
}

// JSONArrIndexWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - options *JSONArrIndexArgs
//   - value ...interface{}
func (_e *MockJSONCmdable_Expecter) JSONArrIndexWithArgs(ctx interface{}, key interface{}, path interface{}, options interface{}, value ...interface{}) *MockJSONCmdable_JSONArrIndexWithArgs_Call {
	return &MockJSONCmdable_JSONArrIndexWithArgs_Call{Call: _e.mock.On("JSONArrIndexWithArgs",
		append([]interface{}{ctx, key, path, options}, value...)...)}
}

func (_c *MockJSONCmdable_JSONArrIndexWithArgs_Call) Run(run func(ctx context.Context, key string, path string, options *JSONArrIndexArgs, value ...interface{})) *MockJSONCmdable_JSONArrIndexWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*JSONArrIndexArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrIndexWithArgs_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrIndexWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrIndexWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *JSONArrIndexArgs, ...interface{}) *IntSliceCmd) *MockJSONCmdable_JSONArrIndexWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrInsert provides a mock function with given fields: ctx, key, path, index, values
func (_m *MockJSONCmdable) JSONArrInsert(ctx context.Context, key string, path string, index int64, values ...interface{}) *IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, path, index)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrInsert")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, ...interface{}) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, index, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrInsert'
type MockJSONCmdable_JSONArrInsert_Call struct {
	*mock.Call
}

// JSONArrInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int64
//   - values ...interface{}
func (_e *MockJSONCmdable_Expecter) JSONArrInsert(ctx interface{}, key interface{}, path interface{}, index interface{}, values ...interface{}) *MockJSONCmdable_JSONArrInsert_Call {
	return &MockJSONCmdable_JSONArrInsert_Call{Call: _e.mock.On("JSONArrInsert",
		append([]interface{}{ctx, key, path, index}, values...)...)}
}

func (_c *MockJSONCmdable_JSONArrInsert_Call) Run(run func(ctx context.Context, key string, path string, index int64, values ...interface{})) *MockJSONCmdable_JSONArrInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrInsert_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrInsert_Call) RunAndReturn(run func(context.Context, string, string, int64, ...interface{}) *IntSliceCmd) *MockJSONCmdable_JSONArrInsert_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrLen provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONArrLen(ctx context.Context, key string, path string) *IntSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrLen")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrLen'
type MockJSONCmdable_JSONArrLen_Call struct {
	*mock.Call
}

// JSONArrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONArrLen(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONArrLen_Call {
	return &MockJSONCmdable_JSONArrLen_Call{Call: _e.mock.On("JSONArrLen", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONArrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONArrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrLen_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrLen_Call) RunAndReturn(run func(context.Context, string, string) *IntSliceCmd) *MockJSONCmdable_JSONArrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrPop provides a mock function with given fields: ctx, key, path, index
func (_m *MockJSONCmdable) JSONArrPop(ctx context.Context, key string, path string, index int) *StringSliceCmd {
	ret := _m.Called(ctx, key, path, index)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrPop")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *StringSliceCmd); ok {
		r0 = rf(ctx, key, path, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrPop'
type MockJSONCmdable_JSONArrPop_Call struct {
	*mock.Call
}

// JSONArrPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - index int
func (_e *MockJSONCmdable_Expecter) JSONArrPop(ctx interface{}, key interface{}, path interface{}, index interface{}) *MockJSONCmdable_JSONArrPop_Call {
	return &MockJSONCmdable_JSONArrPop_Call{Call: _e.mock.On("JSONArrPop", ctx, key, path, index)}
}

func (_c *MockJSONCmdable_JSONArrPop_Call) Run(run func(ctx context.Context, key string, path string, index int)) *MockJSONCmdable_JSONArrPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrPop_Call) Return(_a0 *StringSliceCmd) *MockJSONCmdable_JSONArrPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrPop_Call) RunAndReturn(run func(context.Context, string, string, int) *StringSliceCmd) *MockJSONCmdable_JSONArrPop_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrTrim provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONArrTrim(ctx context.Context, key string, path string) *IntSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrTrim")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrTrim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrTrim'
type MockJSONCmdable_JSONArrTrim_Call struct {
	*mock.Call
}

// JSONArrTrim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONArrTrim(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONArrTrim_Call {
	return &MockJSONCmdable_JSONArrTrim_Call{Call: _e.mock.On("JSONArrTrim", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONArrTrim_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONArrTrim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrTrim_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrTrim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrTrim_Call) RunAndReturn(run func(context.Context, string, string) *IntSliceCmd) *MockJSONCmdable_JSONArrTrim_Call {
	_c.Call.Return(run)
	return _c
}

// JSONArrTrimWithArgs provides a mock function with given fields: ctx, key, path, options
func (_m *MockJSONCmdable) JSONArrTrimWithArgs(ctx context.Context, key string, path string, options *JSONArrTrimArgs) *IntSliceCmd {
	ret := _m.Called(ctx, key, path, options)

	if len(ret) == 0 {
		panic("no return value specified for JSONArrTrimWithArgs")
	}

	var r0 *IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *JSONArrTrimArgs) *IntSliceCmd); ok {
		r0 = rf(ctx, key, path, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONArrTrimWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONArrTrimWithArgs'
type MockJSONCmdable_JSONArrTrimWithArgs_Call struct {
	*mock.Call
}

// JSONArrTrimWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - options *JSONArrTrimArgs
func (_e *MockJSONCmdable_Expecter) JSONArrTrimWithArgs(ctx interface{}, key interface{}, path interface{}, options interface{}) *MockJSONCmdable_JSONArrTrimWithArgs_Call {
	return &MockJSONCmdable_JSONArrTrimWithArgs_Call{Call: _e.mock.On("JSONArrTrimWithArgs", ctx, key, path, options)}
}

func (_c *MockJSONCmdable_JSONArrTrimWithArgs_Call) Run(run func(ctx context.Context, key string, path string, options *JSONArrTrimArgs)) *MockJSONCmdable_JSONArrTrimWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*JSONArrTrimArgs))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONArrTrimWithArgs_Call) Return(_a0 *IntSliceCmd) *MockJSONCmdable_JSONArrTrimWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONArrTrimWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *JSONArrTrimArgs) *IntSliceCmd) *MockJSONCmdable_JSONArrTrimWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONClear provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONClear(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONClear")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONClear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONClear'
type MockJSONCmdable_JSONClear_Call struct {
	*mock.Call
}

// JSONClear is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONClear(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONClear_Call {
	return &MockJSONCmdable_JSONClear_Call{Call: _e.mock.On("JSONClear", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONClear_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONClear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONClear_Call) Return(_a0 *IntCmd) *MockJSONCmdable_JSONClear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONClear_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockJSONCmdable_JSONClear_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDebugMemory provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONDebugMemory(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDebugMemory")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONDebugMemory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDebugMemory'
type MockJSONCmdable_JSONDebugMemory_Call struct {
	*mock.Call
}

// JSONDebugMemory is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONDebugMemory(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONDebugMemory_Call {
	return &MockJSONCmdable_JSONDebugMemory_Call{Call: _e.mock.On("JSONDebugMemory", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONDebugMemory_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONDebugMemory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONDebugMemory_Call) Return(_a0 *IntCmd) *MockJSONCmdable_JSONDebugMemory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONDebugMemory_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockJSONCmdable_JSONDebugMemory_Call {
	_c.Call.Return(run)
	return _c
}

// JSONDel provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONDel(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONDel'
type MockJSONCmdable_JSONDel_Call struct {
	*mock.Call
}

// JSONDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONDel(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONDel_Call {
	return &MockJSONCmdable_JSONDel_Call{Call: _e.mock.On("JSONDel", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONDel_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONDel_Call) Return(_a0 *IntCmd) *MockJSONCmdable_JSONDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONDel_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockJSONCmdable_JSONDel_Call {
	_c.Call.Return(run)
	return _c
}

// JSONForget provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONForget(ctx context.Context, key string, path string) *IntCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONForget")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONForget'
type MockJSONCmdable_JSONForget_Call struct {
	*mock.Call
}

// JSONForget is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONForget(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONForget_Call {
	return &MockJSONCmdable_JSONForget_Call{Call: _e.mock.On("JSONForget", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONForget_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONForget_Call) Return(_a0 *IntCmd) *MockJSONCmdable_JSONForget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONForget_Call) RunAndReturn(run func(context.Context, string, string) *IntCmd) *MockJSONCmdable_JSONForget_Call {
	_c.Call.Return(run)
	return _c
}

// JSONGet provides a mock function with given fields: ctx, key, paths
func (_m *MockJSONCmdable) JSONGet(ctx context.Context, key string, paths ...string) *JSONCmd {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONGet")
	}

	var r0 *JSONCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *JSONCmd); ok {
		r0 = rf(ctx, key, paths...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONGet'
type MockJSONCmdable_JSONGet_Call struct {
	*mock.Call
}

// JSONGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - paths ...string
func (_e *MockJSONCmdable_Expecter) JSONGet(ctx interface{}, key interface{}, paths ...interface{}) *MockJSONCmdable_JSONGet_Call {
	return &MockJSONCmdable_JSONGet_Call{Call: _e.mock.On("JSONGet",
		append([]interface{}{ctx, key}, paths...)...)}
}

func (_c *MockJSONCmdable_JSONGet_Call) Run(run func(ctx context.Context, key string, paths ...string)) *MockJSONCmdable_JSONGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONGet_Call) Return(_a0 *JSONCmd) *MockJSONCmdable_JSONGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONGet_Call) RunAndReturn(run func(context.Context, string, ...string) *JSONCmd) *MockJSONCmdable_JSONGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONGetWithArgs provides a mock function with given fields: ctx, key, options, paths
func (_m *MockJSONCmdable) JSONGetWithArgs(ctx context.Context, key string, options *JSONGetArgs, paths ...string) *JSONCmd {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONGetWithArgs")
	}

	var r0 *JSONCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *JSONGetArgs, ...string) *JSONCmd); ok {
		r0 = rf(ctx, key, options, paths...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONGetWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONGetWithArgs'
type MockJSONCmdable_JSONGetWithArgs_Call struct {
	*mock.Call
}

// JSONGetWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *JSONGetArgs
//   - paths ...string
func (_e *MockJSONCmdable_Expecter) JSONGetWithArgs(ctx interface{}, key interface{}, options interface{}, paths ...interface{}) *MockJSONCmdable_JSONGetWithArgs_Call {
	return &MockJSONCmdable_JSONGetWithArgs_Call{Call: _e.mock.On("JSONGetWithArgs",
		append([]interface{}{ctx, key, options}, paths...)...)}
}

func (_c *MockJSONCmdable_JSONGetWithArgs_Call) Run(run func(ctx context.Context, key string, options *JSONGetArgs, paths ...string)) *MockJSONCmdable_JSONGetWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*JSONGetArgs), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONGetWithArgs_Call) Return(_a0 *JSONCmd) *MockJSONCmdable_JSONGetWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONGetWithArgs_Call) RunAndReturn(run func(context.Context, string, *JSONGetArgs, ...string) *JSONCmd) *MockJSONCmdable_JSONGetWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMGet provides a mock function with given fields: ctx, path, keys
func (_m *MockJSONCmdable) JSONMGet(ctx context.Context, path string, keys ...string) *JSONSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONMGet")
	}

	var r0 *JSONSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *JSONSliceCmd); ok {
		r0 = rf(ctx, path, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMGet'
type MockJSONCmdable_JSONMGet_Call struct {
	*mock.Call
}

// JSONMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - keys ...string
func (_e *MockJSONCmdable_Expecter) JSONMGet(ctx interface{}, path interface{}, keys ...interface{}) *MockJSONCmdable_JSONMGet_Call {
	return &MockJSONCmdable_JSONMGet_Call{Call: _e.mock.On("JSONMGet",
		append([]interface{}{ctx, path}, keys...)...)}
}

func (_c *MockJSONCmdable_JSONMGet_Call) Run(run func(ctx context.Context, path string, keys ...string)) *MockJSONCmdable_JSONMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONMGet_Call) Return(_a0 *JSONSliceCmd) *MockJSONCmdable_JSONMGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONMGet_Call) RunAndReturn(run func(context.Context, string, ...string) *JSONSliceCmd) *MockJSONCmdable_JSONMGet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMSet provides a mock function with given fields: ctx, params
func (_m *MockJSONCmdable) JSONMSet(ctx context.Context, params ...interface{}) *StatusCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JSONMSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *StatusCmd); ok {
		r0 = rf(ctx, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONMSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMSet'
type MockJSONCmdable_JSONMSet_Call struct {
	*mock.Call
}

// JSONMSet is a helper method to define mock.On call
//   - ctx context.Context
//   - params ...interface{}
func (_e *MockJSONCmdable_Expecter) JSONMSet(ctx interface{}, params ...interface{}) *MockJSONCmdable_JSONMSet_Call {
	return &MockJSONCmdable_JSONMSet_Call{Call: _e.mock.On("JSONMSet",
		append([]interface{}{ctx}, params...)...)}
}

func (_c *MockJSONCmdable_JSONMSet_Call) Run(run func(ctx context.Context, params ...interface{})) *MockJSONCmdable_JSONMSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockJSONCmdable_JSONMSet_Call) Return(_a0 *StatusCmd) *MockJSONCmdable_JSONMSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONMSet_Call) RunAndReturn(run func(context.Context, ...interface{}) *StatusCmd) *MockJSONCmdable_JSONMSet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMSetArgs provides a mock function with given fields: ctx, docs
func (_m *MockJSONCmdable) JSONMSetArgs(ctx context.Context, docs []JSONSetArgs) *StatusCmd {
	ret := _m.Called(ctx, docs)

	if len(ret) == 0 {
		panic("no return value specified for JSONMSetArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, []JSONSetArgs) *StatusCmd); ok {
		r0 = rf(ctx, docs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONMSetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMSetArgs'
type MockJSONCmdable_JSONMSetArgs_Call struct {
	*mock.Call
}

// JSONMSetArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - docs []JSONSetArgs
func (_e *MockJSONCmdable_Expecter) JSONMSetArgs(ctx interface{}, docs interface{}) *MockJSONCmdable_JSONMSetArgs_Call {
	return &MockJSONCmdable_JSONMSetArgs_Call{Call: _e.mock.On("JSONMSetArgs", ctx, docs)}
}

func (_c *MockJSONCmdable_JSONMSetArgs_Call) Run(run func(ctx context.Context, docs []JSONSetArgs)) *MockJSONCmdable_JSONMSetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]JSONSetArgs))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONMSetArgs_Call) Return(_a0 *StatusCmd) *MockJSONCmdable_JSONMSetArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONMSetArgs_Call) RunAndReturn(run func(context.Context, []JSONSetArgs) *StatusCmd) *MockJSONCmdable_JSONMSetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// JSONMerge provides a mock function with given fields: ctx, key, path, value
func (_m *MockJSONCmdable) JSONMerge(ctx context.Context, key string, path string, value string) *StatusCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONMerge")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *StatusCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONMerge'
type MockJSONCmdable_JSONMerge_Call struct {
	*mock.Call
}

// JSONMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value string
func (_e *MockJSONCmdable_Expecter) JSONMerge(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockJSONCmdable_JSONMerge_Call {
	return &MockJSONCmdable_JSONMerge_Call{Call: _e.mock.On("JSONMerge", ctx, key, path, value)}
}

func (_c *MockJSONCmdable_JSONMerge_Call) Run(run func(ctx context.Context, key string, path string, value string)) *MockJSONCmdable_JSONMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONMerge_Call) Return(_a0 *StatusCmd) *MockJSONCmdable_JSONMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONMerge_Call) RunAndReturn(run func(context.Context, string, string, string) *StatusCmd) *MockJSONCmdable_JSONMerge_Call {
	_c.Call.Return(run)
	return _c
}

// JSONNumIncrBy provides a mock function with given fields: ctx, key, path, value
func (_m *MockJSONCmdable) JSONNumIncrBy(ctx context.Context, key string, path string, value float64) *JSONCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONNumIncrBy")
	}

	var r0 *JSONCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *JSONCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONNumIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONNumIncrBy'
type MockJSONCmdable_JSONNumIncrBy_Call struct {
	*mock.Call
}

// JSONNumIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value float64
func (_e *MockJSONCmdable_Expecter) JSONNumIncrBy(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockJSONCmdable_JSONNumIncrBy_Call {
	return &MockJSONCmdable_JSONNumIncrBy_Call{Call: _e.mock.On("JSONNumIncrBy", ctx, key, path, value)}
}

func (_c *MockJSONCmdable_JSONNumIncrBy_Call) Run(run func(ctx context.Context, key string, path string, value float64)) *MockJSONCmdable_JSONNumIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONNumIncrBy_Call) Return(_a0 *JSONCmd) *MockJSONCmdable_JSONNumIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONNumIncrBy_Call) RunAndReturn(run func(context.Context, string, string, float64) *JSONCmd) *MockJSONCmdable_JSONNumIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjKeys provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONObjKeys(ctx context.Context, key string, path string) *SliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjKeys")
	}

	var r0 *SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *SliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONObjKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjKeys'
type MockJSONCmdable_JSONObjKeys_Call struct {
	*mock.Call
}

// JSONObjKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONObjKeys(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONObjKeys_Call {
	return &MockJSONCmdable_JSONObjKeys_Call{Call: _e.mock.On("JSONObjKeys", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONObjKeys_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONObjKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONObjKeys_Call) Return(_a0 *SliceCmd) *MockJSONCmdable_JSONObjKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONObjKeys_Call) RunAndReturn(run func(context.Context, string, string) *SliceCmd) *MockJSONCmdable_JSONObjKeys_Call {
	_c.Call.Return(run)
	return _c
}

// JSONObjLen provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONObjLen(ctx context.Context, key string, path string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONObjLen")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONObjLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONObjLen'
type MockJSONCmdable_JSONObjLen_Call struct {
	*mock.Call
}

// JSONObjLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONObjLen(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONObjLen_Call {
	return &MockJSONCmdable_JSONObjLen_Call{Call: _e.mock.On("JSONObjLen", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONObjLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONObjLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONObjLen_Call) Return(_a0 *IntPointerSliceCmd) *MockJSONCmdable_JSONObjLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONObjLen_Call) RunAndReturn(run func(context.Context, string, string) *IntPointerSliceCmd) *MockJSONCmdable_JSONObjLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONSet provides a mock function with given fields: ctx, key, path, value
func (_m *MockJSONCmdable) JSONSet(ctx context.Context, key string, path string, value interface{}) *StatusCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONSet'
type MockJSONCmdable_JSONSet_Call struct {
	*mock.Call
}

// JSONSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value interface{}
func (_e *MockJSONCmdable_Expecter) JSONSet(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockJSONCmdable_JSONSet_Call {
	return &MockJSONCmdable_JSONSet_Call{Call: _e.mock.On("JSONSet", ctx, key, path, value)}
}

func (_c *MockJSONCmdable_JSONSet_Call) Run(run func(ctx context.Context, key string, path string, value interface{})) *MockJSONCmdable_JSONSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONSet_Call) Return(_a0 *StatusCmd) *MockJSONCmdable_JSONSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONSet_Call) RunAndReturn(run func(context.Context, string, string, interface{}) *StatusCmd) *MockJSONCmdable_JSONSet_Call {
	_c.Call.Return(run)
	return _c
}

// JSONSetMode provides a mock function with given fields: ctx, key, path, value, mode
func (_m *MockJSONCmdable) JSONSetMode(ctx context.Context, key string, path string, value interface{}, mode string) *StatusCmd {
	ret := _m.Called(ctx, key, path, value, mode)

	if len(ret) == 0 {
		panic("no return value specified for JSONSetMode")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, string) *StatusCmd); ok {
		r0 = rf(ctx, key, path, value, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONSetMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONSetMode'
type MockJSONCmdable_JSONSetMode_Call struct {
	*mock.Call
}

// JSONSetMode is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value interface{}
//   - mode string
func (_e *MockJSONCmdable_Expecter) JSONSetMode(ctx interface{}, key interface{}, path interface{}, value interface{}, mode interface{}) *MockJSONCmdable_JSONSetMode_Call {
	return &MockJSONCmdable_JSONSetMode_Call{Call: _e.mock.On("JSONSetMode", ctx, key, path, value, mode)}
}

func (_c *MockJSONCmdable_JSONSetMode_Call) Run(run func(ctx context.Context, key string, path string, value interface{}, mode string)) *MockJSONCmdable_JSONSetMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONSetMode_Call) Return(_a0 *StatusCmd) *MockJSONCmdable_JSONSetMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONSetMode_Call) RunAndReturn(run func(context.Context, string, string, interface{}, string) *StatusCmd) *MockJSONCmdable_JSONSetMode_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrAppend provides a mock function with given fields: ctx, key, path, value
func (_m *MockJSONCmdable) JSONStrAppend(ctx context.Context, key string, path string, value string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path, value)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrAppend")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONStrAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrAppend'
type MockJSONCmdable_JSONStrAppend_Call struct {
	*mock.Call
}

// JSONStrAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
//   - value string
func (_e *MockJSONCmdable_Expecter) JSONStrAppend(ctx interface{}, key interface{}, path interface{}, value interface{}) *MockJSONCmdable_JSONStrAppend_Call {
	return &MockJSONCmdable_JSONStrAppend_Call{Call: _e.mock.On("JSONStrAppend", ctx, key, path, value)}
}

func (_c *MockJSONCmdable_JSONStrAppend_Call) Run(run func(ctx context.Context, key string, path string, value string)) *MockJSONCmdable_JSONStrAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONStrAppend_Call) Return(_a0 *IntPointerSliceCmd) *MockJSONCmdable_JSONStrAppend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONStrAppend_Call) RunAndReturn(run func(context.Context, string, string, string) *IntPointerSliceCmd) *MockJSONCmdable_JSONStrAppend_Call {
	_c.Call.Return(run)
	return _c
}

// JSONStrLen provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONStrLen(ctx context.Context, key string, path string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONStrLen")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONStrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONStrLen'
type MockJSONCmdable_JSONStrLen_Call struct {
	*mock.Call
}

// JSONStrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONStrLen(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONStrLen_Call {
	return &MockJSONCmdable_JSONStrLen_Call{Call: _e.mock.On("JSONStrLen", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONStrLen_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONStrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONStrLen_Call) Return(_a0 *IntPointerSliceCmd) *MockJSONCmdable_JSONStrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONStrLen_Call) RunAndReturn(run func(context.Context, string, string) *IntPointerSliceCmd) *MockJSONCmdable_JSONStrLen_Call {
	_c.Call.Return(run)
	return _c
}

// JSONToggle provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONToggle(ctx context.Context, key string, path string) *IntPointerSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONToggle")
	}

	var r0 *IntPointerSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *IntPointerSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntPointerSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONToggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONToggle'
type MockJSONCmdable_JSONToggle_Call struct {
	*mock.Call
}

// JSONToggle is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONToggle(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONToggle_Call {
	return &MockJSONCmdable_JSONToggle_Call{Call: _e.mock.On("JSONToggle", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONToggle_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONToggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONToggle_Call) Return(_a0 *IntPointerSliceCmd) *MockJSONCmdable_JSONToggle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONToggle_Call) RunAndReturn(run func(context.Context, string, string) *IntPointerSliceCmd) *MockJSONCmdable_JSONToggle_Call {
	_c.Call.Return(run)
	return _c
}

// JSONType provides a mock function with given fields: ctx, key, path
func (_m *MockJSONCmdable) JSONType(ctx context.Context, key string, path string) *JSONSliceCmd {
	ret := _m.Called(ctx, key, path)

	if len(ret) == 0 {
		panic("no return value specified for JSONType")
	}

	var r0 *JSONSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *JSONSliceCmd); ok {
		r0 = rf(ctx, key, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JSONSliceCmd)
		}
	}

	return r0
}

// MockJSONCmdable_JSONType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONType'
type MockJSONCmdable_JSONType_Call struct {
	*mock.Call
}

// JSONType is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - path string
func (_e *MockJSONCmdable_Expecter) JSONType(ctx interface{}, key interface{}, path interface{}) *MockJSONCmdable_JSONType_Call {
	return &MockJSONCmdable_JSONType_Call{Call: _e.mock.On("JSONType", ctx, key, path)}
}

func (_c *MockJSONCmdable_JSONType_Call) Run(run func(ctx context.Context, key string, path string)) *MockJSONCmdable_JSONType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJSONCmdable_JSONType_Call) Return(_a0 *JSONSliceCmd) *MockJSONCmdable_JSONType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJSONCmdable_JSONType_Call) RunAndReturn(run func(context.Context, string, string) *JSONSliceCmd) *MockJSONCmdable_JSONType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJSONCmdable creates a new instance of MockJSONCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJSONCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJSONCmdable {
	mock := &MockJSONCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
