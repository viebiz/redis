// Code generated by mockery. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSearchCmdable is an autogenerated mock type for the SearchCmdable type
type MockSearchCmdable struct {
	mock.Mock
}

type MockSearchCmdable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchCmdable) EXPECT() *MockSearchCmdable_Expecter {
	return &MockSearchCmdable_Expecter{mock: &_m.Mock}
}

// FTAggregate provides a mock function with given fields: ctx, index, query
func (_m *MockSearchCmdable) FTAggregate(ctx context.Context, index string, query string) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTAggregate")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAggregate'
type MockSearchCmdable_FTAggregate_Call struct {
	*mock.Call
}

// FTAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockSearchCmdable_Expecter) FTAggregate(ctx interface{}, index interface{}, query interface{}) *MockSearchCmdable_FTAggregate_Call {
	return &MockSearchCmdable_FTAggregate_Call{Call: _e.mock.On("FTAggregate", ctx, index, query)}
}

func (_c *MockSearchCmdable_FTAggregate_Call) Run(run func(ctx context.Context, index string, query string)) *MockSearchCmdable_FTAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTAggregate_Call) Return(_a0 *MapStringInterfaceCmd) *MockSearchCmdable_FTAggregate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTAggregate_Call) RunAndReturn(run func(context.Context, string, string) *MapStringInterfaceCmd) *MockSearchCmdable_FTAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// FTAggregateWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockSearchCmdable) FTAggregateWithArgs(ctx context.Context, index string, query string, options *FTAggregateOptions) *AggregateCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTAggregateWithArgs")
	}

	var r0 *AggregateCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTAggregateOptions) *AggregateCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AggregateCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTAggregateWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAggregateWithArgs'
type MockSearchCmdable_FTAggregateWithArgs_Call struct {
	*mock.Call
}

// FTAggregateWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTAggregateOptions
func (_e *MockSearchCmdable_Expecter) FTAggregateWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockSearchCmdable_FTAggregateWithArgs_Call {
	return &MockSearchCmdable_FTAggregateWithArgs_Call{Call: _e.mock.On("FTAggregateWithArgs", ctx, index, query, options)}
}

func (_c *MockSearchCmdable_FTAggregateWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTAggregateOptions)) *MockSearchCmdable_FTAggregateWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTAggregateOptions))
	})
	return _c
}

func (_c *MockSearchCmdable_FTAggregateWithArgs_Call) Return(_a0 *AggregateCmd) *MockSearchCmdable_FTAggregateWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTAggregateWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTAggregateOptions) *AggregateCmd) *MockSearchCmdable_FTAggregateWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTAliasAdd provides a mock function with given fields: ctx, index, alias
func (_m *MockSearchCmdable) FTAliasAdd(ctx context.Context, index string, alias string) *StatusCmd {
	ret := _m.Called(ctx, index, alias)

	if len(ret) == 0 {
		panic("no return value specified for FTAliasAdd")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, index, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTAliasAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAliasAdd'
type MockSearchCmdable_FTAliasAdd_Call struct {
	*mock.Call
}

// FTAliasAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - alias string
func (_e *MockSearchCmdable_Expecter) FTAliasAdd(ctx interface{}, index interface{}, alias interface{}) *MockSearchCmdable_FTAliasAdd_Call {
	return &MockSearchCmdable_FTAliasAdd_Call{Call: _e.mock.On("FTAliasAdd", ctx, index, alias)}
}

func (_c *MockSearchCmdable_FTAliasAdd_Call) Run(run func(ctx context.Context, index string, alias string)) *MockSearchCmdable_FTAliasAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTAliasAdd_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTAliasAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTAliasAdd_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockSearchCmdable_FTAliasAdd_Call {
	_c.Call.Return(run)
	return _c
}

// FTAliasDel provides a mock function with given fields: ctx, alias
func (_m *MockSearchCmdable) FTAliasDel(ctx context.Context, alias string) *StatusCmd {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for FTAliasDel")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTAliasDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAliasDel'
type MockSearchCmdable_FTAliasDel_Call struct {
	*mock.Call
}

// FTAliasDel is a helper method to define mock.On call
//   - ctx context.Context
//   - alias string
func (_e *MockSearchCmdable_Expecter) FTAliasDel(ctx interface{}, alias interface{}) *MockSearchCmdable_FTAliasDel_Call {
	return &MockSearchCmdable_FTAliasDel_Call{Call: _e.mock.On("FTAliasDel", ctx, alias)}
}

func (_c *MockSearchCmdable_FTAliasDel_Call) Run(run func(ctx context.Context, alias string)) *MockSearchCmdable_FTAliasDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTAliasDel_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTAliasDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTAliasDel_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockSearchCmdable_FTAliasDel_Call {
	_c.Call.Return(run)
	return _c
}

// FTAliasUpdate provides a mock function with given fields: ctx, index, alias
func (_m *MockSearchCmdable) FTAliasUpdate(ctx context.Context, index string, alias string) *StatusCmd {
	ret := _m.Called(ctx, index, alias)

	if len(ret) == 0 {
		panic("no return value specified for FTAliasUpdate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StatusCmd); ok {
		r0 = rf(ctx, index, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTAliasUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAliasUpdate'
type MockSearchCmdable_FTAliasUpdate_Call struct {
	*mock.Call
}

// FTAliasUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - alias string
func (_e *MockSearchCmdable_Expecter) FTAliasUpdate(ctx interface{}, index interface{}, alias interface{}) *MockSearchCmdable_FTAliasUpdate_Call {
	return &MockSearchCmdable_FTAliasUpdate_Call{Call: _e.mock.On("FTAliasUpdate", ctx, index, alias)}
}

func (_c *MockSearchCmdable_FTAliasUpdate_Call) Run(run func(ctx context.Context, index string, alias string)) *MockSearchCmdable_FTAliasUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTAliasUpdate_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTAliasUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTAliasUpdate_Call) RunAndReturn(run func(context.Context, string, string) *StatusCmd) *MockSearchCmdable_FTAliasUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// FTAlter provides a mock function with given fields: ctx, index, skipInitialScan, definition
func (_m *MockSearchCmdable) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *StatusCmd {
	ret := _m.Called(ctx, index, skipInitialScan, definition)

	if len(ret) == 0 {
		panic("no return value specified for FTAlter")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, []interface{}) *StatusCmd); ok {
		r0 = rf(ctx, index, skipInitialScan, definition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTAlter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTAlter'
type MockSearchCmdable_FTAlter_Call struct {
	*mock.Call
}

// FTAlter is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - skipInitialScan bool
//   - definition []interface{}
func (_e *MockSearchCmdable_Expecter) FTAlter(ctx interface{}, index interface{}, skipInitialScan interface{}, definition interface{}) *MockSearchCmdable_FTAlter_Call {
	return &MockSearchCmdable_FTAlter_Call{Call: _e.mock.On("FTAlter", ctx, index, skipInitialScan, definition)}
}

func (_c *MockSearchCmdable_FTAlter_Call) Run(run func(ctx context.Context, index string, skipInitialScan bool, definition []interface{})) *MockSearchCmdable_FTAlter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].([]interface{}))
	})
	return _c
}

func (_c *MockSearchCmdable_FTAlter_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTAlter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTAlter_Call) RunAndReturn(run func(context.Context, string, bool, []interface{}) *StatusCmd) *MockSearchCmdable_FTAlter_Call {
	_c.Call.Return(run)
	return _c
}

// FTConfigGet provides a mock function with given fields: ctx, option
func (_m *MockSearchCmdable) FTConfigGet(ctx context.Context, option string) *MapMapStringInterfaceCmd {
	ret := _m.Called(ctx, option)

	if len(ret) == 0 {
		panic("no return value specified for FTConfigGet")
	}

	var r0 *MapMapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *MapMapStringInterfaceCmd); ok {
		r0 = rf(ctx, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapMapStringInterfaceCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTConfigGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTConfigGet'
type MockSearchCmdable_FTConfigGet_Call struct {
	*mock.Call
}

// FTConfigGet is a helper method to define mock.On call
//   - ctx context.Context
//   - option string
func (_e *MockSearchCmdable_Expecter) FTConfigGet(ctx interface{}, option interface{}) *MockSearchCmdable_FTConfigGet_Call {
	return &MockSearchCmdable_FTConfigGet_Call{Call: _e.mock.On("FTConfigGet", ctx, option)}
}

func (_c *MockSearchCmdable_FTConfigGet_Call) Run(run func(ctx context.Context, option string)) *MockSearchCmdable_FTConfigGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTConfigGet_Call) Return(_a0 *MapMapStringInterfaceCmd) *MockSearchCmdable_FTConfigGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTConfigGet_Call) RunAndReturn(run func(context.Context, string) *MapMapStringInterfaceCmd) *MockSearchCmdable_FTConfigGet_Call {
	_c.Call.Return(run)
	return _c
}

// FTConfigSet provides a mock function with given fields: ctx, option, value
func (_m *MockSearchCmdable) FTConfigSet(ctx context.Context, option string, value interface{}) *StatusCmd {
	ret := _m.Called(ctx, option, value)

	if len(ret) == 0 {
		panic("no return value specified for FTConfigSet")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *StatusCmd); ok {
		r0 = rf(ctx, option, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTConfigSet'
type MockSearchCmdable_FTConfigSet_Call struct {
	*mock.Call
}

// FTConfigSet is a helper method to define mock.On call
//   - ctx context.Context
//   - option string
//   - value interface{}
func (_e *MockSearchCmdable_Expecter) FTConfigSet(ctx interface{}, option interface{}, value interface{}) *MockSearchCmdable_FTConfigSet_Call {
	return &MockSearchCmdable_FTConfigSet_Call{Call: _e.mock.On("FTConfigSet", ctx, option, value)}
}

func (_c *MockSearchCmdable_FTConfigSet_Call) Run(run func(ctx context.Context, option string, value interface{})) *MockSearchCmdable_FTConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockSearchCmdable_FTConfigSet_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTConfigSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTConfigSet_Call) RunAndReturn(run func(context.Context, string, interface{}) *StatusCmd) *MockSearchCmdable_FTConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// FTCreate provides a mock function with given fields: ctx, index, options, schema
func (_m *MockSearchCmdable) FTCreate(ctx context.Context, index string, options *FTCreateOptions, schema ...*FieldSchema) *StatusCmd {
	_va := make([]interface{}, len(schema))
	for _i := range schema {
		_va[_i] = schema[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, index, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FTCreate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *FTCreateOptions, ...*FieldSchema) *StatusCmd); ok {
		r0 = rf(ctx, index, options, schema...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTCreate'
type MockSearchCmdable_FTCreate_Call struct {
	*mock.Call
}

// FTCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - options *FTCreateOptions
//   - schema ...*FieldSchema
func (_e *MockSearchCmdable_Expecter) FTCreate(ctx interface{}, index interface{}, options interface{}, schema ...interface{}) *MockSearchCmdable_FTCreate_Call {
	return &MockSearchCmdable_FTCreate_Call{Call: _e.mock.On("FTCreate",
		append([]interface{}{ctx, index, options}, schema...)...)}
}

func (_c *MockSearchCmdable_FTCreate_Call) Run(run func(ctx context.Context, index string, options *FTCreateOptions, schema ...*FieldSchema)) *MockSearchCmdable_FTCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*FieldSchema, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*FieldSchema)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*FTCreateOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchCmdable_FTCreate_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTCreate_Call) RunAndReturn(run func(context.Context, string, *FTCreateOptions, ...*FieldSchema) *StatusCmd) *MockSearchCmdable_FTCreate_Call {
	_c.Call.Return(run)
	return _c
}

// FTCursorDel provides a mock function with given fields: ctx, index, cursorId
func (_m *MockSearchCmdable) FTCursorDel(ctx context.Context, index string, cursorId int) *StatusCmd {
	ret := _m.Called(ctx, index, cursorId)

	if len(ret) == 0 {
		panic("no return value specified for FTCursorDel")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *StatusCmd); ok {
		r0 = rf(ctx, index, cursorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTCursorDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTCursorDel'
type MockSearchCmdable_FTCursorDel_Call struct {
	*mock.Call
}

// FTCursorDel is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - cursorId int
func (_e *MockSearchCmdable_Expecter) FTCursorDel(ctx interface{}, index interface{}, cursorId interface{}) *MockSearchCmdable_FTCursorDel_Call {
	return &MockSearchCmdable_FTCursorDel_Call{Call: _e.mock.On("FTCursorDel", ctx, index, cursorId)}
}

func (_c *MockSearchCmdable_FTCursorDel_Call) Run(run func(ctx context.Context, index string, cursorId int)) *MockSearchCmdable_FTCursorDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockSearchCmdable_FTCursorDel_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTCursorDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTCursorDel_Call) RunAndReturn(run func(context.Context, string, int) *StatusCmd) *MockSearchCmdable_FTCursorDel_Call {
	_c.Call.Return(run)
	return _c
}

// FTCursorRead provides a mock function with given fields: ctx, index, cursorId, count
func (_m *MockSearchCmdable) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *MapStringInterfaceCmd {
	ret := _m.Called(ctx, index, cursorId, count)

	if len(ret) == 0 {
		panic("no return value specified for FTCursorRead")
	}

	var r0 *MapStringInterfaceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *MapStringInterfaceCmd); ok {
		r0 = rf(ctx, index, cursorId, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MapStringInterfaceCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTCursorRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTCursorRead'
type MockSearchCmdable_FTCursorRead_Call struct {
	*mock.Call
}

// FTCursorRead is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - cursorId int
//   - count int
func (_e *MockSearchCmdable_Expecter) FTCursorRead(ctx interface{}, index interface{}, cursorId interface{}, count interface{}) *MockSearchCmdable_FTCursorRead_Call {
	return &MockSearchCmdable_FTCursorRead_Call{Call: _e.mock.On("FTCursorRead", ctx, index, cursorId, count)}
}

func (_c *MockSearchCmdable_FTCursorRead_Call) Run(run func(ctx context.Context, index string, cursorId int, count int)) *MockSearchCmdable_FTCursorRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockSearchCmdable_FTCursorRead_Call) Return(_a0 *MapStringInterfaceCmd) *MockSearchCmdable_FTCursorRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTCursorRead_Call) RunAndReturn(run func(context.Context, string, int, int) *MapStringInterfaceCmd) *MockSearchCmdable_FTCursorRead_Call {
	_c.Call.Return(run)
	return _c
}

// FTDictAdd provides a mock function with given fields: ctx, dict, term
func (_m *MockSearchCmdable) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, dict)
	_ca = append(_ca, term...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FTDictAdd")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, dict, term...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTDictAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDictAdd'
type MockSearchCmdable_FTDictAdd_Call struct {
	*mock.Call
}

// FTDictAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - dict string
//   - term ...interface{}
func (_e *MockSearchCmdable_Expecter) FTDictAdd(ctx interface{}, dict interface{}, term ...interface{}) *MockSearchCmdable_FTDictAdd_Call {
	return &MockSearchCmdable_FTDictAdd_Call{Call: _e.mock.On("FTDictAdd",
		append([]interface{}{ctx, dict}, term...)...)}
}

func (_c *MockSearchCmdable_FTDictAdd_Call) Run(run func(ctx context.Context, dict string, term ...interface{})) *MockSearchCmdable_FTDictAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchCmdable_FTDictAdd_Call) Return(_a0 *IntCmd) *MockSearchCmdable_FTDictAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTDictAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockSearchCmdable_FTDictAdd_Call {
	_c.Call.Return(run)
	return _c
}

// FTDictDel provides a mock function with given fields: ctx, dict, term
func (_m *MockSearchCmdable) FTDictDel(ctx context.Context, dict string, term ...interface{}) *IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, dict)
	_ca = append(_ca, term...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FTDictDel")
	}

	var r0 *IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *IntCmd); ok {
		r0 = rf(ctx, dict, term...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IntCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTDictDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDictDel'
type MockSearchCmdable_FTDictDel_Call struct {
	*mock.Call
}

// FTDictDel is a helper method to define mock.On call
//   - ctx context.Context
//   - dict string
//   - term ...interface{}
func (_e *MockSearchCmdable_Expecter) FTDictDel(ctx interface{}, dict interface{}, term ...interface{}) *MockSearchCmdable_FTDictDel_Call {
	return &MockSearchCmdable_FTDictDel_Call{Call: _e.mock.On("FTDictDel",
		append([]interface{}{ctx, dict}, term...)...)}
}

func (_c *MockSearchCmdable_FTDictDel_Call) Run(run func(ctx context.Context, dict string, term ...interface{})) *MockSearchCmdable_FTDictDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchCmdable_FTDictDel_Call) Return(_a0 *IntCmd) *MockSearchCmdable_FTDictDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTDictDel_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *IntCmd) *MockSearchCmdable_FTDictDel_Call {
	_c.Call.Return(run)
	return _c
}

// FTDictDump provides a mock function with given fields: ctx, dict
func (_m *MockSearchCmdable) FTDictDump(ctx context.Context, dict string) *StringSliceCmd {
	ret := _m.Called(ctx, dict)

	if len(ret) == 0 {
		panic("no return value specified for FTDictDump")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StringSliceCmd); ok {
		r0 = rf(ctx, dict)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTDictDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDictDump'
type MockSearchCmdable_FTDictDump_Call struct {
	*mock.Call
}

// FTDictDump is a helper method to define mock.On call
//   - ctx context.Context
//   - dict string
func (_e *MockSearchCmdable_Expecter) FTDictDump(ctx interface{}, dict interface{}) *MockSearchCmdable_FTDictDump_Call {
	return &MockSearchCmdable_FTDictDump_Call{Call: _e.mock.On("FTDictDump", ctx, dict)}
}

func (_c *MockSearchCmdable_FTDictDump_Call) Run(run func(ctx context.Context, dict string)) *MockSearchCmdable_FTDictDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTDictDump_Call) Return(_a0 *StringSliceCmd) *MockSearchCmdable_FTDictDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTDictDump_Call) RunAndReturn(run func(context.Context, string) *StringSliceCmd) *MockSearchCmdable_FTDictDump_Call {
	_c.Call.Return(run)
	return _c
}

// FTDropIndex provides a mock function with given fields: ctx, index
func (_m *MockSearchCmdable) FTDropIndex(ctx context.Context, index string) *StatusCmd {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for FTDropIndex")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *StatusCmd); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTDropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDropIndex'
type MockSearchCmdable_FTDropIndex_Call struct {
	*mock.Call
}

// FTDropIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *MockSearchCmdable_Expecter) FTDropIndex(ctx interface{}, index interface{}) *MockSearchCmdable_FTDropIndex_Call {
	return &MockSearchCmdable_FTDropIndex_Call{Call: _e.mock.On("FTDropIndex", ctx, index)}
}

func (_c *MockSearchCmdable_FTDropIndex_Call) Run(run func(ctx context.Context, index string)) *MockSearchCmdable_FTDropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTDropIndex_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTDropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTDropIndex_Call) RunAndReturn(run func(context.Context, string) *StatusCmd) *MockSearchCmdable_FTDropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// FTDropIndexWithArgs provides a mock function with given fields: ctx, index, options
func (_m *MockSearchCmdable) FTDropIndexWithArgs(ctx context.Context, index string, options *FTDropIndexOptions) *StatusCmd {
	ret := _m.Called(ctx, index, options)

	if len(ret) == 0 {
		panic("no return value specified for FTDropIndexWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *FTDropIndexOptions) *StatusCmd); ok {
		r0 = rf(ctx, index, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTDropIndexWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTDropIndexWithArgs'
type MockSearchCmdable_FTDropIndexWithArgs_Call struct {
	*mock.Call
}

// FTDropIndexWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - options *FTDropIndexOptions
func (_e *MockSearchCmdable_Expecter) FTDropIndexWithArgs(ctx interface{}, index interface{}, options interface{}) *MockSearchCmdable_FTDropIndexWithArgs_Call {
	return &MockSearchCmdable_FTDropIndexWithArgs_Call{Call: _e.mock.On("FTDropIndexWithArgs", ctx, index, options)}
}

func (_c *MockSearchCmdable_FTDropIndexWithArgs_Call) Run(run func(ctx context.Context, index string, options *FTDropIndexOptions)) *MockSearchCmdable_FTDropIndexWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*FTDropIndexOptions))
	})
	return _c
}

func (_c *MockSearchCmdable_FTDropIndexWithArgs_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTDropIndexWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTDropIndexWithArgs_Call) RunAndReturn(run func(context.Context, string, *FTDropIndexOptions) *StatusCmd) *MockSearchCmdable_FTDropIndexWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTExplain provides a mock function with given fields: ctx, index, query
func (_m *MockSearchCmdable) FTExplain(ctx context.Context, index string, query string) *StringCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTExplain")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StringCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTExplain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTExplain'
type MockSearchCmdable_FTExplain_Call struct {
	*mock.Call
}

// FTExplain is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockSearchCmdable_Expecter) FTExplain(ctx interface{}, index interface{}, query interface{}) *MockSearchCmdable_FTExplain_Call {
	return &MockSearchCmdable_FTExplain_Call{Call: _e.mock.On("FTExplain", ctx, index, query)}
}

func (_c *MockSearchCmdable_FTExplain_Call) Run(run func(ctx context.Context, index string, query string)) *MockSearchCmdable_FTExplain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTExplain_Call) Return(_a0 *StringCmd) *MockSearchCmdable_FTExplain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTExplain_Call) RunAndReturn(run func(context.Context, string, string) *StringCmd) *MockSearchCmdable_FTExplain_Call {
	_c.Call.Return(run)
	return _c
}

// FTExplainWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockSearchCmdable) FTExplainWithArgs(ctx context.Context, index string, query string, options *FTExplainOptions) *StringCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTExplainWithArgs")
	}

	var r0 *StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTExplainOptions) *StringCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTExplainWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTExplainWithArgs'
type MockSearchCmdable_FTExplainWithArgs_Call struct {
	*mock.Call
}

// FTExplainWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTExplainOptions
func (_e *MockSearchCmdable_Expecter) FTExplainWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockSearchCmdable_FTExplainWithArgs_Call {
	return &MockSearchCmdable_FTExplainWithArgs_Call{Call: _e.mock.On("FTExplainWithArgs", ctx, index, query, options)}
}

func (_c *MockSearchCmdable_FTExplainWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTExplainOptions)) *MockSearchCmdable_FTExplainWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTExplainOptions))
	})
	return _c
}

func (_c *MockSearchCmdable_FTExplainWithArgs_Call) Return(_a0 *StringCmd) *MockSearchCmdable_FTExplainWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTExplainWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTExplainOptions) *StringCmd) *MockSearchCmdable_FTExplainWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTInfo provides a mock function with given fields: ctx, index
func (_m *MockSearchCmdable) FTInfo(ctx context.Context, index string) *FTInfoCmd {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for FTInfo")
	}

	var r0 *FTInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FTInfoCmd); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTInfoCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTInfo'
type MockSearchCmdable_FTInfo_Call struct {
	*mock.Call
}

// FTInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *MockSearchCmdable_Expecter) FTInfo(ctx interface{}, index interface{}) *MockSearchCmdable_FTInfo_Call {
	return &MockSearchCmdable_FTInfo_Call{Call: _e.mock.On("FTInfo", ctx, index)}
}

func (_c *MockSearchCmdable_FTInfo_Call) Run(run func(ctx context.Context, index string)) *MockSearchCmdable_FTInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTInfo_Call) Return(_a0 *FTInfoCmd) *MockSearchCmdable_FTInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTInfo_Call) RunAndReturn(run func(context.Context, string) *FTInfoCmd) *MockSearchCmdable_FTInfo_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearch provides a mock function with given fields: ctx, index, query
func (_m *MockSearchCmdable) FTSearch(ctx context.Context, index string, query string) *FTSearchCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTSearch")
	}

	var r0 *FTSearchCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *FTSearchCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSearchCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearch'
type MockSearchCmdable_FTSearch_Call struct {
	*mock.Call
}

// FTSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockSearchCmdable_Expecter) FTSearch(ctx interface{}, index interface{}, query interface{}) *MockSearchCmdable_FTSearch_Call {
	return &MockSearchCmdable_FTSearch_Call{Call: _e.mock.On("FTSearch", ctx, index, query)}
}

func (_c *MockSearchCmdable_FTSearch_Call) Run(run func(ctx context.Context, index string, query string)) *MockSearchCmdable_FTSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSearch_Call) Return(_a0 *FTSearchCmd) *MockSearchCmdable_FTSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSearch_Call) RunAndReturn(run func(context.Context, string, string) *FTSearchCmd) *MockSearchCmdable_FTSearch_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearchWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockSearchCmdable) FTSearchWithArgs(ctx context.Context, index string, query string, options *FTSearchOptions) *FTSearchCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTSearchWithArgs")
	}

	var r0 *FTSearchCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTSearchOptions) *FTSearchCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSearchCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSearchWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearchWithArgs'
type MockSearchCmdable_FTSearchWithArgs_Call struct {
	*mock.Call
}

// FTSearchWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTSearchOptions
func (_e *MockSearchCmdable_Expecter) FTSearchWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockSearchCmdable_FTSearchWithArgs_Call {
	return &MockSearchCmdable_FTSearchWithArgs_Call{Call: _e.mock.On("FTSearchWithArgs", ctx, index, query, options)}
}

func (_c *MockSearchCmdable_FTSearchWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTSearchOptions)) *MockSearchCmdable_FTSearchWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTSearchOptions))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSearchWithArgs_Call) Return(_a0 *FTSearchCmd) *MockSearchCmdable_FTSearchWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSearchWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTSearchOptions) *FTSearchCmd) *MockSearchCmdable_FTSearchWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTSpellCheck provides a mock function with given fields: ctx, index, query
func (_m *MockSearchCmdable) FTSpellCheck(ctx context.Context, index string, query string) *FTSpellCheckCmd {
	ret := _m.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for FTSpellCheck")
	}

	var r0 *FTSpellCheckCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *FTSpellCheckCmd); ok {
		r0 = rf(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSpellCheckCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSpellCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSpellCheck'
type MockSearchCmdable_FTSpellCheck_Call struct {
	*mock.Call
}

// FTSpellCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *MockSearchCmdable_Expecter) FTSpellCheck(ctx interface{}, index interface{}, query interface{}) *MockSearchCmdable_FTSpellCheck_Call {
	return &MockSearchCmdable_FTSpellCheck_Call{Call: _e.mock.On("FTSpellCheck", ctx, index, query)}
}

func (_c *MockSearchCmdable_FTSpellCheck_Call) Run(run func(ctx context.Context, index string, query string)) *MockSearchCmdable_FTSpellCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSpellCheck_Call) Return(_a0 *FTSpellCheckCmd) *MockSearchCmdable_FTSpellCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSpellCheck_Call) RunAndReturn(run func(context.Context, string, string) *FTSpellCheckCmd) *MockSearchCmdable_FTSpellCheck_Call {
	_c.Call.Return(run)
	return _c
}

// FTSpellCheckWithArgs provides a mock function with given fields: ctx, index, query, options
func (_m *MockSearchCmdable) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *FTSpellCheckOptions) *FTSpellCheckCmd {
	ret := _m.Called(ctx, index, query, options)

	if len(ret) == 0 {
		panic("no return value specified for FTSpellCheckWithArgs")
	}

	var r0 *FTSpellCheckCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *FTSpellCheckOptions) *FTSpellCheckCmd); ok {
		r0 = rf(ctx, index, query, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSpellCheckCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSpellCheckWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSpellCheckWithArgs'
type MockSearchCmdable_FTSpellCheckWithArgs_Call struct {
	*mock.Call
}

// FTSpellCheckWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
//   - options *FTSpellCheckOptions
func (_e *MockSearchCmdable_Expecter) FTSpellCheckWithArgs(ctx interface{}, index interface{}, query interface{}, options interface{}) *MockSearchCmdable_FTSpellCheckWithArgs_Call {
	return &MockSearchCmdable_FTSpellCheckWithArgs_Call{Call: _e.mock.On("FTSpellCheckWithArgs", ctx, index, query, options)}
}

func (_c *MockSearchCmdable_FTSpellCheckWithArgs_Call) Run(run func(ctx context.Context, index string, query string, options *FTSpellCheckOptions)) *MockSearchCmdable_FTSpellCheckWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*FTSpellCheckOptions))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSpellCheckWithArgs_Call) Return(_a0 *FTSpellCheckCmd) *MockSearchCmdable_FTSpellCheckWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSpellCheckWithArgs_Call) RunAndReturn(run func(context.Context, string, string, *FTSpellCheckOptions) *FTSpellCheckCmd) *MockSearchCmdable_FTSpellCheckWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTSynDump provides a mock function with given fields: ctx, index
func (_m *MockSearchCmdable) FTSynDump(ctx context.Context, index string) *FTSynDumpCmd {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for FTSynDump")
	}

	var r0 *FTSynDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *FTSynDumpCmd); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FTSynDumpCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSynDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSynDump'
type MockSearchCmdable_FTSynDump_Call struct {
	*mock.Call
}

// FTSynDump is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *MockSearchCmdable_Expecter) FTSynDump(ctx interface{}, index interface{}) *MockSearchCmdable_FTSynDump_Call {
	return &MockSearchCmdable_FTSynDump_Call{Call: _e.mock.On("FTSynDump", ctx, index)}
}

func (_c *MockSearchCmdable_FTSynDump_Call) Run(run func(ctx context.Context, index string)) *MockSearchCmdable_FTSynDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSynDump_Call) Return(_a0 *FTSynDumpCmd) *MockSearchCmdable_FTSynDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSynDump_Call) RunAndReturn(run func(context.Context, string) *FTSynDumpCmd) *MockSearchCmdable_FTSynDump_Call {
	_c.Call.Return(run)
	return _c
}

// FTSynUpdate provides a mock function with given fields: ctx, index, synGroupId, terms
func (_m *MockSearchCmdable) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *StatusCmd {
	ret := _m.Called(ctx, index, synGroupId, terms)

	if len(ret) == 0 {
		panic("no return value specified for FTSynUpdate")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, []interface{}) *StatusCmd); ok {
		r0 = rf(ctx, index, synGroupId, terms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSynUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSynUpdate'
type MockSearchCmdable_FTSynUpdate_Call struct {
	*mock.Call
}

// FTSynUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - synGroupId interface{}
//   - terms []interface{}
func (_e *MockSearchCmdable_Expecter) FTSynUpdate(ctx interface{}, index interface{}, synGroupId interface{}, terms interface{}) *MockSearchCmdable_FTSynUpdate_Call {
	return &MockSearchCmdable_FTSynUpdate_Call{Call: _e.mock.On("FTSynUpdate", ctx, index, synGroupId, terms)}
}

func (_c *MockSearchCmdable_FTSynUpdate_Call) Run(run func(ctx context.Context, index string, synGroupId interface{}, terms []interface{})) *MockSearchCmdable_FTSynUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].([]interface{}))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSynUpdate_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTSynUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSynUpdate_Call) RunAndReturn(run func(context.Context, string, interface{}, []interface{}) *StatusCmd) *MockSearchCmdable_FTSynUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// FTSynUpdateWithArgs provides a mock function with given fields: ctx, index, synGroupId, options, terms
func (_m *MockSearchCmdable) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *FTSynUpdateOptions, terms []interface{}) *StatusCmd {
	ret := _m.Called(ctx, index, synGroupId, options, terms)

	if len(ret) == 0 {
		panic("no return value specified for FTSynUpdateWithArgs")
	}

	var r0 *StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *FTSynUpdateOptions, []interface{}) *StatusCmd); ok {
		r0 = rf(ctx, index, synGroupId, options, terms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTSynUpdateWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSynUpdateWithArgs'
type MockSearchCmdable_FTSynUpdateWithArgs_Call struct {
	*mock.Call
}

// FTSynUpdateWithArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - synGroupId interface{}
//   - options *FTSynUpdateOptions
//   - terms []interface{}
func (_e *MockSearchCmdable_Expecter) FTSynUpdateWithArgs(ctx interface{}, index interface{}, synGroupId interface{}, options interface{}, terms interface{}) *MockSearchCmdable_FTSynUpdateWithArgs_Call {
	return &MockSearchCmdable_FTSynUpdateWithArgs_Call{Call: _e.mock.On("FTSynUpdateWithArgs", ctx, index, synGroupId, options, terms)}
}

func (_c *MockSearchCmdable_FTSynUpdateWithArgs_Call) Run(run func(ctx context.Context, index string, synGroupId interface{}, options *FTSynUpdateOptions, terms []interface{})) *MockSearchCmdable_FTSynUpdateWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*FTSynUpdateOptions), args[4].([]interface{}))
	})
	return _c
}

func (_c *MockSearchCmdable_FTSynUpdateWithArgs_Call) Return(_a0 *StatusCmd) *MockSearchCmdable_FTSynUpdateWithArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTSynUpdateWithArgs_Call) RunAndReturn(run func(context.Context, string, interface{}, *FTSynUpdateOptions, []interface{}) *StatusCmd) *MockSearchCmdable_FTSynUpdateWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// FTTagVals provides a mock function with given fields: ctx, index, field
func (_m *MockSearchCmdable) FTTagVals(ctx context.Context, index string, field string) *StringSliceCmd {
	ret := _m.Called(ctx, index, field)

	if len(ret) == 0 {
		panic("no return value specified for FTTagVals")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *StringSliceCmd); ok {
		r0 = rf(ctx, index, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FTTagVals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTTagVals'
type MockSearchCmdable_FTTagVals_Call struct {
	*mock.Call
}

// FTTagVals is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - field string
func (_e *MockSearchCmdable_Expecter) FTTagVals(ctx interface{}, index interface{}, field interface{}) *MockSearchCmdable_FTTagVals_Call {
	return &MockSearchCmdable_FTTagVals_Call{Call: _e.mock.On("FTTagVals", ctx, index, field)}
}

func (_c *MockSearchCmdable_FTTagVals_Call) Run(run func(ctx context.Context, index string, field string)) *MockSearchCmdable_FTTagVals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSearchCmdable_FTTagVals_Call) Return(_a0 *StringSliceCmd) *MockSearchCmdable_FTTagVals_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FTTagVals_Call) RunAndReturn(run func(context.Context, string, string) *StringSliceCmd) *MockSearchCmdable_FTTagVals_Call {
	_c.Call.Return(run)
	return _c
}

// FT_List provides a mock function with given fields: ctx
func (_m *MockSearchCmdable) FT_List(ctx context.Context) *StringSliceCmd {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FT_List")
	}

	var r0 *StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context) *StringSliceCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StringSliceCmd)
		}
	}

	return r0
}

// MockSearchCmdable_FT_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FT_List'
type MockSearchCmdable_FT_List_Call struct {
	*mock.Call
}

// FT_List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchCmdable_Expecter) FT_List(ctx interface{}) *MockSearchCmdable_FT_List_Call {
	return &MockSearchCmdable_FT_List_Call{Call: _e.mock.On("FT_List", ctx)}
}

func (_c *MockSearchCmdable_FT_List_Call) Run(run func(ctx context.Context)) *MockSearchCmdable_FT_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchCmdable_FT_List_Call) Return(_a0 *StringSliceCmd) *MockSearchCmdable_FT_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchCmdable_FT_List_Call) RunAndReturn(run func(context.Context) *StringSliceCmd) *MockSearchCmdable_FT_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchCmdable creates a new instance of MockSearchCmdable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchCmdable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchCmdable {
	mock := &MockSearchCmdable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
